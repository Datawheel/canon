{
  "neighbors": [],
  "id": 1,
  "ordering": 0,
  "visible": true,
  "meta": [
    {
      "id": 1,
      "profile_id": 1,
      "slug": "geo",
      "dimension": "Geography Province",
      "levels": ["Nation", "Province"],
      "measure": "Expenditure",
      "ordering": 0,
      "cubeName": "gastat_education_training_survey",
      "visible": true
    }
  ],
  "sections": [
    {
      "id": 1,
      "slug": "hero",
      "profile_id": 1,
      "type": "Hero",
      "ordering": 0,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [
        {
          "id": 1,
          "section_id": 1,
          "allowed": "isArabia",
          "ordering": 0,
          "title": "<p>2022-Q3</p>",
          "subtitle": "<p>Gross Domestic Product</p>",
          "value": "<p>20.2k SAR</p>",
          "tooltip": ""
        },
        {
          "id": 2,
          "section_id": 1,
          "allowed": "isArabia",
          "ordering": 1,
          "title": "<p>October 2022</p>",
          "subtitle": "<p>Merchandise Exports</p>",
          "value": "<p>121B SAR</p>",
          "tooltip": ""
        },
        {
          "id": 3,
          "section_id": 1,
          "allowed": "isArabia",
          "ordering": 2,
          "title": "<p>October 2022</p>",
          "subtitle": "<p>Merchandise Imports</p>",
          "value": "<p>63.9B SAR</p>",
          "tooltip": ""
        },
        {
          "id": 4,
          "section_id": 1,
          "allowed": "isArabia",
          "ordering": 3,
          "title": "<p>October 2022</p>",
          "subtitle": "<p>Consumer Price Index</p>",
          "value": "<p>108</p>",
          "tooltip": ""
        },
        {
          "id": 5,
          "section_id": 1,
          "allowed": "always",
          "ordering": 4,
          "title": "<p>2022-Q2</p>",
          "subtitle": "<p>Average Unemployment Rate</p>",
          "value": "<p>7.88%</p>",
          "tooltip": ""
        },
        {
          "id": 6,
          "section_id": 1,
          "allowed": "isArabia",
          "ordering": 5,
          "title": "<p>2020</p>",
          "subtitle": "<p>Total population</p>",
          "value": "<p>35,013,414</p>",
          "tooltip": ""
        }
      ],
      "title": "<p>Saudi Arabia</p>",
      "short": ""
    },
    {
      "id": 8,
      "slug": "about",
      "profile_id": 1,
      "type": "MultiColumn",
      "ordering": 1,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [
        {
          "id": 24,
          "section_id": 8,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In the third quarter of 2022, the Gross Domestic Product (GDP) in Saudi Arabia was 20.2k SAR.</p>"
        },
        {
          "id": 25,
          "section_id": 8,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>In October 2022 a value of 108.1 was registered in inflation measured by the consumer price index (CPI). The commodity with the highest variation compared to the previous period was education, going from 100.7 in September 2021 to 102.6 in October 2022</p>"
        },
        {
          "id": 26,
          "section_id": 8,
          "allowed": "isArabia",
          "ordering": 2,
          "description": "<p>The merchandise exports in Saudi Arabia in October 2022 were 121B SAR, 3.59% lower than previous month. The merchandise imports were 63.9B SAR, 4.51% higher than previous month. As a result, the trade balance in October 2022 was 56.8B SAR.</p>"
        },
        {
          "id": 27,
          "section_id": 8,
          "allowed": "always",
          "ordering": 3,
          "description": "<p>In the third quarter of 2022, the average rate of employed population was 57.3%, where the rate of female employees was 37% for Saudis and 31.9% for non-Saudis, while the rate of male employees was 67.4% for Saudis and 93% for non-Saudis.</p>"
        },
        {
          "id": 28,
          "section_id": 8,
          "allowed": "always",
          "ordering": 4,
          "description": "<p>In the second quarter of 2022, the average unemployment rate reached 7.88%. Differentiating by gender, female unemployment was 19.3% for Saudis and 6.2% for non-Saudis, while male unemployment was 4.7% for Saudis and 1.3% for non-Saudis.</p>"
        },
        {
          "id": 29,
          "section_id": 8,
          "allowed": "isArabia",
          "ordering": 5,
          "description": "<p>For its part, youth unemployment (share of the labor force ages 15-24 without work but available for and seeking employment) reached a rate of 30.5% for Saudi women and 11.7% for Saudi men.</p>"
        },
        {
          "id": 30,
          "section_id": 8,
          "allowed": "isArabia",
          "ordering": 6,
          "description": "<p>The total population registered in 2020 was 35,013,414, where 43.2% were women and 56.8% were men.</p>"
        }
      ],
      "stats": [],
      "title": "<p>About</p>",
      "short": ""
    },
    {
      "id": 2,
      "slug": "economy",
      "profile_id": 1,
      "type": "Grouping",
      "ordering": 2,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Economy</p>",
      "short": ""
    },
    {
      "id": 45,
      "slug": "internal_indices",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 3,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Internal Indices</p>",
      "short": ""
    },
    {
      "id": 3,
      "slug": "gross_domestic_product",
      "profile_id": 1,
      "type": "Default",
      "ordering": 4,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 1,
          "options": [
            { "option": "quarterOption", "allowed": "always" },
            { "option": "yearOption", "allowed": "always" }
          ],
          "default": "quarterOption",
          "profile_id": 1,
          "title": "Temporality",
          "name": "gdpTime",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 2,
            "section_id": 3,
            "selector_id": 1,
            "ordering": 0
          }
        },
        {
          "id": 2,
          "options": [
            { "option": "totalOption", "allowed": "always" },
            { "option": "byActivity", "allowed": "always" }
          ],
          "default": "totalOption",
          "profile_id": 1,
          "title": "Data Grouping",
          "name": "activityGDP",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 3,
            "section_id": 3,
            "selector_id": 2,
            "ordering": 1
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 1,
          "logic": "var tesseract = variables.tesseract;\n\nvar timeSelector = \"quarterOption\"; // yearOption, quarterOption\nvar timeSelectorName = \"Quarterly\";\nvar time = timeSelector === \"yearOption\" ? \"Year\" : \"Quarter\";\nvar timeId = timeSelector === \"yearOption\" ? \"Year\" : \"Quarter ID\";\n\nvar activities = \"totalOption\"; //totalOption, byActivity\nvar activityQuery = activities === \"totalOption\" ?  \"\" : \"Economic Activity Section,\";\n\nreturn {\n  data: (tesseract + \"/data.jsonrecords?cube=gastat_gdp&drilldowns=\" + activityQuery + time + \"&measures=GDP\"),\n  dataFormat: function (resp) {\n    var data = resp.data.map(function (d) { return Object.assign.apply(Object, [ {} ].concat( d )); });\n\n    data.forEach(function (d) {\n      d.Nation = \"Saudi Arabia\";\n      d.GDP = d.GDP * 1000000;\n    });\n    \n    return data;\n  },\n  groupBy: activities === \"totalOption\" ? \"Nation\" : \"Economic Activity Section\",\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label: function label(d) {\n        var dataArray = this._filteredData\n          \t.filter(function (f) { return f.Nation === d.Nation; });\n        var maxX = Math.max.apply(Math, dataArray.map(function (f) { return f[timeId]; }));\t\t\t\n        var maxData = dataArray\n        \t.find(function (f) { return f[timeId] === maxX; });\n        \n        return (\"\" + (formatters.sar(maxData.GDP)));\n      },\n    }\n  },\n  title: activities === \"totalOption\" ? (\"Evolution of the Gross Domestic Product<br /> (\" + timeSelectorName + \")\")\n                                      : (\"Evolution of the Gross Domestic Product by Economic Activity <br /> (\" + timeSelectorName + \")\"),\n  time: time,\n  type: activities === \"totalOption\" ? \"LinePlot\" : \"StackedArea\",\n  tooltip: true,\n  tooltipConfig: {\n    tbody: [\n      [time, function (d) { return d[time]; }],\n      [\"GDP\", function (d) { return formatters.sar(d[\"GDP\"]); }]\n    ]\n  },\n  x: time,\n  xConfig: {\n    title: false\n  },\n  y: \"GDP\",\n  yConfig: {\n    title: false,\n    tickFormat: function (d) { return formatters.sar(d); }\n  }\n};",
          "section_id": 3,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "https://api.datasaudi.datawheel.us/tesseract/data.jsonrecords?cube=gastat_gdp&drilldowns=Quarter&measures=GDP"
            ],
            "type": "LinePlot",
            "groupBy": ["Quarter ID"],
            "x": "Quarter",
            "y": "GDP",
            "xConfig.title": "Quarter",
            "yConfig.title": "GDP"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 2,
          "section_id": 3,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In the third quarter of 2022, the Gross Domestic Product (GDP) in Saudi Arabia was 1.07T SAR (at purchaser's prices). The economic activity with the highest GDP registered in that period was Mining & Quarrying (369B SAR, 34.6% of the total GDP)</p>"
        },
        {
          "id": 1,
          "section_id": 3,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>This graph shows the quarterly evolution of the Gross Domestic Product (GDP) at purchaser's prices in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Gross Domestic Product (GDP)</p>",
      "short": ""
    },
    {
      "id": 23,
      "slug": "consumer_price_index",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 5,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 17,
          "logic": "return {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=sama_inflation&drilldowns=Month,Main+Division&measures=Inflation\"),\n  discrete: \"y\",\n  groupBy: [\"Main Division ID\"],\n  label: function (d) { return String(d[\"Main Division\"]); },\n  title: \"Consumer Price Index for Main Divisions\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", function (d) { return d[\"Month\"]; }],\n      [\"Consumer Price Index\", function (d) { return formatters.abbreviate(d[\"Inflation\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  time: \"Month\",\n  timeline: true,\n  x: \"Inflation\",\n  xConfig: {\n    title: \"Consumer Price Index (2018=100)\",\n    tickFormat: function (d) { return (\"\" + ((formatters.abbreviate(d)))); },\n  },\n  ySort: function (a, b) { return a[\"Inflation\"] - b[\"Inflation\"]; },\n  y: \"Main Division\",\n  yConfig: {\n    title: false\n  }\n};",
          "section_id": 23,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 4,
          "section_id": 23,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In October 2022, the general consumer price index (CPI) was 108. The commodity that recorded the highest CPI was food and beverages (123.7), while the lowest CPI was recorded for housing, water, electricity, gas, and other fuels (91.8).</p>"
        },
        {
          "id": 3,
          "section_id": 23,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the Consumer Price Index (CPI) by expenditure category in different months.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Consumer Price Index</p>",
      "short": ""
    },
    {
      "id": 49,
      "slug": "industrial_production_index",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 6,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 45,
          "logic": "var dataURL = (variables.tesseract) + \"/data.jsonrecords?cube=gastat_ipi_economic_activity&drilldowns=Month,Category&measures=Percentage+change+IPI\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n      data_.forEach(function (d) {\n        d[\"Group\"] = d[\"Category ID\"] === 4 ? \"Bar\" : \"Line\"\n       // const [year, month] = d[\"Month\"].split(\"-\");\n      //  d[\"Time\"] = new Date(year, month*1).getTime();\n    });\n  return data_.filter(function (d) { return d[\"Percentage change IPI\"]; })\n  },\n  discrete: \"x\",\n  height: 500,\n  groupBy: [\"Category\"],\n  shape: function (d) { return d.Group; },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Month\",\n  title: \"Percentage Change in the Industrial Production Index by Economic Activity\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", function (d) { return d[\"Month ID\"]; }],\n      [\"Industrial Production Index Change\", function (d) { return ((formatters.abbreviate(d[\"Percentage change IPI\"])) + \"%\"); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Month\",\n  xConfig: {\n    title: \"\",\n  },\n  y: \"Percentage change IPI\",\n  yConfig: {\n    title: \"Percentage Change\",\n    tickFormat: function (d) { return ((formatters.abbreviate(d)) + \"%\"); },\n  },\n}",
          "section_id": 49,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 66,
          "section_id": 49,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>Saudi Arabia’s Industrial Production Index grew 8.55% in November 2022 compared to the same month of last year.</p>"
        },
        {
          "id": 67,
          "section_id": 49,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>Mining and quarrying grew 5.67% in November 2022 compared to the same period last year, Manufacturing grew 19.7% and Electricity Supply decreased 10.9%</p>"
        },
        {
          "id": 68,
          "section_id": 49,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The graph shows the percentage change in the Industrial Production Index (IPI) by economic activity.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Industrial Production Index</p>",
      "short": ""
    },
    {
      "id": 46,
      "slug": "structural_business",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 7,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Structural Business</p>",
      "short": ""
    },
    {
      "id": 43,
      "slug": "economic_establishments",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 8,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 6,
          "options": [
            { "option": "totalOption", "allowed": "always" },
            { "option": "shareOption", "allowed": "always" }
          ],
          "default": "totalOption",
          "profile_id": 1,
          "title": "",
          "name": "totalShareOption",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 8,
            "section_id": 43,
            "selector_id": 6,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 32,
          "logic": "var abbreviate = formatters.abbreviate;\nvar commas = formatters.commas;\nvar growthPct = formatters.growthPct;\nvar ref = libs.d3;\nvar nest = ref.nest;\nvar sum = ref.sum;\nvar selector = \"totalOption\" //totalOption, shareOption\nvar measure = selector === \"totalOption\" ? \"Economic Establishments\" : \"Percentage Value\"\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=gastat_economic_establishments&drilldowns=Economic+Activity+Section,Size+Class,Year&measures=Economic+Establishments\"),\n  \n  dataFormat: function (resp) {\n    \n    nest()\n      .key(function (d) { return ((d.Year) + \"_\" + (d[\"Economic Activity Section ID\"])); })\n      .entries(resp.data)\n      .forEach(function (group) {\n        var total = sum(group.values, function (d) { return d[\"Economic Establishments\"]; });\n        group.values\n          .forEach(function (d) {\n            d[\"Percentage Value\"] = (d[\"Economic Establishments\"] / total) * 100\n          });\n      });\n    return resp.data.filter(function (d) { return d[\"Economic Establishments\"]; });\n  },\n  \n  discrete: \"y\",\n  groupBy: [\"Size Class ID\"],\n  height: 500,\n  label: function (d) { return \"\"; },\n  legendConfig: {\n    label: function (d) { return ((d[\"Size Class\"]) + \" employees\"); }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Year\",\n  timeline:true,\n  tooltipConfig: {\n    title: function (d) { return ((d[\"Size Class\"]) + \" employees\"); },\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Economic Activity Section\", function (d) { return d[\"Economic Activity Section\"]; }],\n      [\"Economic Establishments\", function (d) { return commas(d[\"Economic Establishments\"]); }],\n      [\"Share\", function (d) { return ((abbreviate(d[\"Percentage Value\"])) + \"%\"); }] ]\n  },\n  type: \"BarChart\",\n  x: measure,\n  xConfig: {\n    tickFormat: selector === \"totalOption\" ? function (d) { return abbreviate(d); } : function (d) { return ((abbreviate(d)) + \"%\"); },\n    title: \"\",\n  },\n  y: \"Economic Activity Section\",\n  yConfig: {\n    title: \"\",\n  },\n  ySort: function (b, a) { return a[\"Economic Activity Section\"].localeCompare(b[\"Economic Activity Section\"]); }\n};",
          "section_id": 43,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=gastat_economic_establishments&drilldowns=Economic+Activity+Section%2CSize+Class%2CYear&measures=Economic+Establishments"
            ],
            "type": "BarChart",
            "groupBy": ["Size Class ID"],
            "x": "Economic Establishments",
            "y": "Economic Activity Section",
            "xConfig.title": "Economic Establishments",
            "yConfig.title": "Economic Activity Section",
            "formatters": { "x": "abbreviate" }
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 31,
          "section_id": 43,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2018, 1,006,666 economic establishments were registered in Saudi Arabia, of which 83.2% had less than 5 employees (837,599 establishments), 13.7% with 5 to 19 employees (137,417 establishments) and 3.14% with more than employees (31,650 establishments).</p>"
        },
        {
          "id": 32,
          "section_id": 43,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The visualization shows the number of economic establishments distributed by economic activity and size class.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Economic Establishments</p>",
      "short": ""
    },
    {
      "id": 42,
      "slug": "revenues_expenses",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 9,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 31,
          "logic": "var abs = formatters.abs;\n\nvar dataURL =  (variables.tesseract) + \"/data.jsonrecords?cube=gastat_operating_expenses_revenues&drilldowns=Economic+Activity+Section%2CYear%2CFlow&measures=Value\"\n\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n      data_.forEach(function (d) {\n        d[\"Value\"] = d[\"Flow ID\"] === 1 ? d[\"Value\"]*-1 : d[\"Value\"] \n    });\n  return data_\n  },\n  discrete: \"y\",\n  groupBy: [\"Flow ID\"],\n  height: 500,\n  label: function (d) { return d.Flow; },\n  shapeConfig: {\n    Bar: {\n      height: \"15px\",\n      labelConfig: {\n        padding: \"0px 5px\",\n        fontSize: function () { return 12; }\n      }\n    }\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  stacked: true,\n  time: \"Year\",\n  timeline: true,\n  title: \"Operating Revenues and Expenses by Economic Activity\",\n  type: \"BarChart\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Economic Activity\", function (d) { return d[\"Economic Activity Section\"]; }],\n      [\"Value\", function (d) { return formatters.sar(Math.abs(d[\"Value\"])); }]\n    ]\n  },\n  x: \"Value\",\n  xConfig: {\n    tickFormat: function (d) { return formatters.abbreviate(abs(d)); },\n    title: \"Operating Expenses and Revenues (Thousands SAR)\"\n  },\n  y: \"Economic Activity Section\",\n  yConfig: {\n    title: \"\",\n    axisConfig:{\n      tickFormat: function (d) { return d[\"Economic Activity Section\"]; }\n    }\n  },\n  ySort: function (b, a) { return a[\"Economic Activity Section\"].localeCompare(b[\"Economic Activity Section\"]); }\n}",
          "section_id": 42,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 33,
          "section_id": 42,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2017, the total operating revenues of the various economic activities in Saudi Arabia was 3.16T SAR, with Mining and quarrying being the activity with the highest registration (793B SAR, 25.1% of the total).</p>"
        },
        {
          "id": 34,
          "section_id": 42,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>In the same year, the total operating expenses were 1.27T SAR, with Wholesale and retail trade repair of motor vehicles and motorcycles being the activity with the highest registration (366B SAR, 28.7% of the total).</p>"
        },
        {
          "id": 35,
          "section_id": 42,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The visualization shows the operating revenues and expenses of different economic activities.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Revenues &amp; Expenses</p>",
      "short": ""
    },
    {
      "id": 41,
      "slug": "public_finances",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 10,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 30,
          "logic": "var dataURL = (variables.tesseract) + \"/data.jsonrecords?cube=sama_government_revenues_expenditures&drilldowns=Type,Year&measures=Value\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n      data_.forEach(function (d) {\n        d[\"Group\"] = d[\"Type ID\"] === 5 ? \"Line\" : \"Bar\"\n        d[\"Value\"] = d[\"Type ID\"] === 3 || d[\"Type ID\"] === 4 ? d[\"Value\"]*-1: d[\"Value\"]*1\n    });\n  return data_;\n  },\n  discrete: \"x\",\n  groupBy: [\"Type\"],\n  shape: function (d) { return d.Group; },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Year\",\n  timeline: false,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Value (millions)\", function (d) { return formatters.sar(Math.abs(d[\"Value\"])); }]\n    ]\n  },\n  title: \"Annual Government Revenues And Expenditures\",\n  type: \"BarChart\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\",\n    //tickFormat: d => d%50===0 ? d : \"\"\n  },\n  y: \"Value\",\n  yConfig: {\n    title: \"Millions of Riyals\",\n    tickFormat: function (d) { return formatters.sar(Math.abs(d)); },\n  },\n}",
          "section_id": 41,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 36,
          "section_id": 41,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>The Kingdom's non-oil revenues reached 403B SAR in 2021, while oil revenues were 562B SAR. The expenditures were 1.04T SAR, of which 117B SAR were capital expenditures and 922B SAR were current expenditures. This results in a deficit of 73.4B SAR.</p>"
        },
        {
          "id": 37,
          "section_id": 41,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The visualization shows the annual evolution of government expenditures and revenues and the line represents the deficit or surplus in each year.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Public Finances</p>",
      "short": ""
    },
    {
      "id": 47,
      "slug": "foreign_trade",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 11,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Foreign Trade</p>",
      "short": ""
    },
    {
      "id": 9,
      "slug": "trade_balance",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 12,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 8,
          "logic": "\nvar exports = (variables.tesseract) + \"/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Exports\"\nvar imports = (variables.tesseract) + \"/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Imports\"\nvar tradeBalance = (variables.tesseract) + \"/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Trade+Balance\"\n\n\nreturn {\n  data: [exports, imports, tradeBalance],\n  dataFormat: function (resp) {\n    var exports_ = resp[0].data;\n    var imports_ = resp[1].data;\n    var tradeBalance_ = resp[2].data;\n    \n    var updateData = function (data, flow, flowID, value) {\n      data.forEach(function (d) {\n        d[\"Flow ID\"] = flowID;\n        d[\"Flow\"] = flow;\n        d[\"Value\"] = d[value]*1000000\n        delete d[value];\n      });\n      return data;\n    };\n    \n    exports_ = updateData(exports_, \"Export\", 1, \"Exports\");\n    imports_ = updateData(imports_, \"Import\", 2, \"Imports\");\n    tradeBalance_ = updateData(tradeBalance_, \"Trade Balance \", 3, \"Trade Balance\");\n    \n    return exports_.concat(imports_.concat( tradeBalance_));\n  },\n  groupBy: [\"Flow ID\"],\n  label: function (d) { return d[\"Flow\"]; },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label: function label(d) {\n        var dataArray = this._filteredData\n          \t.filter(function (f) { return f[\"Flow ID\"] === d[\"Flow ID\"]; });\n        var maxX = Math.max.apply(Math, dataArray.map(function (f) { return f[\"Month ID\"]; }));\t\t\t\n        var maxData = dataArray\n        \t.find(function (f) { return f[\"Month ID\"] === maxX; });\n        \n        return (\"\" + (formatters.sar(maxData[\"Value\"])));\n      },\n      strokeDasharray: function (d) { return d[\"Flow ID\"]*1 === 3 ? \"5 3\" : \"0\"; }\n    }\n  },\n  time: \"Month\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", function (d) { return d[\"Month\"]; }],\n      [\"Merchandise Value\", function (d) { return formatters.sar(d[\"Value\"]); }]\n    ]\n  },\n  title: \"Merchandise Exports and Imports\",\n  type: \"LinePlot\",\n  x: \"Month\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Value\",\n  yConfig: {\n    title: \"\",\n    tickFormat: function (d) { return formatters.sar(d); }\n  }\n};\n",
          "section_id": 9,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Indicator+Quarter=1%2C2&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
            ],
            "type": "LinePlot",
            "groupBy": ["Indicator Quarter ID"],
            "x": "Quarter",
            "y": "Indicator",
            "xConfig.title": "Quarter",
            "yConfig.title": "Indicator"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 6,
          "section_id": 9,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In October 2022, merchandise exports reached 121B SAR, while merchandise imports were 63.9B SAR. As a result, the trade balance resulted in 56.8B SAR.</p>"
        },
        {
          "id": 5,
          "section_id": 9,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the monthly evolution of merchandise exports and imports in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Trade Balance</p>",
      "short": ""
    },
    {
      "id": 48,
      "slug": "exports_imports",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 13,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 14,
          "options": [
            { "option": "exports", "allowed": "always" },
            { "option": "imports", "allowed": "always" }
          ],
          "default": "exports",
          "profile_id": 1,
          "title": "",
          "name": "importExport",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 21,
            "section_id": 48,
            "selector_id": 14,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 47,
          "logic": "var countryForeignTrade = variables.countryForeignTrade;\nvar productForeignTrade = variables.productForeignTrade;\nvar sar = formatters.sar;\nvar selector = \"exports\"// importOption, exportsOption\n\nvar tradeOption = selector === \"imports\" ? 1 : 2\n\nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?Trade+Flow=\" + tradeOption + \"&cube=gastat_foreign_trade&drilldowns=Trade+Flow,HS2,Month&measures=Million+SAR&parents=true\"\nif(countryForeignTrade){\n  dataURL += \"Country=\" + (countryForeignTrade[\"Country ID\"])\n}\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data.map(function (d) { return Object.assign({}, d); })\n    data.forEach(function (d) {\n      d[\"Million SAR\"] = d[\"Million SAR\"] * 1000000\n    });\n    return data;\n  },\n  groupBy: [\"Section ID\", \"HS2 ID\"],\n  label: function (d) { return String(d[\"HS2\"]); },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: function (d) { return d[\"Section\"]; },\n   tbody: false,\n  },\n  on: {\n    click: function (d) { return setVariables({productForeignTrade: d, countryForeignTrade: null}); }\n  },\n  sum: \"Million SAR\",\n  time: \"Month\",\n  timeline: true,\n  title: selector === \"exports\" ? \"Exports by Products\" : \"Imports by Products\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", function (d) { return d[\"Month\"]; }],\n      [\"Value\", function (d) { return sar(d[\"Million SAR\"]); }]\n    ]\n  },\n  total: \"Million SAR\",\n  totalFormat: formatters.sar,\n  type: \"Treemap\"\n};",
          "section_id": 48,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        },
        {
          "id": 46,
          "logic": "var countryForeignTrade = variables.countryForeignTrade;\nvar productForeignTrade = variables.productForeignTrade;\nvar sar = formatters.sar;\nvar selector = \"exports\"// importOption, exportsOption\n\nvar tradeOption = selector === \"imports\" ? 1 : 2\n\nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?Trade+Flow=\" + tradeOption + \"&cube=gastat_foreign_trade&drilldowns=Trade+Flow,Country,Month&measures=Million+SAR&parents=true\"\nif(productForeignTrade){\n  dataURL += \"HS2=\" + (countryForeignTrade[\"HS2 ID\"])\n}\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data.filter(function (d) { return d[\"Continent ID\"] !== \"xx\"; }).map(function (d) { return Object.assign({}, d); })\n    data.forEach(function (d) {\n      d[\"Million SAR\"] = d[\"Million SAR\"] * 1000000\n    });\n    return data;\n  },\n  groupBy: [\"Continent ID\", \"Country ID\"],\n  label: function (d) { return String(d[\"Country\"]); },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: function (d) { return d[\"Continent\"]; },\n   tbody: false,\n  },\n  on: {\n    click: function (d) { return setVariables({countryForeignTrade: d, productForeignTrade: null}); }\n  },\n  sum: \"Million SAR\",\n  time: \"Month\",\n  title: selector === \"exports\" ? \"Exports by Destinations\" : \"Imports by Origen\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", function (d) { return d[\"Month\"]; }],\n      [\"Value\", function (d) { return sar(d[\"Million SAR\"]); }]\n    ]\n  },\n  total: \"Million SAR\",\n  totalFormat: formatters.sar,\n  type: \"Treemap\"\n};",
          "section_id": 48,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Trade+Flow=1&cube=gastat_foreign_trade&drilldowns=Trade+Flow%2CCountry%2CMonth&measures=Million+SAR&parents=true"
            ],
            "type": "Treemap",
            "groupBy": ["Continent ID", "Country ID"],
            "sum": "Million SAR",
            "colorScale": "manual-none"
          },
          "simple": false,
          "ordering": 1
        }
      ],
      "descriptions": [
        {
          "id": 69,
          "section_id": 48,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>Exports in October 2022 were 121B SAR. The main exports were Mineral Fuels, Oils And Waxes (95.8B SAR), Plastics And Articles Thereof (6.25B SAR), and Organic Chemicals (6.16B SAR).</p>"
        },
        {
          "id": 70,
          "section_id": 48,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The main export destinations in October 2022 were China (22.2B SAR), South Korea (12.4B SAR), and Japan (12.4B SAR).</p>"
        },
        {
          "id": 71,
          "section_id": 48,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The first chart groups exports by product and the second shows the distribution of exports by country of destination.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Exports and Imports</p>",
      "short": ""
    },
    {
      "id": 4,
      "slug": "labour_market",
      "profile_id": 1,
      "type": "Grouping",
      "ordering": 14,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Labour Market</p>",
      "short": ""
    },
    {
      "id": 50,
      "slug": "employment",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 15,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Employment</p>",
      "short": ""
    },
    {
      "id": 5,
      "slug": "labour_force",
      "profile_id": 1,
      "type": "Default",
      "ordering": 16,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 7,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "labourForceNationality",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 12,
            "section_id": 5,
            "selector_id": 7,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 35,
          "logic": "var tesseract = variables.tesseract;\nvar hierarchy = variables.hierarchy;\nvar id = variables.id;\n\nvar selector = \"saudi\"//totalOption, saudi, nonSaudi\nvar selectorName = \"Saudi\"\nvar optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nvar dataURL = tesseract + \"/data.jsonrecords?\" + optionSelected + hierarchy + \"=\" + id + \"&cube=gastat_participation_rate_sex_nationality_region&drilldowns=Quarter,Sex&measures=Participation+Rate\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return d[\"Sex\"]; },\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label: function label(d) {\n        var dataArray = this._filteredData\n          \t.filter(function (f) { return f[\"Sex ID\"] === d[\"Sex ID\"]; });\n        var maxX = Math.max.apply(Math, dataArray.map(function (f) { return f[\"Quarter ID\"]; }));\t\t\t\n        var maxData = dataArray\n        \t.find(function (f) { return f[\"Quarter ID\"] === maxX; });\n        \n        return ((formatters.abbreviate(maxData[\"Participation Rate\"])) + \"%\");\n      },\n    }\n  },\n  time: \"Quarter\",\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", function (d) { return d[\"Quarter\"]; }],\n      [\"Participation Rate\", function (d) { return ((formatters.abbreviate(d[\"Participation Rate\"])) + \"%\"); }]\n    ]\n  },\n  title: (\"Labour Force Participation Rate by Gender - \" + selectorName + \" Population\"),   \n  type: \"LinePlot\",\n  x: \"Quarter\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Participation Rate\",\n  yConfig: {\n    title: \"Participation Rate\",\n    tickFormat: function (d) { return ((formatters.abbreviate(d)) + \"%\"); }\n  }\n};",
          "section_id": 5,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?<hierarchy>=<id>&cube=gastat_participation_rate_sex_nationality_region&drilldowns=Quarter,Sex&measures=Participation+Rate"
            ],
            "type": "LinePlot",
            "groupBy": ["Sex ID"],
            "x": "Quarter",
            "y": "Participation Rate",
            "xConfig.title": "Quarter",
            "yConfig.title": "Participation Rate"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 9,
          "section_id": 5,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In the third quarter of 2022, the Saudi female labour force participation rate was 37% and the Saudi male labour force participation rate was 67.4%.</p>"
        },
        {
          "id": 7,
          "section_id": 5,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the quarterly evolution of the labour force participation by gender in Saudi Arabia (saudi population).</p>"
        }
      ],
      "stats": [],
      "title": "<p>Labour Force</p>",
      "short": ""
    },
    {
      "id": 44,
      "slug": "average_salaries",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 17,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 8,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "averageSalariesButton",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 13,
            "section_id": 44,
            "selector_id": 8,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 36,
          "logic": "var tesseract = variables.tesseract;\nvar sar = formatters.sar;\n\nvar selector = \"saudi\"//totalOption, saudi, nonSaudi\nvar selectorName = \"Saudi\"\nvar optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?\" + optionSelected + \"cube=sama_salary_profession_nationality_sex&drilldowns=Profession%2CYear%2CSex&measures=Average+Salaries\"),\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return sar(d[\"Average Salaries\"]); },\n  legendConfig: {\n    label: function (d) { return d[\"Sex\"]; }\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  time: \"Year\",\n  timeline: true,\n  title: (\"Average Salaries in the Private Sector by Main Profession - \" + selectorName + \" Population\"),  \n  tooltipConfig: {\n    title: function (d) { return d[\"Sex\"]; },\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Profession\", function (d) { return d[\"Profession\"]; }],\n      [\"Average Salaries\", function (d) { return formatters.sar(d[\"Average Salaries\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Profession\",\n  xConfig: {\n    title: \"\"\n  },\n  xSort: function (b, a) { return a[\"Profession\"].localeCompare(b[\"Profession\"]); },\n  y: \"Average Salaries\",\n  yConfig: {\n    title: \"\",\n    tickFormat: function (d) { return formatters.sar(d); }\n  }\n};",
          "section_id": 44,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=sama_salary_profession_nationality_sex&drilldowns=Profession%2CYear%2CSex&measures=Average+Salaries"
            ],
            "type": "BarChart",
            "groupBy": ["Sex ID"],
            "x": "Profession",
            "y": "Average Salaries",
            "xConfig.title": "Profession",
            "yConfig.title": "Average Salaries"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 52,
          "section_id": 44,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2021, the profession with the highest average salary in the private sector for Saudi women was scientific, technical and human specialists (6.9k SAR). For its part, the profession with the highest average salary in the private sector for Saudi men was scientific, technical and human specialists (13.1k SAR).</p>"
        },
        {
          "id": 53,
          "section_id": 44,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The visualization shows the average salary in the private sector for different professions grouped by gender.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Average Salaries</p>",
      "short": ""
    },
    {
      "id": 51,
      "slug": "unemployment",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 18,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Unemployment</p>",
      "short": ""
    },
    {
      "id": 10,
      "slug": "unemployment_gender_age",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 19,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 10,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentNationality",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 16,
            "section_id": 10,
            "selector_id": 10,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 13,
          "logic": "var tesseract = variables.tesseract;\nvar hierarchy = variables.hierarchy;\nvar id = variables.id;\n\nvar selector = \"saudi\"//saudi, nonSaudi\nvar selectorName = \"Saudi\"\nvar optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nvar dataURL = tesseract + \"/data.jsonrecords?\" + optionSelected + hierarchy + \"=\" + id + \"&cube=gastat_rate_gender_nationality_region&drilldowns=Quarter,Sex&measures=Unemployment+Rate\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return d[\"Sex\"]; },\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label: function label(d) {\n        var dataArray = this._filteredData\n          \t.filter(function (f) { return f[\"Sex ID\"] === d[\"Sex ID\"]; });\n        var maxX = Math.max.apply(Math, dataArray.map(function (f) { return f[\"Quarter ID\"]; }));\t\t\t\n        var maxData = dataArray\n        \t.find(function (f) { return f[\"Quarter ID\"] === maxX; });\n        \n        return ((formatters.abbreviate(maxData[\"Unemployment Rate\"])) + \"%\");\n      },\n    }\n  },\n  time: \"Quarter\",\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", function (d) { return d[\"Quarter\"]; }],\n      [\"Participation Rate\", function (d) { return ((formatters.abbreviate(d[\"Unemployment Rate\"])) + \"%\"); }]\n    ]\n  },\n  title: (\"Unemployment Rate by Gender - \" + selectorName + \" Population\"),   \n  type: \"LinePlot\",\n  x: \"Quarter\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Unemployment Rate\",\n  yConfig: {\n    title: \"Unemployment Rate\",\n    tickFormat: function (d) { return ((formatters.abbreviate(d)) + \"%\"); }\n  }\n};",
          "section_id": 10,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Indicator+Quarter=3%2C4%2C5&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
            ],
            "type": "LinePlot",
            "groupBy": ["Indicator Quarter ID"],
            "x": "Quarter",
            "y": "Indicator",
            "xConfig.title": "Quarter",
            "yConfig.title": "Indicator"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 10,
          "section_id": 10,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In the second quarter of 2022, the Saudi female unemployment rate was 19.3% and the Saudi male unemployment rate was 4.7%.</p>"
        },
        {
          "id": 8,
          "section_id": 10,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the quarterly evolution of the unemployment rate by sex of the Saudi population in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Unemployment</p>",
      "short": ""
    },
    {
      "id": 25,
      "slug": "unemployment_by_age",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 20,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 11,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentNationalityByAge",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 17,
            "section_id": 25,
            "selector_id": 11,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 14,
          "logic": "var abbreviate = formatters.abbreviate;\n\nvar selector = \"saudi\"//saudi, nonSaudi\nvar selectorName = \"Saudi\"\nvar optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?\" + optionSelected + \"cube=gastat_rate_gender_nationality_age&drilldowns=Group+Name,Age+Groups,Quarter,Sex&measures=Unemployment+Rate&exclude=Age+Groups:6\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data.map(function (d) { return Object.assign({}, d); });\n\n    data.forEach(function (d) {\n      d[\"Age Groups\"] = d[\"Age Groups ID\"] === 5 ? \"Aged 55 and over\" : d[\"Age Groups\"]\n      d[\"Age\"] = d[\"Age Groups ID\"] !== 5 ? d[\"Group Name\"] + \" (\" + d[\"Age Groups\"] + \")\" : d[\"Group Name\"]\n      delete d[\"Group Name\"]\n      delete d[\"Age Groups\"]\n    });\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return ((abbreviate(d[\"Unemployment Rate\"])) + \"%\"); },\n  legendConfig: {\n    label: function (d) { return d[\"Sex\"]; },\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  time: \"Quarter\",\n  timeline: true,\n  title: (\"Unemployment Rate by Age Range - \" + selectorName + \" Population\"),\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", function (d) { return d[\"Quarter\"]; }],\n      [\"Unemployment Rate\", function (d) { return ((abbreviate(d[\"Unemployment Rate\"])) + \"%\"); }] ],\n    title: function (d) { return d[\"Sex\"]; }\n  },\n  type: \"BarChart\",\n  x: \"Age\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Unemployment Rate\",\n  yConfig: {\n    title: \"Unemployment Rate\",\n    tickFormat: function (d) { return ((abbreviate(d)) + \"%\"); }\n  }\n};",
          "section_id": 25,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Indicator+Quarter=30%2C31%2C32%2C33%2C34%2C35%2C36%2C37%2C38%2C39%2C40%2C41%2C42%2C43%2C44&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
            ],
            "type": "BarChart",
            "groupBy": ["Indicator Quarter ID"],
            "x": "Indicator Quarter",
            "y": "Indicator",
            "xConfig.title": "Indicator Quarter",
            "yConfig.title": "Indicator"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 12,
          "section_id": 25,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>Youth unemployment refers to the share of the labor force ages 15-24 without work but available for and seeking employment.</p>"
        },
        {
          "id": 14,
          "section_id": 25,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>In second quarter of 2022, Saudi female youth unemployment rate was 30.5% and Saudi male youth unemployment rate was 11.7%. You can review other age groups in the graph.</p>"
        },
        {
          "id": 11,
          "section_id": 25,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The graph shows the unemployment rate by sex and age groups in different quarters in Saudi Arabia (Saudi population).</p>"
        }
      ],
      "stats": [],
      "title": "<p>Unemployment by Age</p>",
      "short": ""
    },
    {
      "id": 19,
      "slug": "unemployment_by_educational_level",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 21,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 12,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentByEducation",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 18,
            "section_id": 19,
            "selector_id": 12,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 10,
          "logic": "var abbreviate = formatters.abbreviate;\n\nvar selector = \"saudi\"//saudi, nonSaudi\nvar selectorName = \"Saudi\"\nvar optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nvar educationLevel = {\n  \"No schooling\": 1,\n  \"Early childhood education\": 2,\n  \"Primary\": 3,\n  \"Intermediate education (general or vocational)\": 4,\n  \"Secondary education (general or vocational)\": 5,\n  \"Post-secondary non-tertiary education\": 6,\n  \"Short-cycle tertiary education\": 7,\n  \"Graduate or Equivalent\": 8,\n  \"Master's degree or equivalent\": 9,\n  \"Ph.D\": 10\n}\n\nvar dataURL =  (variables.tesseract) + \"/data.jsonrecords?\" + optionSelected + \"cube=gastat_rate_gender_nationality_education&drilldowns=Quarter,Educational+Level,Sex&measures=Unemployment+Rate&exclude=Educational+Level:13,4,1\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n    data.forEach(function (d) {\n      d[\"Educational Level ID\"] = educationLevel[d[\"Educational Level\"]]\n    })\n    return data\n  },\n  groupBy: [\"Sex ID\"],\n  discrete: \"y\",\n  label: function (d) { return ((abbreviate(d[\"Unemployment Rate\"])) + \"%\"); },\n  legendConfig: {\n    label: function (d) { return d[\"Sex\"]; },\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  title: (\"Unemployment by Gender and Educational Level - \" + selectorName + \" Population\"),\n  time: \"Quarter\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", function (d) { return d[\"Quarter\"]; }],\n      [\"Unemployment Rate\", function (d) { return ((abbreviate(d[\"Unemployment Rate\"])) + \"%\"); }]\n    ],\n    title: function (d) { return d[\"Sex\"]; }\n  },\n  type: \"BarChart\",\n // height: 450,\n  //ySort: (a, b) => b[\"Education ID\"] - a[\"Education ID\"],\n  x: \"Unemployment Rate\",\n  xConfig: {\n    title: false,\n    tickFormat: function (d) { return ((abbreviate(d)) + \"%\"); }\n  },\n  y: \"Educational Level\",\n  yConfig: {\n    title: \"\",\n  },\n   ySort: function (a, b) { return a[\"Educational Level ID\"] - b[\"Educational Level ID\"]; },\n};",
          "section_id": 19,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 16,
          "section_id": 19,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In second quarter of 2022, the highest unemployment rate for Saudi women was recorded for those with an education level of graduate or equivalent (24.7%). On the other hand, the highest unemployment rate in Saudi men was registered in those who had an educational level of intermediate education (general or vocational) (6.7%).</p>"
        },
        {
          "id": 15,
          "section_id": 19,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the percentage of the labor force with different levels of education who are unemployed (Saudi population).</p>"
        }
      ],
      "stats": [],
      "title": "<p>Unemployment by Educational Level</p>",
      "short": ""
    },
    {
      "id": 68,
      "slug": "job_seekers",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 22,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 39,
          "logic": "var abbreviate = formatters.abbreviate;\n\nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?cube=sama_job_seekers_region&drilldowns=Year,Province&measures=Job+Seekers&exclude=Province:14\"\n \nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n\n   /* data.forEach(d => {\n      const s = dataWorkforce.find(h => h[\"State ID\"] === d[\"State ID\"]) || {};\n      d[\"Workforce Total\"] = s[\"Workforce\"];\n      d[\"Percentage\"] = (d.Workforce / d[\"Workforce Total\"]) * 100;\n    });*/\n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: function (d) { return String(d[\"Province\"]); },\n  colorScale: \"Job Seekers\",\n  colorScaleConfig: {\n    scale: \"log\",\n    axisConfig: {\n      tickFormat: function (d) { return (\"\" + (formatters.abbreviate(d))); } ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", function (d) { return d[\"Year\"]; }],\n     [\"Job Seekers\",  function (d) { return abbreviate(d[\"Job Seekers\"]); }]\n    ]\n  },\n  title: \"Number of Job Seekers by Administrative Region\",\n  type: \"Geomap\",\n  topojson: \"/topojson/SA_regions.json\",\n  topojsonId: function (d) { return d.properties.id; },\n}",
          "section_id": 68,
          "allowed": "isArabia",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 55,
          "section_id": 68,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2021 the number of job seekers of Saudi Arabia was 87,032. The regions that concentrated the largest number of job seekers were Makkah Al-Mokarramah (19,091 job seekers), Al-Riyadh (16,172 job seekers), and Eastern Region (10,881 job seekers).</p>"
        },
        {
          "id": 56,
          "section_id": 68,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the number of job seekers.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Job Seekers</p>",
      "short": ""
    },
    {
      "id": 16,
      "slug": "people_and_society",
      "profile_id": 1,
      "type": "Grouping",
      "ordering": 23,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>People &amp; Society</p>",
      "short": ""
    },
    {
      "id": 52,
      "slug": "population",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 24,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Population</p>",
      "short": ""
    },
    {
      "id": 7,
      "slug": "population_pyramid",
      "profile_id": 1,
      "type": "Default",
      "ordering": 25,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 3,
          "logic": "var ref = libs.d3;\nvar sum = ref.sum;\nvar nest = ref.nest;\nvar abs = formatters.abs;\n\nvar dataURL =  (variables.tesseract) + \"/data.jsonrecords?cube=gastat_population_pyramid&drilldowns=Age+Range%2CSex%2CYear&measures=Population\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n      data_.forEach(function (d) {\n        d[\"Population\"] = d[\"Sex ID\"] === 1 ? d[\"Population\"]*-1 : d[\"Population\"] \n    });\n  return data_//.filter(d => d[\"Indicator\"]*1 !== 0)\n  },\n  discrete: \"y\",\n  groupBy: ['Sex'],\n  label: function (d) { return d.Sex; },\n  legendTooltip: {\n    title: function (d) { return d[\"Sex\"]; },\n    tbody: false,\n  },\n  shapeConfig: {\n    label: function (d) { return ''; },\n    fill: function (d) { return d[\"Sex\"] === \"Male\" ? \"#5259fd\" : \"#38d1da\"; },\n    Bar: {\n      height: \"15px\",\n      labelConfig: {\n        padding: \"0px 5px\",\n        fontSize: function () { return 12; }\n      }\n    }\n  },\n  legendConfig: {\n    label: function (d) { return d[\"Sex\"]; },\n    shapeConfig: {\n     fill: function (d) { return d[\"Sex\"] === \"Male\" ? \"#5259fd\" : \"#38d1da\"; },\n    }\n  },\n  legendPosition: \"bottom\",\n  stacked: true,\n  time: \"Year\",\n  timeline: true,\n  title: \"Population Pyramid\",\n  type: \"BarChart\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      ['Age Range', function (d) { return d[\"Age Range\"]; }],\n      ['Population', function (d) { return formatters.abbreviate(Math.abs(d[\"Population\"])); }]\n    ]\n  },\n  x: 'Population',\n  xConfig: {\n    tickFormat: function (d) { return formatters.abbreviate(abs(d)); },\n    title: \"Population\"\n  },\n  y: 'Age Range',\n  yConfig: {\n    title: \"Age Range\",\n    axisConfig:{\n      tickFormat: function (d) { return d[\"Age Range\"]; }\n    }\n  }\n}",
          "section_id": 7,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 19,
          "section_id": 7,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2021, the female population was concentrated in the age range of 5 - 9 years (1,452,198 women, corresponding to 9.85% of the total female population). For its part, the male population was concentrated in the age range of 35 - 39 years (2,218,109 men, representing 11.5% of the total male population).</p>"
        },
        {
          "id": 18,
          "section_id": 7,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph corresponds to a population pyramid that shows the male and female population by age range.</p>"
        },
        {
          "id": 17,
          "section_id": 7,
          "allowed": "always",
          "ordering": 2,
          "description": "<p><em><strong>*In some years, information is not available for all age ranges, therefore the total population of Saudi Arabia is not shown.</strong></em></p>"
        }
      ],
      "stats": [],
      "title": "<p>Population Pyramid</p>",
      "short": ""
    },
    {
      "id": 39,
      "slug": "population",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 26,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 4,
          "options": [
            { "option": "totalPopulationOption", "allowed": "always" },
            { "option": "densityPopulationOption", "allowed": "always" }
          ],
          "default": "totalPopulationOption",
          "profile_id": 1,
          "title": "",
          "name": "populationDensity",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 6,
            "section_id": 39,
            "selector_id": 4,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 24,
          "logic": "var abbreviate = formatters.abbreviate;\n\nvar selector = \"totalPopulationOption\" //totalPopulationOption, densityPopulationOption\nvar selectorName = \"Total Population\"\n\nvar measure = selector === \"totalPopulationOption\" ? \"Population\" : \"Population Density\"\n \nvar dataDensity = (variables.tesseract) + \"/data.jsonrecords?cube=gastat_population_density_region&drilldowns=Year,Province&measures=Population+Density\";\nvar dataPopulation = (variables.tesseract) + \"/data.jsonrecords?cube=sama_population_province_sex&drilldowns=Year,Province&measures=Population\"\n\nvar dataURL = selector === \"totalPopulationOption\" ? dataPopulation : dataDensity\n \nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n    \n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: function (d) { return String(d[\"Province\"]); },\n  colorScale: measure,\n  colorScaleConfig: {\n    scale: \"jenks\",\n  //  color: formatters.colorScaleGrowth(\"sequential_neg\"),\n    axisConfig: {\n      tickFormat: function (d) { return (\"\" + (formatters.abbreviate(d))); } ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", function (d) { return d[\"Year\"]; }],\n     [(\"\" + selectorName),  function (d) { return abbreviate(d[measure]); }]\n    ]\n  },\n  title: (selectorName + \" by Administrative Region\"),\n  type: \"Geomap\",\n  topojson: \"/topojson/SA_regions.json\",\n  topojsonId: function (d) { return d.properties.id; },\n}",
          "section_id": 39,
          "allowed": "isArabia",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 38,
          "section_id": 39,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2020 the total population of Saudi Arabia was 35,013,414 people. The regions that concentrated the largest population were Makkah Al-Mokarramah (9,261,257 people), Al-Riyadh (8,872,712 people), and Eastern Region (5,266,998 people).</p>"
        },
        {
          "id": 39,
          "section_id": 39,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the total population of each region.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Population</p>",
      "short": ""
    },
    {
      "id": 53,
      "slug": "housing",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 27,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Housing</p>",
      "short": ""
    },
    {
      "id": 40,
      "slug": "housing_units",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 28,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 5,
          "options": [
            { "option": "housingType", "allowed": "always" },
            { "option": "housingTenure", "allowed": "always" }
          ],
          "default": "housingType",
          "profile_id": 1,
          "title": "",
          "name": "housing",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 7,
            "section_id": 40,
            "selector_id": 5,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 29,
          "logic": "var selector = \"housingType\" //housingType, housingTenure\nvar selectorName = \"Type of Housing\"\n\nvar drilldown = selector === \"housingType\" ? \"Housing Type\" : \"Tenure Type\"\n\nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?\" + (variables.hierarchy) + \"=\" + (variables.id) + \"&cube=gastat_housing_type_tenure&drilldowns=Year,\" + drilldown + \"&measures=Housing+Units\"\n\nreturn {\n  data: dataURL,\n  groupBy: [(drilldown + \" ID\")],\n  groupPadding: 50,\n  label: function (d) { return formatters.abbreviate(d[\"Housing Units\"]); },\n  legendConfig: {\n    label: function (d) { return d[drilldown]; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    label: function (d) { return d[drilldown]; },\n    tbody: false,\n  },\n  title: (\"Housing Units (Occupied with Saudi Households) by \" + selectorName),\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Housing Units\", function (d) { return formatters.commas(d[\"Housing Units\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Housing Units\",\n  yConfig: {\n    title: \"\"\n  }\n};",
          "section_id": 40,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=gastat_housing_tenure&drilldowns=Year%2CTenure+Type&measures=Housing+Units"
            ],
            "type": "BarChart",
            "groupBy": ["Tenure Type ID"],
            "x": "Year",
            "y": "Housing Units",
            "xConfig.title": "",
            "yConfig.title": "Housing Units",
            "title": "Housing Units (Occupied with Saudi Households) by"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 44,
          "section_id": 40,
          "allowed": "type_housingType",
          "ordering": 0,
          "description": "<p>In 2019, 576,285 housing units occupied by Saudi households were a apartment (15.7% of the total), 395,560 were a villa (10.7% of the total), 288,360 were a apartment (7.83% of the total), 253,116 were a apartment (6.87% of the total), and 183,876 were a traditional house (4.99% of the total).</p>"
        },
        {
          "id": 45,
          "section_id": 40,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The visualization shows housing units (occupied with saudi households) by type of housing in different years in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Housing Units</p>",
      "short": ""
    },
    {
      "id": 55,
      "slug": "health",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 29,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Health</p>",
      "short": ""
    },
    {
      "id": 56,
      "slug": "health_facilities_and_personnel",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 30,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 9,
          "options": [
            { "option": "healthPersonnelOption", "allowed": "always" },
            { "option": "healthFacilitiesOption", "allowed": "always" }
          ],
          "default": "healthPersonnelOption",
          "profile_id": 1,
          "title": "",
          "name": "healthOptions",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 11,
            "section_id": 56,
            "selector_id": 9,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 37,
          "logic": "var selector = \"healthPersonnelOption\" //healthPersonnelOption, healthFacilitiesOption\nvar selectorName = \"Health personnel\" \n\nvar categories = selector === \"healthPersonnelOption\" ? \"1,5,6,7\" : \"3,4,8\"\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?\" + (variables.hierarchy) + \"=\" + (variables.id) + \"&Resource+Category=\" + categories + \"&cube=sama_health_facilities_resources&drilldowns=Year%2CProvince%2CResource+Category&measures=Resources\"),\n  groupBy: [\"Resource Category ID\"],\n  label: function (d) { return String(d[\"Resource Category\"]); },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label: function label(d) {\n        var dataArray = this._filteredData\n          \t.filter(function (f) { return f[\"Resource Category ID\"] === d[\"Resource Category ID\"]; });\n        var maxX = Math.max.apply(Math, dataArray.map(function (f) { return f[\"Year\"]; }));\t\t\t\n        var maxData = dataArray\n        \t.find(function (f) { return f[\"Year\"] === maxX; });\n        \n        return (\"\" + (formatters.commas(maxData[\"Resources\"])));\n      },\n    }\n  },\n  title: (\"Evolution of \" + (formatters.lowercase(selectorName))),\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Resources\", function (d) { return (\"\" + (formatters.commas(d[\"Resources\"]))); }]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Resources\",\n  yConfig: {\n    tickFormat: function (d) { return formatters.abbreviate(d); },\n    title: \"\"\n  }\n};",
          "section_id": 56,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?<hierarchy>=<id>&Resource+Category=1%2C5%2C6%2C7&cube=sama_health_facilities_resources&drilldowns=Year%2CProvince%2CResource+Category&measures=Resources"
            ],
            "type": "LinePlot",
            "groupBy": ["Resource Category ID"],
            "x": "Year",
            "y": "Resources",
            "xConfig.title": "Year",
            "yConfig.title": "Resources",
            "formatters": { "y": "abbreviate" }
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 46,
          "section_id": 56,
          "allowed": "personnel_healthPersonnelOption",
          "ordering": 0,
          "description": "<p>In 2021, 154,302 nursing staff, 103,254 assistant health personnel, 95,214 physicians, and 30,840 pharmacists were registered in Saudi Arabia. Among the four categories there are 383,610 people in the health area.</p>"
        },
        {
          "id": 47,
          "section_id": 56,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The visualization shows the annual evolution of the health personnel in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Health Facilities and Personnel</p>",
      "short": ""
    },
    {
      "id": 54,
      "slug": "education",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 31,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Education</p>",
      "short": ""
    },
    {
      "id": 57,
      "slug": "students_schools_and_teachers",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 32,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 13,
          "options": [
            { "option": "students", "allowed": "always" },
            { "option": "schools", "allowed": "always" },
            { "option": "teachers", "allowed": "always" },
            { "option": "avgStudentSchool", "allowed": "always" },
            { "option": "avgStudentTeacher", "allowed": "always" },
            { "option": "avgTeacherSchool", "allowed": "always" }
          ],
          "default": "students",
          "profile_id": 1,
          "title": "",
          "name": "studentsMetrics",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 19,
            "section_id": 57,
            "selector_id": 13,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 43,
          "logic": "var abbreviate = formatters.abbreviate;\nvar commas = formatters.commas;\n\nvar selector = \"students\" //students, schools, teachers, avgStudentSchool, avgStudentTeacher, avgTeacherSchool\nvar selectorName = \"Students\"\n\nvar dataURLs = {\n  \"students\": ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n  \"schools\":  ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n  \"teachers\": ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n\n  \"avgStudentSchool\": [\n     ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n     ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\") ],\n  \"avgStudentTeacher\": [\n    ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n     ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\") ],\n  \"avgTeacherSchool\": [\n     ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\"),\n     ((variables.tesseract) + \"/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value\") ],\n}\n\nvar measure1 = {\n  \"avgStudentSchool\": \"Students\",\n  \"avgStudentTeacher\": \"Students\",\n  \"avgTeacherSchool\": \"Teachers\"\n}\n\nvar measure2 = {\n  \"avgStudentSchool\": \"Schools\",\n  \"avgStudentTeacher\": \"Teachers\",\n  \"avgTeacherSchool\": \"Schools\"\n}\n\nvar formatter = selector === \"students\" || selector === \"schools\" || selector === \"teachers\" ? commas : abbreviate\n\nvar dataURL = dataURLs[selector]\n\n  return {\n    data: dataURL,\n    dataFormat: function (resp) {\n      if(selector === \"students\" || selector === \"schools\" || selector === \"teachers\"){\n        var data = resp.data;\n        return data;\n      }\n      else{\n        var ref = [resp[0].data, resp[1].data];\n        var data1 = ref[0];\n        var data2 = ref[1];\n        data1.forEach(function (d) {\n          var temp = data2.find(function (h) { return h[\"Year\"] === d[\"Year\"] && h[\"Province ID\"] === d[\"Province ID\"]; }) || {};\n          d[measure2[selector]] = temp[\"Value\"]\n          d[measure1[selector]] = d[\"Value\"]\n          d[\"Value\"] = d[measure1[selector]] / d[measure2[selector]] \n          delete d[\"Academic Category\"]\n          delete d[\"Academic Category ID\"]\n        })\n        return data1;\n      }\n    },\n    groupBy: [\"Province ID\"],  \n    label: function (d) { return String(d[\"Province\"]); },\n    colorScale: \"Value\",\n    colorScaleConfig: {\n      scale: \"jenks\",\n      axisConfig: {\n        tickFormat: function (d) { return (\"\" + (formatter(d))); } ,\n      }\n    },\n    colorScalePosition: \"bottom\",\n    ocean: \"transparent\",\n    tiles: false,\n    time: \"Year\",\n    timeline: true,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", function (d) { return d[\"Year\"]; }],\n       [selectorName,  function (d) { return formatter(d[\"Value\"]); }]\n      ]\n    },\n    title: (selectorName + \" by Administrative Region\"),\n    type: \"Geomap\",\n    topojson: \"/topojson/SA_regions.json\",\n    topojsonId: function (d) { return d.properties.id; },\n  }",
          "section_id": 57,
          "allowed": "isArabia",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 61,
          "section_id": 57,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2021, the number of students in Saudi Arabia was 11.9M. The administrative regions with the highest values in this metric were Najran (6,077,502), Al-Riyadh (1,411,167), and Makkah Al-Mokarramah (1,371,412).</p>"
        },
        {
          "id": 62,
          "section_id": 57,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the number of students.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Students, Schools &amp; Teachers</p>",
      "short": ""
    },
    {
      "id": 24,
      "slug": "illiteracy_rate",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 33,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 12,
          "logic": "var abbreviate = formatters.abbreviate;\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=gastat_illiteracy_region&drilldowns=Sex%2CYear%2CProvince&measures=Illiteracy+Rate\"),\n  /*dataFormat: resp => {\n    let data = resp.data;\n        data_.forEach(d => {\n          d[\"Indicator Year\"] = d[\"Indicator Year\"].replace(\"Illiteracy Rate - \", \"\")\n      });\n    return data\n  },*/\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return ((abbreviate(d[\"Illiteracy Rate\"])) + \"%\"); },\n  legendConfig: {\n    label: function (d) { return d.Sex; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  title: \"Illiteracy Rate by Gender and Regions, 2017\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Illiteracy Rate\", function (d) { return ((abbreviate(d[\"Illiteracy Rate\"])) + \"%\"); }]\n    ],\n    title: function (d) { return d.Sex; }\n  },\n  type: \"BarChart\",\n  x: \"Province\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Illiteracy Rate\",\n  yConfig: {\n    title: \"Illiteracy Rate\", \n    tickFormat: function (d) { return ((abbreviate(d)) + \"%\"); },\n  }\n};",
          "section_id": 24,
          "allowed": "isArabia",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Indicator+Year=40%2C41%2C42%2C43%2C44%2C45%2C46%2C47%2C48%2C49%2C50%2C51%2C52%2C53%2C54%2C55%2C56%2C57%2C58%2C59%2C60%2C61%2C62%2C63%2C64%2C65%2C66%2C67&cube=gastat_indicators_year&drilldowns=Indicator+Year%2CYear&measures=Indicator"
            ],
            "type": "BarChart",
            "groupBy": ["Indicator Year ID"],
            "x": "Year",
            "y": "Indicator",
            "xConfig.title": "Year",
            "yConfig.title": "Indicator"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 21,
          "section_id": 24,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2017, the highest rate of illiteracy was registered among Female from Jazan (18.1%), while the lowest rate was registered among Male from Aseer (2.2%).</p>"
        },
        {
          "id": 20,
          "section_id": 24,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The graph shows the illiteracy rate in 2017 by region and gender in Saudi Arabia.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Illiteracy Rate</p>",
      "short": ""
    },
    {
      "id": 17,
      "slug": "expenditures_on_education",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 34,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 7,
          "logic": "var sar = formatters.sar;\nvar ref = libs.d3;\nvar sum = ref.sum;\nvar nest = ref.nest;\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=gastat_education_training_survey&drilldowns=Province%2CExpenditure+Type&measures=Expenditure\"),\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n    nest()\n      .key(function (d) { return d[\"Province\"]; })\n      .entries(data_)\n      .forEach(function (group) {\n        var total = sum(group.values, function (d) { return d[\"Expenditure\"]; })\n        group.values.forEach(function (d) {\n          d[\"Total\"] = total\n          d[\"Expenditure\"] =  d[\"Expenditure\"]*1000000\n        })\n      })\n      \n    return data_\n  },\n  discrete: \"y\",\n  groupBy: [\n    \"Expenditure Type ID\"\n  ],\n  label: function (d) { return String(d[\"Expenditure Type\"]); },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  legendSort: function (a,b) { return a[\"Expenditure Type ID\"] - b[\"Expenditure Type ID\"]; },\n  stacked: true,\n  title: \"Saudi Household Expenditure on Education by Administrative Area and Type of Expenditure, 2017\",\n  tooltipConfig: {\n    tbody: [\n      [\"Province\", function (d) { return d[\"Province\"]; }],\n      [\"Expenditure\", function (d) { return sar(d[\"Expenditure\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  y: \"Province\",\n  yConfig: {\n    title: \"\"\n  },\n  x: \"Expenditure\",\n  xConfig: {\n    title: \"\",\n    tickFormat: function (d)  { return sar(d); }\n  },\n  ySort: function (a, b) { return a[\"Total\"] - b[\"Total\"]; },\n};",
          "section_id": 17,
          "allowed": "isArabia",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=gastat_education_training_survey&drilldowns=Province%2CExpenditure+Type&measures=Expenditure"
            ],
            "type": "BarChart",
            "groupBy": ["Expenditure Type ID"],
            "x": "Province",
            "y": "Expenditure",
            "xConfig.title": "Province",
            "yConfig.title": "Expenditure"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 23,
          "section_id": 17,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2017, the highest expenditure on education was registered in Al-Riyadh with 6.26B SAR, distributed in tuition fees (3.2B SAR), other (1.3B SAR), school supplies (1.1B SAR), school transfer (409M SAR), and private tuition (260M SAR).</p>"
        },
        {
          "id": 22,
          "section_id": 17,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The graph shows the saudi household expenditure on education by administrative area and type of expenditure.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Expenditures on Education</p>",
      "short": ""
    },
    {
      "id": 58,
      "slug": "higher_education",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 35,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 15,
          "options": [
            { "option": "newStudents", "allowed": "always" },
            { "option": "enrolledStudents", "allowed": "always" },
            { "option": "graduates", "allowed": "always" }
          ],
          "default": "newStudents",
          "profile_id": 1,
          "title": "",
          "name": "higherEducation",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 22,
            "section_id": 58,
            "selector_id": 15,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 48,
          "logic": "var selector = \"newStudents\" //newStudents, enrolledStudents, graduates\nvar selectorName = \"New Students\"\n\nvar statusID = selector === \"newStudents\" ? 3 : selector === \"enrolledStudents\" ? 1 : 2\n\nvar dataURL =  (variables.tesseract) + \"/data.jsonrecords?Student+Status=\" + statusID + \"&cube=sama_higher_education&drilldowns=Year,Student+Status,Academic+Status,Sex&measures=Students\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data_ = resp.data.map(function (d) { return Object.assign({}, d); });\n    return data_\n  },\n  discrete: \"y\",\n  groupBy: [\"Sex ID\"],\n  label: function (d) { return formatters.abbreviate(d[\"Students\"]); },\n  legendConfig: {\n    label: function (d) { return d[\"Sex\"]; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: function (d) { return d[\"Sex\"]; },\n   tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: (selectorName + \" by Educational Group and Gender\"),\n  total: \"Students\",\n  totalFormat: formatters.commas,\n  tooltipConfig: {\n    title: function (d) { return d[\"Sex\"]; },\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Academic Status\", function (d) { return d[\"Academic Status\"]; }],\n      [\"Students\", function (d) { return formatters.commas(d[\"Students\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Students\",\n  xConfig: {\n    title: \"Students\"\n  },\n  y: \"Academic Status\",\n  yConfig: {\n    title: \"\"\n  },\n  ySort: function (b,a) { return b[\"Students\"] - a[\"Students\"]; },\n};",
          "section_id": 58,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Student+Status=3&cube=sama_higher_education&drilldowns=Year,Student+Status,Academic+Status,Sex&measures=Students"
            ],
            "type": "BarChart",
            "groupBy": ["Sex ID"],
            "x": "Academic Status",
            "y": "Students",
            "xConfig.title": "Academic Status",
            "yConfig.title": "Students"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 72,
          "section_id": 58,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2020, 221,016 new students were registered in Bachelor degree, 28,714 in Intermediate Diploma, 13,546 in Master, 2,214 in Ph.D., 1,933 in Higher Diploma, and 93 in Fellowship. You can see the distribution by gender in the graph.</p>"
        },
        {
          "id": 73,
          "section_id": 58,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The chart shows the distribution of new students by educational group and gender in the year selected on the timeline.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Higher Education</p>",
      "short": ""
    },
    {
      "id": 70,
      "slug": "humanitarian_donations",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 36,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Humanitarian Donations</p>",
      "short": ""
    },
    {
      "id": 71,
      "slug": "funding_to_countries",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 37,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 57,
          "logic": "var dataURL = (variables.tesseract) + \"/data.jsonrecords?cube=donor_data&drilldowns=Year,Destination+Country&measures=Value,Count&parents=true\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data.filter(function (d) { return d[\"Destination Continent ID\"] !== \"xx\"; }).map(function (d) { return Object.assign({}, d); })\n    return data;\n  },\n  groupBy: [\"Destination Continent ID\", \"Destination Country ID\"],\n  label: function (d) { return String(d[\"Destination Country\"]); },\n  legendConfig: {\n    label: function (d) { return \"\"; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: function (d) { return d[\"Destination Continent\"]; },\n   tbody: false,\n  },\n  /*on: {\n    click: d => setVariables({countryForeignTrade: d, productForeignTrade: null})\n  },*/\n  sum: \"Value\",\n  time: \"Year\",\n  timeline:true,\n  title: \"Funding to countries\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Funding\", function (d) { return formatters.dollar(d[\"Value\"]); }]\n    ]\n  },\n  total: \"Value\",\n  totalFormat: formatters.dollar,\n  type: \"Treemap\"\n};",
          "section_id": 71,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=donor_data&drilldowns=Destination+Country&limit=50&measures=Value%2CCount&parents=true"
            ],
            "type": "Treemap",
            "groupBy": ["Destination Continent ID", "Destination Country ID"],
            "sum": "Value",
            "colorScale": "manual-none"
          },
          "simple": false,
          "ordering": 0
        },
        {
          "id": 59,
          "logic": "var dataURL =(variables.tesseract) + \"/data.jsonrecords?cube=donor_data&drilldowns=Year,Destination+Organization+Type&measures=Value,Count\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data.filter(function (d) { return d[\"Destination Organization Type ID\"] !== 99; })\n    \n    data.forEach(function (d) {\n      d[\"Destination\"] = d[\"Destination Organization Type ID\"] === 8 ? \"Other\" : d[\"Destination Organization Type\"].split(\":\")[0]\n      d[\"Sub Destination\"] = d[\"Destination Organization Type ID\"] === 8 ? \"Other\" : d[\"Destination Organization Type\"].split(\":\")[1]\n      d[\"Sub Destination ID\"] = d[\"Destination Organization Type ID\"] \n      delete d[\"Destination Organization Type\"]\n      delete [\"Destination Organization Type ID\"] \n    })\n\n    return data;\n  },\n  groupBy: [\"Destination\", \"Sub Destination\"],\n  label: function (d) { return ((d[\"Sub Destination\"]) + \" (\" + (formatters.dollar(d[\"Value\"])) + \")\"); },\n  legendConfig: {\n    label: function (d) { return d[\"Destination\"]; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: function (d) { return d[\"Destination\"]; },\n   tbody: false,\n  },\n  sum: \"Value\",\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Funding\", function (d) { return formatters.dollar(d[\"Value\"]); }]\n    ]\n  },\n  type: \"Treemap\",\n\n};",
          "section_id": 71,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 1
        }
      ],
      "descriptions": [
        {
          "id": 89,
          "section_id": 71,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>The countries that received the largest amounts of humanitarian aid in 2022 were Republic Of Yemen ($485M), Afghanistan ($36.2M), and Sudan ($35.8M).</p>"
        },
        {
          "id": 90,
          "section_id": 71,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The main beneficiary organizations of these funds were  Other Multilateral Organizations ($304M),  UN Agencies ($155M), and  National NGOs/CSOs ($89.4M).</p>"
        },
        {
          "id": 91,
          "section_id": 71,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The first graph groups the amounts of humanitarian aid by country of destination and the second shows the distribution of these funds according to the organization receiving the aid.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Funding to Countries and Organization</p>",
      "short": ""
    },
    {
      "id": 72,
      "slug": "destination_organizations",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 38,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 60,
          "logic": "return {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=donor_data&drilldowns=Year%2CSector&measures=Value%2CCount&parents=true\"),\n  dataFormat: function (resp) {\n    var data = resp.data.filter(function (d) { return d[\"Sector ID\"] !== 99; })\n    return data;\n  },\n  discrete: \"y\",\n  groupBy: [\"Year\"],\n  label: function (d) { return formatters.dollar(d[\"Value\"]); },\n  shapeConfig: {\n    Bar: {\n     fill: \"D3PLUS-COMMON-RESET\"\n    }\n  },\n  time: \"Year\",\n  timeline: true,\n  title: \"Funding by Sector\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Funding\", function (d) { return formatters.dollar(d[\"Value\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Value\",\n  xConfig: {\n    title: \"\",\n    tickFormat: function (d) { return formatters.dollar(d); }\n  },\n  y: \"Sector\",\n  yConfig: {\n    title: \"\"\n  },\n  ySort: function (a, b) { return a[\"Value\"] - b[\"Value\"]; },\n};\n\n",
          "section_id": 72,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Year=2022&cube=donor_data&drilldowns=Year%2CSector&measures=Value%2CCount&parents=true"
            ],
            "type": "BarChart",
            "groupBy": ["Year"],
            "x": "Sector",
            "y": "Value",
            "xConfig.title": "Sector",
            "yConfig.title": "Value"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 92,
          "section_id": 72,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>The sectors that benefited the most from humanitarian aid in 2022 were Health ($234M), Logistics ($173M), and Food Security ($152M).</p>"
        },
        {
          "id": 93,
          "section_id": 72,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The graph shows the humanitarian aid received by different sectors.</p>"
        },
        {
          "id": 94,
          "section_id": 72,
          "allowed": "always",
          "ordering": 2,
          "description": "<p><em>*Sector refers to a discrete technical area of humanitarian action. Differently from countries where a cluster system is activated and the Cluster Lead is accountable to the Humanitarian Coordinator, reference to \"Sectors\" occurs when the Government has the responsibiity for coordination.&nbsp;</em></p>"
        }
      ],
      "stats": [],
      "title": "<p>Reporting Organizations</p>",
      "short": ""
    },
    {
      "id": 59,
      "slug": "energy_and_water",
      "profile_id": 1,
      "type": "Grouping",
      "ordering": 39,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Energy &amp; Water</p>",
      "short": ""
    },
    {
      "id": 60,
      "slug": "energy",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 40,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Energy</p>",
      "short": ""
    },
    {
      "id": 61,
      "slug": "production",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 41,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 17,
          "options": [
            { "option": "productionOil", "allowed": "always" },
            { "option": "productionRefined", "allowed": "always" }
          ],
          "default": "productionOil",
          "profile_id": 1,
          "title": "",
          "name": "energyProduction",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 25,
            "section_id": 61,
            "selector_id": 17,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 53,
          "logic": "var sar = formatters.sar;\nvar lowercase = formatters.lowercase;\nvar abbreviate = formatters.abbreviate;\nvar growthPct = formatters.growthPct;\nvar commas = formatters.commas;\n\nvar selector = \"productionOil\" //productionOil, productionRefined\n\nif(selector === \"productionOil\"){\n\n  var dataBarrels = (variables.tesseract) + \"/data.jsonrecords?cube=sama_crude_oil_production&drilldowns=Year&measures=Million+Barrels\"\n  var dataGrowth = (variables.tesseract) + \"/data.jsonrecords?cube=sama_crude_oil_production&drilldowns=Year&measures=Percentage+Change\"\n  \n  var dataFinal = []\n  \n  return {\n    data: [dataBarrels, dataGrowth],\n    dataFormat: function (resp) {\n      var dataBarrels_ = resp[0].data;\n      var dataGrowth_ = resp[1].data;\n      \n      dataBarrels_.forEach(function (d) {\n        d[\"shape\"] = \"Barrels\"\n        d[\"Barrels\"] = d[\"Million Barrels\"] \n        delete d[\"Million Barrels\"]\n      })\n      \n      dataGrowth_.forEach(function (d) {\n        d[\"shape\"] = \"Growth\"\n        d[\"Growth\"] = d[\"Percentage Change\"]\n        delete d[\"Percentage Change\"]\n      })\n      dataFinal = dataBarrels_.concat(dataGrowth_) \n  \n      return dataFinal.filter(function (d) { return d[\"Year\"] >= 1963; });\n    },\n    groupBy: \"shape\",\n    discrete: \"x\",\n    label: function (d) { return d.shape !== \"Barrels\" ? \"Percentage Change\" : \"Total Production\"; },\n    legendConfig: {\n      label: function (d) { return d[\"shape\"] !== \"Barrels\" ? \"Percentage Change\" : \"Total Production\"; },\n    },\n    legendPosition: \"bottom\",\n    legendTooltip: {\n      tbody: false,\n    },\n    timeline: true,\n    time: \"Year\",\n    title: \"Saudi Crude Oil Production\",\n    tooltipConfig: {\n      tbody: function (d) {\n        var customTooltip = [];\n        d[\"shape\"] === \"Barrels\" ?\n        customTooltip = [\n          [\"Year\", d[\"Year\"]],\n          [\"Million Barrels\", commas(d[\"Barrels\"])] ] : \n        customTooltip = [\n          [\"Year\", d[\"Year\"]],\n          [\"Percentage Change\", ((abbreviate(d[\"Growth\"]*1)) + \"%\")] ]\n      return customTooltip;\n      },\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    y: \"Barrels\",\n    yConfig: {\n      tickFormat: function (d) { return (abbreviate(d*1)); },\n      title: \"Total Production - Million Barrels\",\n    },\n    y2: \"Growth\",\n    y2Config: {\n      tickFormat: function (d) { return ((abbreviate(d*1)) + \"%\"); },\n      title: \"Percentage Change\",\n      scale: \"linear\"\n    },\n  }\n}\nelse{\n  return {\n    data: ((variables.tesseract) + \"/data.jsonrecords?cube=sama_production_refined_products&drilldowns=Product,Year&measures=Thousand+Barrels\"),\n    dataFormat: function (resp) {\n      var data = resp.data;\n      \n      data.forEach(function (d) {\n        d[\"Barrels\"] = d[\"Thousand Barrels\"] \n        delete d[\"Thousand Barrels\"]\n      })\n    \n      return data\n    },\n    groupBy: [\"Product ID\"],\n    label: function (d) { return String(d[\"Product\"]); },\n    legendPosition: \"bottom\",\n    legendTooltip: {\n      tbody: false, \n    },\n    timeline: true,\n    time: \"Year\",\n    title: \"Production of Refined Products\",\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", function (d) { return d[\"Year\"]; }],\n        [\"Thousand Barrels\", function (d) { return commas(d[\"Barrels\"]); }]\n      ]\n    },\n    type: \"StackedArea\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Barrels\",\n    yConfig: {\n      title: \"Thousand Barrels\",\n      tickFormat: function (d) { return abbreviate(d); }\n    }\n  }\n}",
          "section_id": 61,
          "allowed": "always",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 74,
          "section_id": 61,
          "allowed": "energyOil_productionOil",
          "ordering": 0,
          "description": "<p>Crude oil production in Saudi Arabia during 2021 was 3,331 million barrels, being 1.23% lower than the previous period.</p>"
        },
        {
          "id": 75,
          "section_id": 61,
          "allowed": "energyOil_productionOil",
          "ordering": 1,
          "description": "<p>The graph shows the annual evolution of crude oil production in Saudi Arabia and its percentage change.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Production</p>",
      "short": ""
    },
    {
      "id": 62,
      "slug": "saudi_exports_by_destination",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 42,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 18,
          "options": [
            { "option": "exportOil", "allowed": "always" },
            { "option": "exportRefined", "allowed": "always" }
          ],
          "default": "exportOil",
          "profile_id": 1,
          "title": "",
          "name": "energyDestinations",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 26,
            "section_id": 62,
            "selector_id": 18,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 55,
          "logic": "var commas = formatters.commas;\nvar abbreviate = formatters.abbreviate;\nvar selector = \"exportOil\"//exportOil, exportRefined\nvar selectorName = \"Crude Oil\"\n\nvar productType = selector === \"exportOil\" ? 1 : 2\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?Product+Type=\" + productType + \"&cube=sama_products_destination&drilldowns=Product+Type,Destination,Year&measures=Million+Barrels&exclude=Destination:8\"),\n  dataFormat: function (resp) {\n      var data = resp.data.map(function (d) { return Object.assign({}, d); });\n      \n      data.forEach(function (d) {\n        d[\"Barrels\"] = d[\"Million Barrels\"] \n        delete d[\"Million Barrels\"]\n      })\n    \n      return data\n    },\n  groupBy: [\"Destination ID\"],\n  label: function (d) { return String(d[\"Destination\"]); },\n  legendPosition: \"bottom\",\n    legendTooltip: {\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: \"Year\",\n  title: (\"Saudi Exports Of \" + selectorName + \" By Destination\"),\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Million Barrels\", function (d) { return commas(d[\"Barrels\"]); }]\n    ]\n  },\n  type: \"StackedArea\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Barrels\",\n  yConfig: {\n    title: \"Million Barrels\",\n    tickFormat: function (d) { return abbreviate(d); }\n  }\n};",
          "section_id": 62,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "https://api.datasaudi.datawheel.us/tesseract/data.jsonrecords?Product+Type=1&cube=sama_products_destination&drilldowns=Product+Type%2CDestination%2CYear&measures=Million+Barrels"
            ],
            "type": "StackedArea",
            "groupBy": ["Destination ID"],
            "x": "Year",
            "y": "Million Barrels",
            "xConfig.title": "Year",
            "yConfig.title": "Million Barrels"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 78,
          "section_id": 62,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>Saudi exports of crude oil in 2021 reached 2272.98 million barrels. By destination, exports went to Asia and Far East (77% of the exports), Western Europe (8.42% of the exports), North America (7.13% of the exports), Middle East (3.53% of the exports), Africa (2.84% of the exports), and South America (1.11% of the exports)</p>"
        },
        {
          "id": 79,
          "section_id": 62,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The visualization shows the annual evolution of Saudi exports of Crude Oil by destination.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Saudi Exports by Destination</p>",
      "short": ""
    },
    {
      "id": 63,
      "slug": "oil_prices",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 43,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [
        {
          "id": 16,
          "options": [
            { "option": "realOil", "allowed": "always" },
            { "option": "nominalOil", "allowed": "always" }
          ],
          "default": "realOil",
          "profile_id": 1,
          "title": "",
          "name": "oilPrice",
          "type": "single",
          "dynamic": "",
          "section_selector": {
            "id": 23,
            "section_id": 63,
            "selector_id": 16,
            "ordering": 0
          }
        }
      ],
      "subtitles": [],
      "visualizations": [
        {
          "id": 52,
          "logic": "var commas = formatters.commas;\nvar abbreviate = formatters.abbreviate;\nvar dollar = formatters.dollar;\nvar selector = \"realOil\" // realOil, nominalOil\nvar selectorName = \"Real Oil Price\"\n\nvar price = selector === \"realOil\" ? 2 : 1\n\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?Price+Type=\" + price + \"&cube=sama_oil_prices&drilldowns=Oil,Price+Type,Year&measures=USD+per+Barrel\"),\n  groupBy: [\"Oil ID\"],\n  label: function (d) { return formatters.dollar(d[\"USD per Barrel\"]); },\n  legendPosition: \"bottom\",\n  legendConfig: {\n    label: function (d) { return d[\"Oil\"]; }\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: (selectorName + \" <br /> (Base Year 2005)\"),\n  tooltipConfig: {\n    title: function (d) { return d[\"Oil\"]; },\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"USD per Barrel\", function (d) { return dollar(d[\"USD per Barrel\"]); }]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"USD per Barrel\",\n  yConfig: {\n    title: \"USD per Barrel\",\n    tickFormat: function (d) { return dollar(d); }\n  }\n};",
          "section_id": 63,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?Price+Type=2&cube=sama_oil_prices&drilldowns=Oil,Price+Type,Year&measures=USD+per+Barrel"
            ],
            "type": "LinePlot",
            "groupBy": ["Oil ID"],
            "x": "Year",
            "y": "USD per Barrel",
            "xConfig.title": "Year",
            "yConfig.title": "USD per Barrel"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 80,
          "section_id": 63,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>In 2021, the real price of Arabian Light oil was $55.5 per barrel.</p>"
        },
        {
          "id": 81,
          "section_id": 63,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>Compared to North Sea (Brent) oil whose price was $55.7, Arabian Light oil was priced 0.36% lower, while when compared to OPEC basket oil whose price was $54.9, Arabian Light oil was priced 1.09% higher.</p>"
        },
        {
          "id": 82,
          "section_id": 63,
          "allowed": "always",
          "ordering": 2,
          "description": "<p>The graph shows the annual evolution of the real oil price in dollars per barrel.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Oil Prices</p>",
      "short": ""
    },
    {
      "id": 64,
      "slug": "electricity",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 44,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Electricity</p>",
      "short": ""
    },
    {
      "id": 65,
      "slug": "electricity_consumption",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 45,
      "allowed": "isArabia",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 51,
          "logic": "var abbreviate = formatters.abbreviate;\nvar commas = formatters.commas;\n\nreturn {\n  data: ((variables.tesseract) + \"/data.jsonrecords?cube=sama_electricity_consumption_subregion&drilldowns=Consumption+Type,Subregion,Year&measures=Megawatts\"),\n  groupBy: [\"Consumption Type ID\"],\n  groupPadding: 50,\n  label: function (d) { return abbreviate(d[\"Megawatts\"]); },\n  legendConfig: {\n    label: function (d) { return d[\"Consumption Type\"]; }\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    title: function (d) { return d[\"Consumption Type\"]; },\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: \"Electricity Consumption of The Kingdom by Type of Consumption\",\n  tooltipConfig: {\n    title: function (d) { return d[\"Consumption Type\"]; },\n    tbody: [\n      [\"Year\", function (d) { return d[\"Year\"]; }],\n      [\"Subregion\", function (d) { return d[\"Subregion\"]; }],\n      [\"Megawatts/h\", function (d) { return commas(d[\"Megawatts\"]); }]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Subregion\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Megawatts\",\n  yConfig: {\n    title: \"Megawatts/h\",\n    tickFormat: function (d) { return abbreviate(d); }\n  }\n};",
          "section_id": 65,
          "allowed": "always",
          "logic_simple": {
            "data": [
              "<tesseract>/data.jsonrecords?cube=sama_electricity_consumption_subregion&drilldowns=Consumption+Type,Subregion,Year&measures=Megawatts"
            ],
            "type": "BarChart",
            "groupBy": ["Consumption Type ID"],
            "x": "Subregion",
            "y": "Megawatts",
            "xConfig.title": "Subregion",
            "yConfig.title": "Megawatts"
          },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 83,
          "section_id": 65,
          "allowed": "always",
          "ordering": 0,
          "description": "<p>Electricity consumption in the Kingdom during 2021 was 301,563,664 Megawatts/h, with residential consumption (142,478,934 Megawatts/h) standing out, followed by industrial consumption (58,704,319 Megawatts/h) and commercial consumption (45,521,087 Megawatts/h). You can check the consumption by zones in the graph.</p>"
        },
        {
          "id": 84,
          "section_id": 65,
          "allowed": "always",
          "ordering": 1,
          "description": "<p>The visualization shows the electricity consumption (in Megawatts/h) by zone and type of consumption.</p>"
        }
      ],
      "stats": [],
      "title": "<p>Electricity Consumption</p>",
      "short": ""
    },
    {
      "id": 66,
      "slug": "water",
      "profile_id": 1,
      "type": "SubGrouping",
      "ordering": 46,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [],
      "descriptions": [],
      "stats": [],
      "title": "<p>Water</p>",
      "short": ""
    },
    {
      "id": 67,
      "slug": "water_consumption",
      "profile_id": 1,
      "type": "TextViz",
      "ordering": 47,
      "allowed": "always",
      "position": "default",
      "icon": "",
      "selectors": [],
      "subtitles": [],
      "visualizations": [
        {
          "id": 49,
          "logic": "var abbreviate = formatters.abbreviate;\n\nvar selector = \"totalPopulationOption\" //totalPopulationOption, densityPopulationOption\nvar selectorName = \"Total Population\"\n\nvar measure = selector === \"totalPopulationOption\" ? \"Population\" : \"Population Density\"\n \nvar dataURL = (variables.tesseract) + \"/data.jsonrecords?cube=sama_water_consumption_region&drilldowns=Province%2CYear&measures=Thousand+cubic+meters\"\n\nreturn {\n  data: dataURL,\n  dataFormat: function (resp) {\n    var data = resp.data;\n    data.forEach(function (d) {\n      d[\"Thousand cubic meters\"] = d[\"Thousand cubic meters\"] \n    });\n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: function (d) { return String(d[\"Province\"]); },\n  colorScale: \"Thousand cubic meters\",\n  colorScaleConfig: {\n    scale: \"linear\",\n  //  color: formatters.colorScaleGrowth(\"sequential_neg\"),\n    axisConfig: {\n      tickFormat: function (d) { return (\"\" + (formatters.abbreviate(d))); } ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", function (d) { return d[\"Year\"]; }],\n     [\"Thousand Cubic Meters\", function (d) { return formatters.commas(d[\"Thousand cubic meters\"]); }]\n    ]\n  },\n  title: \"Water Consumption by Administrative Region (thousand cubic meters)\",\n  type: \"Geomap\",\n  topojson: \"/topojson/SA_regions.json\",\n  //\"topojsonFill\": \"#bbbbc2\",\n  topojsonId: function (d) { return d.properties.id; },\n}",
          "section_id": 67,
          "allowed": "isArabia",
          "logic_simple": { "type": "Treemap", "data": [""] },
          "simple": false,
          "ordering": 0
        }
      ],
      "descriptions": [
        {
          "id": 85,
          "section_id": 67,
          "allowed": "isArabia",
          "ordering": 0,
          "description": "<p>In 2022, the water consumption in Saudi Arabia was 3,556,976 thousand cubic meters. The administrative regions with the highest water consumption were Al-Riyadh (1,126,030 thousand cubic meters), Makkah Al-Mokarramah (831,766 thousand cubic meters), and Eastern Region (657,082 thousand cubic meters).</p>"
        },
        {
          "id": 86,
          "section_id": 67,
          "allowed": "isArabia",
          "ordering": 1,
          "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the water consumption (thousand cubic meters).</p>"
        }
      ],
      "stats": [],
      "title": "<p>Water Consumption</p>",
      "short": ""
    }
  ],
  "title": "<p>New Profile</p>",
  "subtitle": "",
  "label": "<p>Geography</p>",
  "variables": {
    "id": "sau",
    "dimension": "Geography Province",
    "hierarchy": "Nation",
    "slug": "saudi-arabia",
    "cubeName": "gastat_education_training_survey",
    "name": "Saudi Arabia",
    "id1": "sau",
    "dimension1": "Geography Province",
    "hierarchy1": "Nation",
    "slug1": "saudi-arabia",
    "cubeName1": "gastat_education_training_survey",
    "name1": "Saudi Arabia",
    "user": false,
    "showWhenPrinting": true,
    "tesseract": "https://api.datasaudi.datawheel.us/tesseract",
    "lastQuarterGDP": 20223,
    "lastQuarterGDPid": "2022-Q3",
    "quarterGDP": 1066281000000,
    "topActivityGDP": "Mining & Quarrying",
    "topActivityGDPvalue": 369229000000,
    "lastQuarterEmploymentByGender": 20223,
    "averageEmploymentRate": 57.325,
    "employmentRateFemale_saudi": 37,
    "employmentRateFemale_nonSaudi": 31.9,
    "employmentRateMale_saudi": 67.4,
    "employmentRateMale_nonSaudi": 93,
    "lastYearPopulation": 2021,
    "totalPopulation": 34110821,
    "populationTotalWomen": 14747165,
    "topPopulationWomenAge": "5 - 9",
    "topPopulationWomenValue": 1452198,
    "topPopulationWomenShare": 9.847302854480844,
    "populationTotalMen": 19363656,
    "topPopulationMenAge": "35 - 39",
    "topPopulationMenValue": 2218109,
    "topPopulationMenShare": 11.455011388345259,
    "populationShareWomen": "43.2%",
    "populationShareMen": "56.8%",
    "lastQuarterUnemploymentByAge": 20222,
    "unemploymentYouthFemale_saudi": 30.5,
    "unemploymentYouthFemale_nonSaudi": 23.9,
    "unemploymentYouthMale_saudi": 11.7,
    "unemploymentYouthMale_nonSaudi": 11.8,
    "lastYearIlliteracy": 2017,
    "topIlliteracyRate": "Female from Jazan (18.1%)",
    "lastIlliteracyRate": "Male from Aseer (2.2%)",
    "lastYearExpenditureEducation": 2017,
    "topRegion": "Al-Riyadh",
    "totalExpenditureEducation": 6261400000,
    "expendituresTopRegion": [
      "tuition fees (3.2B SAR)",
      "other (1.3B SAR)",
      "school supplies (1.1B SAR)",
      "school transfer (409M SAR)",
      "private tuition (260M SAR)"
    ],
    "lastMonthCPI": 202210,
    "generalCPI": "108.1",
    "firstCommodityCPI": "food and beverages (123.7)",
    "lastCommodityCPI": "housing, water, electricity, gas, and other fuels (91.8)",
    "lastYearStudents": 2021,
    "total_students": 11878628,
    "topRegion_students": [
      "Najran (6,077,502)",
      "Al-Riyadh (1,411,167)",
      "Makkah Al-Mokarramah (1,371,412)"
    ],
    "total_schools": 54910,
    "topRegion_schools": [
      "Najran (28,056)",
      "Al-Riyadh (6,078)",
      "Makkah Al-Mokarramah (5,310)"
    ],
    "total_teachers": 952164,
    "topRegion_teachers": [
      "Najran (485,757)",
      "Al-Riyadh (107,442)",
      "Makkah Al-Mokarramah (103,348)"
    ],
    "total_avgStudentSchool": 216.32904753232563,
    "topRegion_avgStudentSchool": [
      "Eastern Region (294)",
      "Makkah Al-Mokarramah (258)",
      "Al-Riyadh (232)"
    ],
    "total_avgTeacherSchool": 17.340448005827717,
    "topRegion_avgTeacherSchool": [
      "Eastern Region (20)",
      "Makkah Al-Mokarramah (19.5)",
      "Al-Madinah Al-Monawarah (18.3)"
    ],
    "word_schools": "number of",
    "word_teachers": "number of",
    "word_students": "number of",
    "word_avgStudentSchool": "",
    "word_avgStudentTeacher": "",
    "word_avgTeacherSchool": "",
    "gender_schools": "",
    "gender_teachers": "by gender",
    "gender_students": "by gender",
    "gender_avgStudentSchool": "",
    "gender_avgStudentTeacher": "",
    "gender_avgTeacherSchool": "",
    "commodityHighestVar": "education",
    "prevMonthCPI": 202109,
    "commodityHighestCurrValue": "102.6",
    "commodityHighestPrevValue": "100.7",
    "lastYearEstablishments": 2018,
    "establishmentValue1": 837599,
    "establishmentValue2": 137417,
    "establishmentValue3": 31650,
    "totalEstablishments": 1006666,
    "establishmentPct1": "83.2%",
    "establishmentPct2": "13.7%",
    "establishmentPct3": "3.14%",
    "lastYearDestination": 2021,
    "total_exportOil": 2272.98,
    "destinations_exportOil": [
      "Asia and Far East (77% of the exports)",
      "Western Europe (8.42% of the exports)",
      "North America (7.13% of the exports)",
      "Middle East (3.53% of the exports)",
      "Africa (2.84% of the exports)",
      "South America (1.11% of the exports)"
    ],
    "total_exportRefined": 490.34,
    "destinations_exportRefined": [
      "Africa (31.3% of the exports)",
      "Asia and Far East (26.6% of the exports)",
      "Western Europe (21% of the exports)",
      "Middle East (15.2% of the exports)",
      "North America (5.49% of the exports)",
      "South America (0.37% of the exports)",
      "Oceania (0.084% of the exports)"
    ],
    "lastYearPublicFinances": 2021,
    "oilRevenues": 562191000000,
    "nonOilRevenues": 403295000000,
    "currentExpenditures": 921715750000,
    "capitalExpenditures": 117217273437.5,
    "totalRevenuesPublicFinances": 965486000000,
    "totalExpensesPublicFinances": 1038933023437.5,
    "deficitSurplusAbs": 73447031250,
    "deficitSurplusWord": "deficit",
    "lastYearRevenues": 2017,
    "totalRevenues": 3158496239000,
    "totalExpenses": 1274545135000,
    "topActivityRevenue": "Mining and quarrying",
    "topActivityRevenueValue": 793028605000,
    "topActivityRevenuePct": 25.10779006819644,
    "topActivityExpenses": "Wholesale and retail trade repair of motor vehicles and motorcycles",
    "topActivityExpensesValue": 365609859000,
    "topActivityExpensesPct": 28.685516813808242,
    "lastYear_totalPopulationOption": 2020,
    "totalKingdom_totalPopulationOption": "35,013,414",
    "topRegion_totalPopulationOption": [
      "Makkah Al-Mokarramah (9,261,257 people)",
      "Al-Riyadh (8,872,712 people)",
      "Eastern Region (5,266,998 people)"
    ],
    "measure_totalPopulationOption": "people",
    "lastYear_densityPopulationOption": 2019,
    "totalKingdom_densityPopulationOption": "17.5",
    "topRegion_densityPopulationOption": [
      "Jazan (121 people per square kilometer)",
      "Makkah Al-Mokarramah (64.5 people per square kilometer)",
      "Al-Baha (44.9 people per square kilometer)"
    ],
    "measure_densityPopulationOption": "people per square kilometer",
    "populationDensityInTheRegion": false,
    "populationRegionWomen": 14781989,
    "populationRegionWomenPct": 42.21807390733163,
    "populationRegionMen": 20231425,
    "populationRegionMenPct": 57.78192609266837,
    "totalRegionPopulation": 35013414,
    "lastYearHealth": 2021,
    "totalHealthPersonnel": 383610,
    "totalHealthFacilities": 5047,
    "healthPersonnel": [
      "154,302 nursing staff",
      "103,254 assistant health personnel",
      "95,214 physicians",
      "30,840 pharmacists"
    ],
    "healthFacilities": [
      "3,045 private dispensaries",
      "1,626 health care centers",
      "376 hospitals"
    ],
    "lastYearAverageSalariesProfession": 2021,
    "topProfessionMen_saudi": "scientific, technical and human specialists (13.1k SAR)",
    "topProfessionMen_nonSaudi": "scientific, technical and human specialists (11.6k SAR)",
    "topProfessionWomen_saudi": "scientific, technical and human specialists (6.9k SAR)",
    "topProfessionWomen_nonSaudi": "scientific, technical and human specialists (9.83k SAR)",
    "totalExpenditureRegion": 21974900000,
    "expendituresInRegion": [
      "tuition fees (3.2B SAR)",
      "tuition fees (1.97B SAR)",
      "other (1.46B SAR)",
      "tuition fees (1.41B SAR)",
      "other (1.32B SAR)",
      "other (1.3B SAR)",
      "school supplies (1.1B SAR)",
      "school supplies (1.07B SAR)",
      "school supplies (674M SAR)",
      "school supplies (545M SAR)",
      "other (474M SAR)",
      "other (469M SAR)",
      "other (459M SAR)",
      "other (458M SAR)",
      "school supplies (439M SAR)",
      "school transfer (409M SAR)",
      "school transfer (393M SAR)",
      "school transfer (356M SAR)",
      "school supplies (283M SAR)",
      "tuition fees (280M SAR)",
      "private tuition (260M SAR)",
      "school supplies (245M SAR)",
      "tuition fees (245M SAR)",
      "other (206M SAR)",
      "school transfer (176M SAR)",
      "other (175M SAR)",
      "school transfer (174M SAR)",
      "tuition fees (160M SAR)",
      "tuition fees (157M SAR)",
      "private tuition (156M SAR)",
      "school supplies (144M SAR)",
      "other (142M SAR)",
      "school transfer (134M SAR)",
      "tuition fees (132M SAR)",
      "school supplies (128M SAR)",
      "private tuition (108M SAR)",
      "other (99.5M SAR)",
      "school supplies (94.7M SAR)",
      "school supplies (89.8M SAR)",
      "school transfer (77M SAR)",
      "other (75.8M SAR)",
      "school transfer (62M SAR)",
      "school supplies (60.3M SAR)",
      "private tuition (60M SAR)",
      "other (59.4M SAR)",
      "school supplies (58.4M SAR)",
      "tuition fees (43.6M SAR)",
      "tuition fees (39.5M SAR)",
      "tuition fees (37.2M SAR)",
      "private tuition (36.5M SAR)",
      "school transfer (35.7M SAR)",
      "private tuition (34.5M SAR)",
      "private tuition (30.7M SAR)",
      "tuition fees (27.7M SAR)",
      "school transfer (23.9M SAR)",
      "tuition fees (23.7M SAR)",
      "private tuition (22.8M SAR)",
      "private tuition (17M SAR)",
      "school transfer (16.9M SAR)",
      "school transfer (12.1M SAR)",
      "private tuition (11.8M SAR)",
      "school transfer (10.5M SAR)",
      "private tuition (8.8M SAR)",
      "private tuition (7M SAR)",
      "private tuition (2.6M SAR)"
    ],
    "topHousingTenureOwnedValue": 481698,
    "topHousingTenureOwnedPct": 13.082768887052893,
    "topHousingTenureRentedValue": 348055,
    "topHousingTenureRentedPct": 9.453066288386488,
    "topHousingTenureProvidedValue": 34422,
    "topHousingTenureProvidedPct": 0.9348908872989605,
    "topHousingTenureOtherValue": 1215,
    "topHousingTenureOtherPct": 0.03299902469549233,
    "lastYearHousingType": 2019,
    "topHousingType": "Apartment",
    "topHousingTypeValue": 576285,
    "topHousingTypePct": 15.651722589828642,
    "housingTypelist": [
      "395,560 were a villa (10.7% of the total)",
      "288,360 were a apartment (7.83% of the total)",
      "253,116 were a apartment (6.87% of the total)",
      "183,876 were a traditional house (4.99% of the total)"
    ],
    "lastQuarterUnemploymentByEducation": 20222,
    "topEducationMen_saudi": "intermediate education (general or vocational) (6.7%)",
    "topEducationMen_nonSaudi": "secondary education (general or vocational) (2.6%)",
    "topEducationWomen_saudi": "graduate or equivalent (24.7%)",
    "topEducationWomen_nonSaudi": "short-cycle tertiary education (30.7%)",
    "illiteracyRateWomen": 5.3,
    "illiteracyRateMen": 2.5,
    "lastYearJobSeekers": 2021,
    "totalJobSeekers": 87032,
    "topRegionJobSeekers": [
      "Makkah Al-Mokarramah (19,091 job seekers)",
      "Al-Riyadh (16,172 job seekers)",
      "Eastern Region (10,881 job seekers)"
    ],
    "total_avgStudentTeacher": 12.475401296415324,
    "topRegion_avgStudentTeacher": [
      "Eastern Region (14.7)",
      "Jazan (13.4)",
      "Makkah Al-Mokarramah (13.3)"
    ],
    "jobSeekersInRegion": 16172,
    "wordJobSeekers": "less",
    "growthJobSeekersAbs": 37.900314875969585,
    "totalRegion_students": "1,411,167",
    "totalRegion_schools": "6,078",
    "totalRegion_teachers": "107,442",
    "totalRegion_avgStudentSchool": "232",
    "totalRegion_avgStudentTeacher": "13.1",
    "totalRegion_avgTeacherSchool": "17.7",
    "lastQuarterUnemploymentID": "2022-Q2",
    "lastQuarterUnemployment": 20222,
    "averageUnemploymentRate": 7.875,
    "unemploymentRateFemale_saudi": 19.3,
    "unemploymentRateFemale_nonSaudi": 6.2,
    "unemploymentRateMale_saudi": 4.7,
    "unemploymentRateMale_nonSaudi": 1.3,
    "lastMontIPI": 202211,
    "monthIPI": "November 2022",
    "manufacturingIPI": 19.667,
    "electricityIPI": 10.905,
    "miningIPI": 5.665,
    "generalIPI": 8.554,
    "electricityWordIPI": "decreased",
    "manufacturingWordIPI": "grew",
    "miningWordIPI": "grew",
    "generalWordIPI": "grew",
    "monthTradeBalance": "October 2022",
    "merchandiseExports": 120702469455,
    "merchandiseImports": 63890170679.45,
    "tradeBalance": 56812298775.55,
    "growthExports": -3.5884970140390626,
    "growthImports": 4.514352394781798,
    "growthExportsAbs": 3.5884970140390626,
    "growthImportsAbs": 4.514352394781798,
    "topCountry_exports": [
      "China (22.2B SAR)",
      "South Korea (12.4B SAR)",
      "Japan (12.4B SAR)"
    ],
    "topCountry_imports": [
      "China (13.2B SAR)",
      "United States (5.97B SAR)",
      "United Arab Emirates (4.02B SAR)"
    ],
    "word_exports": "destination",
    "word_imports": "origin",
    "destination_exports": "export destinations",
    "destination_imports": "import origins",
    "monthForeignTrade": "October 2022",
    "total_imports": 63890170680,
    "total_exports": 120702469455.00002,
    "topProducts_exports": [
      "Mineral Fuels, Oils And Waxes (95.8B SAR)",
      "Plastics And Articles Thereof (6.25B SAR)",
      "Organic Chemicals (6.16B SAR)"
    ],
    "topProducts_imports": [
      "Vehicles Other Than Railway Or Tramway; Parts Thereof (7.72B SAR)",
      "Boilers, Machinery, Mechanical Goods; Parts Thereof (6.9B SAR)",
      "Electrical Machinery And Equipment And Parts Thereof (5.57B SAR)"
    ],
    "lastYear_newStudents": 2020,
    "topValue_newStudents": "221,016",
    "topName_newStudents": "Bachelor degree",
    "list_newStudents": [
      "28,714 in Intermediate Diploma",
      "13,546 in Master",
      "2,214 in Ph.D.",
      "1,933 in Higher Diploma",
      "93 in Fellowship"
    ],
    "lastYear_enrolledStudents": 2020,
    "topValue_enrolledStudents": "1,172,149",
    "topName_enrolledStudents": "Bachelor degree",
    "list_enrolledStudents": [
      "68,395 in Intermediate Diploma",
      "41,348 in Master",
      "10,284 in Ph.D.",
      "3,467 in Higher Diploma",
      "1,783 in Fellowship"
    ],
    "lastYear_graduates": 2019,
    "topValue_graduates": "200,563",
    "topName_graduates": "Bachelor degree",
    "list_graduates": [
      "10,952 in Intermediate Diploma",
      "5,097 in Master",
      "2,375 in Higher Diploma",
      "799 in Ph.D.",
      "11 in Fellowship"
    ],
    "productionCrudeOil": 3330.52,
    "lastYearPoductionOil": 2021,
    "changeProductionOil": 1.23,
    "higherLowerCrudeOilProduction": "lower",
    "lastYearRefinedProduction": 2021,
    "totalRefinedProduction": 929850,
    "topRefinedProduction": [
      "diesel (43.8% of the total production)",
      "gasoline (21.4% of the total production)",
      "fuel oil (16.6% of the total production)"
    ],
    "lastYearWaterConsumptionRegion": 2022,
    "totalWaterConsumptionRegion": 3556976,
    "waterWord": "lower",
    "growthWaterConsumption": 1.7197366170638568,
    "lastYearOilPrices": 2021,
    "word_realOil": "real price",
    "word_nominalOil": "nominal price",
    "arabianLight_nominalOil": 70.65,
    "northSea_nominalOil": 70.8,
    "opecBasket_nominalOil": 69.89,
    "arabianVsNorthSeaWord_nominalOil": "lower",
    "arabianVsOpecBasketWord_nominalOil": "higher",
    "arabianVsNorthSea_nominalOil": 0.21186440677964902,
    "arabianVsOpecBasket_nominalOil": 1.0874230934325442,
    "arabianLight_realOil": 55.5,
    "northSea_realOil": 55.7,
    "opecBasket_realOil": 54.9,
    "arabianVsNorthSea_realOil": 0.3590664272890536,
    "arabianVsOpecBasket_realOil": 1.0928961748633905,
    "arabianVsNorthSeaWord_realOil": "lower",
    "arabianVsOpecBasketWord_realOil": "higher",
    "lastYearHumanitarian": 2022,
    "topCountriesHumanitarian": [
      "Republic Of Yemen ($485M)",
      "Afghanistan ($36.2M)",
      "Sudan ($35.8M)"
    ],
    "lastYearElectricity": 2021,
    "totalElectricityConsumption": 301563664,
    "top1ElectricityConsumption": "residential consumption (142,478,934 Megawatts/h)",
    "top2ElectricityConsumption": "industrial consumption (58,704,319 Megawatts/h)",
    "top3ElectricityConsumption": "commercial consumption (45,521,087 Megawatts/h)",
    "lastYearWaterConsumption": 2022,
    "totalWaterConsumption": 3556976,
    "topRegionWaterConsumption": [
      "Al-Riyadh (1,126,030 thousand cubic meters)",
      "Makkah Al-Mokarramah (831,766 thousand cubic meters)",
      "Eastern Region (657,082 thousand cubic meters)"
    ],
    "topOrganizationHumanitarian": [
      " Other Multilateral Organizations ($304M)",
      " UN Agencies ($155M)",
      " National NGOs/CSOs ($89.4M)"
    ],
    "topSectorHumanitarian": [
      "Health ($234M)",
      "Logistics ($173M)",
      "Food Security ($152M)"
    ],
    "yearOption": "Annual",
    "quarterOption": "Quarterly",
    "totalOption": "Total",
    "byActivity": "By Economic Activity",
    "saudi": "Saudi",
    "nonSaudi": "Non Saudi",
    "totalPopulationOption": "Total Population",
    "densityPopulationOption": "Population Density",
    "housingType": "Type of Housing",
    "housingTenure": "Tenure of Housing",
    "shareOption": "Share",
    "allOption": "All",
    "healthPersonnelOption": "Health personnel",
    "healthFacilitiesOption": "Health Facilities",
    "students": "Students",
    "schools": "Schools",
    "teachers": "Teachers",
    "avgStudentSchool": "Average Number of Students per School",
    "avgStudentTeacher": "Average Number of Students per Teacher",
    "avgTeacherSchool": "Average Number of Teachers per School",
    "imports": "Imports",
    "exports": "Exports",
    "newStudents": "New Students",
    "enrolledStudents": "Enrolled Students",
    "graduates": "Graduates",
    "realOil": "Real Oil Price",
    "nominalOil": "Nominal Oil Price",
    "productionOil": "Crude Oil",
    "productionRefined": "Refined Products",
    "exportOil": "Crude Oil",
    "exportRefined": "Refined Products",
    "shareTopActivityGDP": 34.62773884182499,
    "hidden": false,
    "isArabia": true,
    "isRegion": false,
    "isRegionTotal_totalPopulationOption": false,
    "isRegionTotal_densityPopulationOption": false,
    "isRegionDensity_totalPopulationOption": false,
    "isRegionDensity_densityPopulationOption": false,
    "personnel_healthPersonnelOption": true,
    "personnel_healthFacilitiesOption": false,
    "facilities_healthPersonnelOption": false,
    "facilities_healthFacilitiesOption": true,
    "type_housingType": true,
    "type_housingTenure": false,
    "tenure_housingType": false,
    "tenure_housingTenure": true,
    "countryForeignTrade": false,
    "productForeignTrade": false,
    "energyOil_productionOil": true,
    "energyOil_productionRefined": false,
    "energyRefined_productionOil": false,
    "energyRefined_productionRefined": true,
    "_rawProfile": {
      "id": 1,
      "ordering": 0,
      "visible": true,
      "meta": [
        {
          "id": 1,
          "profile_id": 1,
          "slug": "geo",
          "dimension": "Geography Province",
          "levels": ["Nation", "Province"],
          "measure": "Expenditure",
          "ordering": 0,
          "cubeName": "gastat_education_training_survey",
          "visible": true
        }
      ],
      "content": [
        {
          "id": 1,
          "locale": "en",
          "title": "<p>New Profile</p>",
          "subtitle": "",
          "label": "<p>Geography</p>"
        }
      ],
      "sections": [
        {
          "id": 3,
          "slug": "gross_domestic_product",
          "profile_id": 1,
          "type": "Default",
          "ordering": 4,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 1,
              "options": [
                { "option": "quarterOption", "allowed": "always" },
                { "option": "yearOption", "allowed": "always" }
              ],
              "default": "quarterOption",
              "profile_id": 1,
              "title": "Temporality",
              "name": "gdpTime",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 2,
                "section_id": 3,
                "selector_id": 1,
                "ordering": 0
              }
            },
            {
              "id": 2,
              "options": [
                { "option": "totalOption", "allowed": "always" },
                { "option": "byActivity", "allowed": "always" }
              ],
              "default": "totalOption",
              "profile_id": 1,
              "title": "Data Grouping",
              "name": "activityGDP",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 3,
                "section_id": 3,
                "selector_id": 2,
                "ordering": 1
              }
            }
          ],
          "content": [
            {
              "id": 3,
              "locale": "en",
              "title": "<p>Gross Domestic Product (GDP)</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 1,
              "logic": "const {tesseract} = variables;\n\nconst timeSelector = \"[[gdpTime]]\"; // yearOption, quarterOption\nconst timeSelectorName = \"{{[[gdpTime]]}}\";\nconst time = timeSelector === \"yearOption\" ? \"Year\" : \"Quarter\";\nconst timeId = timeSelector === \"yearOption\" ? \"Year\" : \"Quarter ID\";\n\nconst activities = \"[[activityGDP]]\"; //totalOption, byActivity\nconst activityQuery = activities === \"totalOption\" ?  \"\" : \"Economic Activity Section,\";\n\nreturn {\n  data: `${tesseract}/data.jsonrecords?cube=gastat_gdp&drilldowns=${activityQuery}${time}&measures=GDP`,\n  dataFormat: resp => {\n    const data = resp.data.map(d => Object.assign({}, ...d));\n\n    data.forEach(d => {\n      d.Nation = \"Saudi Arabia\";\n      d.GDP = d.GDP * 1000000;\n    });\n    \n    return data;\n  },\n  groupBy: activities === \"totalOption\" ? \"Nation\" : \"Economic Activity Section\",\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f.Nation === d.Nation);\n        const maxX = Math.max(...dataArray.map(f => f[timeId]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[timeId] === maxX);\n        \n        return `${formatters.sar(maxData.GDP)}`;\n      },\n    }\n  },\n  title: activities === \"totalOption\" ? `Evolution of the Gross Domestic Product<br /> (${timeSelectorName})`\n                                      : `Evolution of the Gross Domestic Product by Economic Activity <br /> (${timeSelectorName})`,\n  time: time,\n  type: activities === \"totalOption\" ? \"LinePlot\" : \"StackedArea\",\n  tooltip: true,\n  tooltipConfig: {\n    tbody: [\n      [time, d => d[time]],\n      [\"GDP\", d => formatters.sar(d[\"GDP\"])]\n    ]\n  },\n  x: time,\n  xConfig: {\n    title: false\n  },\n  y: \"GDP\",\n  yConfig: {\n    title: false,\n    tickFormat: d => formatters.sar(d)\n  }\n};",
              "section_id": 3,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "https://api.datasaudi.datawheel.us/tesseract/data.jsonrecords?cube=gastat_gdp&drilldowns=Quarter&measures=GDP"
                ],
                "type": "LinePlot",
                "groupBy": ["Quarter ID"],
                "x": "Quarter",
                "y": "GDP",
                "xConfig.title": "Quarter",
                "yConfig.title": "GDP"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 1,
              "section_id": 3,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 1,
                  "locale": "en",
                  "description": "<p>This graph shows the lowerCaseFirst{{[[gdpTime]]}} evolution of the Gross Domestic Product (GDP) at purchaser's prices in Saudi Arabia.</p>"
                }
              ]
            },
            {
              "id": 2,
              "section_id": 3,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 2,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterGDP}}, the Gross Domestic Product (GDP) in Saudi Arabia was sar{{quarterGDP}} (at purchaser's prices). The economic activity with the highest GDP registered in that period was {{topActivityGDP}} (sar{{topActivityGDPvalue}}, growthPct{{shareTopActivityGDP}} of the total GDP)</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 39,
          "slug": "population",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 26,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 4,
              "options": [
                { "option": "totalPopulationOption", "allowed": "always" },
                { "option": "densityPopulationOption", "allowed": "always" }
              ],
              "default": "totalPopulationOption",
              "profile_id": 1,
              "title": "",
              "name": "populationDensity",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 6,
                "section_id": 39,
                "selector_id": 4,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 39,
              "locale": "en",
              "title": "<p>Population</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 25,
              "logic": "const {abbreviate} = formatters;\nconst {name, id} = variables;\n\nconst selector = \"[[populationDensity]]\" //totalPopulationOption, densityPopulationOption\nconst selectorName = \"{{[[populationDensity]]}}\"\n\nconst measure = selector === \"totalPopulationOption\" ? \"Population\" : \"Population Density\"\n \nconst dataDensity =  `${variables.tesseract}/data.jsonrecords?Province=${id},${id}:neighbors&cube=gastat_population_density_region&drilldowns=Province,Year&measures=Population+Density`\nconst dataPopulation = `${variables.tesseract}/data.jsonrecords?Province=${id}&cube=sama_population_province_sex&drilldowns=Province,Sex,Year&measures=Population`\n\nconst data = selector === \"totalPopulationOption\" ? dataPopulation : dataDensity\n\nif(selector === \"totalPopulationOption\"){\n  return {\n    data: dataPopulation,\n    groupBy: [\"Sex ID\"],\n    label: d => String(d[\"Sex\"]),\n    lineLabels: true,\n    shapeConfig: {\n      Line: {\n        label(d) {\n          const dataArray = this._filteredData\n            \t.filter(f => f[\"Sex ID\"] === d[\"Sex ID\"]);\n          const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n          const maxData = dataArray\n          \t.find(f => f[\"Year\"] === maxX);\n          \n          return `${formatters.commas(maxData[\"Population\"])}`;\n        },\n      }\n    },\n    title: `Evolution of Population in ${name} by Gender`,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n        [\"Population\", d => formatters.commas(d[\"Population\"])]\n      ]\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Population\",\n    yConfig: {\n      tickFormat: d => formatters.abbreviate(d),\n      title: \"\"\n    }\n  }\n}\n\nelse{\n  return {\n    data: dataDensity,\n    groupBy: [\"Province ID\"],\n    label: d => String(d[\"Province\"]),\n    legend: false,\n    lineLabels: true,\n    shapeConfig: {\n      Line: {\n        stroke: d => d[`Province ID`]*1 === id*1 ? \"#38af9a\" : \"#959ba4\",\n        strokeWidth: d => d[`Province ID`]*1 === id*1 ? 5 : false,\n        label(d) {\n          const dataArray = this._filteredData\n            \t.filter(f => f[\"Province ID\"] === d[\"Province ID\"]);\n          const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n          const maxData = dataArray\n          \t.find(f => f[\"Year\"] === maxX);\n          if(d[\"Province ID\"]*1 === id*1){\n            return `${formatters.commas(maxData[\"Population Density\"])}`;\n          }\n          else{\n            return \"\"\n          }\n        },\n      }\n    },\n    title: `Evolution of Population Density in ${name}`,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n        [\"Population Density\", d => formatters.abbreviate(d[\"Population Density\"])]\n      ]\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Population Density\",\n    yConfig: {\n      tickFormat: d => formatters.abbreviate(d),\n      title: \"\"\n    }\n  }\n}",
              "section_id": 39,
              "allowed": "isRegion",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Province=1&cube=gastat_population_density_region&drilldowns=Province,Year&measures=Population+Density"
                ],
                "type": "LinePlot",
                "groupBy": ["Province ID"],
                "x": "Year",
                "y": "Population Density",
                "xConfig.title": "",
                "yConfig.title": "Population Density",
                "formatters": { "y": "abbreviate" }
              },
              "simple": false,
              "ordering": 1
            },
            {
              "id": 24,
              "logic": "const {abbreviate} = formatters;\n\nconst selector = \"[[populationDensity]]\" //totalPopulationOption, densityPopulationOption\nconst selectorName = \"{{[[populationDensity]]}}\"\n\nconst measure = selector === \"totalPopulationOption\" ? \"Population\" : \"Population Density\"\n \nconst dataDensity = `${variables.tesseract}/data.jsonrecords?cube=gastat_population_density_region&drilldowns=Year,Province&measures=Population+Density`;\nconst dataPopulation = `${variables.tesseract}/data.jsonrecords?cube=sama_population_province_sex&drilldowns=Year,Province&measures=Population`\n\nconst dataURL = selector === \"totalPopulationOption\" ? dataPopulation : dataDensity\n \nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n    \n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: d => String(d[\"Province\"]),\n  colorScale: measure,\n  colorScaleConfig: {\n    scale: \"jenks\",\n  //  color: formatters.colorScaleGrowth(\"sequential_neg\"),\n    axisConfig: {\n      tickFormat: d => `${formatters.abbreviate(d)}` ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", d => d[\"Year\"]],\n     [`${selectorName}`,  d => abbreviate(d[measure])]\n    ]\n  },\n  title: `${selectorName} by Administrative Region`,\n  type: \"Geomap\",\n  topojson: `/topojson/SA_regions.json`,\n  topojsonId: d => d.properties.id,\n}",
              "section_id": 39,
              "allowed": "isArabia",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 39,
              "section_id": 39,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 39,
                  "locale": "en",
                  "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the lowercase{{[[populationDensity]]}} of each region.</p>"
                }
              ]
            },
            {
              "id": 41,
              "section_id": 39,
              "allowed": "isRegionTotal_[[populationDensity]]",
              "ordering": 3,
              "content": [
                {
                  "id": 41,
                  "locale": "en",
                  "description": "<p>The visualization shows the annual evolution of the population in {{name}} by gender.</p>"
                }
              ]
            },
            {
              "id": 42,
              "section_id": 39,
              "allowed": "isRegionDensity_[[populationDensity]]",
              "ordering": 4,
              "content": [
                {
                  "id": 42,
                  "locale": "en",
                  "description": "<p>In {{lastYear_densityPopulationOption}} the population density of {{name}} was abbreviate{{populationDensityInTheRegion}} people per &nbsp;square kilometer.</p>"
                }
              ]
            },
            {
              "id": 43,
              "section_id": 39,
              "allowed": "isRegionDensity_[[populationDensity]]",
              "ordering": 5,
              "content": [
                {
                  "id": 43,
                  "locale": "en",
                  "description": "<p>The visualization shows the annual evolution of the population density in {{name}} and in other nearby administrative regions for comparison.</p>"
                }
              ]
            },
            {
              "id": 40,
              "section_id": 39,
              "allowed": "isRegionTotal_[[populationDensity]]",
              "ordering": 2,
              "content": [
                {
                  "id": 40,
                  "locale": "en",
                  "description": "<p>In {{lastYear_totalPopulationOption}} the population of {{name}} was commas{{totalRegionPopulation}} people. Differentiating by gender, the female population was commas{{populationRegionWomen}} people (abbreviate{{populationRegionWomenPct}}% of the total population), while the male population was commas{{populationRegionMen}} people (abbreviate{{populationRegionMenPct}}% of the total population).</p>"
                }
              ]
            },
            {
              "id": 38,
              "section_id": 39,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 38,
                  "locale": "en",
                  "description": "<p>In {{lastYear_[[populationDensity]]}} the lowercase{{[[populationDensity]]}} of Saudi Arabia was {{totalKingdom_[[populationDensity]]}} {{measure_[[populationDensity]]}}. The regions that concentrated the largest population were list{{topRegion_[[populationDensity]]}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 40,
          "slug": "housing_units",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 28,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 5,
              "options": [
                { "option": "housingType", "allowed": "always" },
                { "option": "housingTenure", "allowed": "always" }
              ],
              "default": "housingType",
              "profile_id": 1,
              "title": "",
              "name": "housing",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 7,
                "section_id": 40,
                "selector_id": 5,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 40,
              "locale": "en",
              "title": "<p>Housing Units</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 29,
              "logic": "const selector = \"[[housing]]\" //housingType, housingTenure\nconst selectorName = \"{{[[housing]]}}\"\n\nconst drilldown = selector === \"housingType\" ? \"Housing Type\" : \"Tenure Type\"\n\nconst dataURL = `${variables.tesseract}/data.jsonrecords?${variables.hierarchy}=${variables.id}&cube=gastat_housing_type_tenure&drilldowns=Year,${drilldown}&measures=Housing+Units`\n\nreturn {\n  data: dataURL,\n  groupBy: [`${drilldown} ID`],\n  groupPadding: 50,\n  label: d => formatters.abbreviate(d[\"Housing Units\"]),\n  legendConfig: {\n    label: d => d[drilldown]\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    label: d => d[drilldown],\n    tbody: false,\n  },\n  title: `Housing Units (Occupied with Saudi Households) by ${selectorName}`,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Housing Units\", d => formatters.commas(d[\"Housing Units\"])]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Housing Units\",\n  yConfig: {\n    title: \"\"\n  }\n};",
              "section_id": 40,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=gastat_housing_tenure&drilldowns=Year%2CTenure+Type&measures=Housing+Units"
                ],
                "type": "BarChart",
                "groupBy": ["Tenure Type ID"],
                "x": "Year",
                "y": "Housing Units",
                "xConfig.title": "",
                "yConfig.title": "Housing Units",
                "title": "Housing Units (Occupied with Saudi Households) by"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 45,
              "section_id": 40,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 45,
                  "locale": "en",
                  "description": "<p>The visualization shows housing units (occupied with saudi households) by lowercase{{[[housing]]}} in different years in {{name}}.</p>"
                }
              ]
            },
            {
              "id": 44,
              "section_id": 40,
              "allowed": "type_[[housing]]",
              "ordering": 0,
              "content": [
                {
                  "id": 44,
                  "locale": "en",
                  "description": "<p>In {{lastYearHousingType}}, commas{{topHousingTypeValue}} housing units occupied by Saudi households were a lowercase{{topHousingType}} (abbreviate{{topHousingTypePct}}% of the total), list{{housingTypelist}}.</p>"
                }
              ]
            },
            {
              "id": 49,
              "section_id": 40,
              "allowed": "tenure_[[housing]]",
              "ordering": 1,
              "content": [
                {
                  "id": 49,
                  "locale": "en",
                  "description": "<p>In {{lastYearHousingType}}, commas{{topHousingTenureOwnedValue}} housing units occupied by Saudi households were owned homes (abbreviate{{topHousingTenureOwnedPct}}% of total), commas{{topHousingTenureProvidedValue}} were employer-provided homes (abbreviate{{topHousingTenureProvidedPct}}% of total), commas{{topHousingTenureRentedValue}} were rental properties (abbreviate{{topHousingTenureRentedPct}}% of total) and commas{{topHousingTenureOtherValue}} homes had other type of tenure (abbreviate{{topHousingTenureOtherPct}}%).</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 43,
          "slug": "economic_establishments",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 8,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 6,
              "options": [
                { "option": "totalOption", "allowed": "always" },
                { "option": "shareOption", "allowed": "always" }
              ],
              "default": "totalOption",
              "profile_id": 1,
              "title": "",
              "name": "totalShareOption",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 8,
                "section_id": 43,
                "selector_id": 6,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 43,
              "locale": "en",
              "title": "<p>Economic Establishments</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 32,
              "logic": "const {abbreviate, commas, growthPct} = formatters;\nconst {nest, sum} = libs.d3;\nconst selector = \"[[totalShareOption]]\" //totalOption, shareOption\nconst measure = selector === \"totalOption\" ? \"Economic Establishments\" : \"Percentage Value\"\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?cube=gastat_economic_establishments&drilldowns=Economic+Activity+Section,Size+Class,Year&measures=Economic+Establishments`,\n  \n  dataFormat: resp => {\n    \n    nest()\n      .key(d => `${d.Year}_${d[\"Economic Activity Section ID\"]}`)\n      .entries(resp.data)\n      .forEach(group => {\n        const total = sum(group.values, d => d[\"Economic Establishments\"]);\n        group.values\n          .forEach(d => {\n            d[\"Percentage Value\"] = (d[\"Economic Establishments\"] / total) * 100\n          });\n      });\n    return resp.data.filter(d => d[\"Economic Establishments\"]);\n  },\n  \n  discrete: \"y\",\n  groupBy: [\"Size Class ID\"],\n  height: 500,\n  label: d => \"\",\n  legendConfig: {\n    label: d => `${d[\"Size Class\"]} employees`\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Year\",\n  timeline:true,\n  tooltipConfig: {\n    title: d => `${d[\"Size Class\"]} employees`,\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Economic Activity Section\", d => d[\"Economic Activity Section\"]],\n      [\"Economic Establishments\", d => commas(d[\"Economic Establishments\"])],\n      [\"Share\", d => `${abbreviate(d[\"Percentage Value\"])}%`],\n    ]\n  },\n  type: \"BarChart\",\n  x: measure,\n  xConfig: {\n    tickFormat: selector === \"totalOption\" ? d => abbreviate(d) : d => `${abbreviate(d)}%`,\n    title: \"\",\n  },\n  y: \"Economic Activity Section\",\n  yConfig: {\n    title: \"\",\n  },\n  ySort: (b, a) => a[\"Economic Activity Section\"].localeCompare(b[\"Economic Activity Section\"])\n};",
              "section_id": 43,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=gastat_economic_establishments&drilldowns=Economic+Activity+Section%2CSize+Class%2CYear&measures=Economic+Establishments"
                ],
                "type": "BarChart",
                "groupBy": ["Size Class ID"],
                "x": "Economic Establishments",
                "y": "Economic Activity Section",
                "xConfig.title": "Economic Establishments",
                "yConfig.title": "Economic Activity Section",
                "formatters": { "x": "abbreviate" }
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 32,
              "section_id": 43,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 32,
                  "locale": "en",
                  "description": "<p>The visualization shows the number of economic establishments distributed by economic activity and size class.</p>"
                }
              ]
            },
            {
              "id": 31,
              "section_id": 43,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 31,
                  "locale": "en",
                  "description": "<p>In {{lastYearEstablishments}}, commas{{totalEstablishments}} economic establishments were registered in Saudi Arabia, of which {{establishmentPct1}} had less than 5 employees (commas{{establishmentValue1}} establishments), {{establishmentPct2}} with 5 to 19 employees (commas{{establishmentValue2}} establishments) and {{establishmentPct3}} with more than employees (commas{{establishmentValue3}} establishments).</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 56,
          "slug": "health_facilities_and_personnel",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 30,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 9,
              "options": [
                { "option": "healthPersonnelOption", "allowed": "always" },
                { "option": "healthFacilitiesOption", "allowed": "always" }
              ],
              "default": "healthPersonnelOption",
              "profile_id": 1,
              "title": "",
              "name": "healthOptions",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 11,
                "section_id": 56,
                "selector_id": 9,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 56,
              "locale": "en",
              "title": "<p>Health Facilities and Personnel</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 37,
              "logic": "const selector = \"[[healthOptions]]\" //healthPersonnelOption, healthFacilitiesOption\nconst selectorName = \"{{[[healthOptions]]}}\" \n\nconst categories = selector === \"healthPersonnelOption\" ? \"1,5,6,7\" : \"3,4,8\"\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?${variables.hierarchy}=${variables.id}&Resource+Category=${categories}&cube=sama_health_facilities_resources&drilldowns=Year%2CProvince%2CResource+Category&measures=Resources`,\n  groupBy: [\"Resource Category ID\"],\n  label: d => String(d[\"Resource Category\"]),\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Resource Category ID\"] === d[\"Resource Category ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Year\"] === maxX);\n        \n        return `${formatters.commas(maxData[\"Resources\"])}`;\n      },\n    }\n  },\n  title: `Evolution of ${formatters.lowercase(selectorName)}`,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Resources\", d => `${formatters.commas(d[\"Resources\"])}`]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Resources\",\n  yConfig: {\n    tickFormat: d => formatters.abbreviate(d),\n    title: \"\"\n  }\n};",
              "section_id": 56,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?<hierarchy>=<id>&Resource+Category=1%2C5%2C6%2C7&cube=sama_health_facilities_resources&drilldowns=Year%2CProvince%2CResource+Category&measures=Resources"
                ],
                "type": "LinePlot",
                "groupBy": ["Resource Category ID"],
                "x": "Year",
                "y": "Resources",
                "xConfig.title": "Year",
                "yConfig.title": "Resources",
                "formatters": { "y": "abbreviate" }
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 47,
              "section_id": 56,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 47,
                  "locale": "en",
                  "description": "<p>The visualization shows the annual evolution of the lowercase{{[[healthOptions]]}} in {{name}}.</p>"
                }
              ]
            },
            {
              "id": 46,
              "section_id": 56,
              "allowed": "personnel_[[healthOptions]]",
              "ordering": 0,
              "content": [
                {
                  "id": 46,
                  "locale": "en",
                  "description": "<p>In {{lastYearHealth}}, list{{healthPersonnel}} were registered in {{name}}. Among the four categories there are commas{{totalHealthPersonnel}} people in the health area.</p>"
                }
              ]
            },
            {
              "id": 48,
              "section_id": 56,
              "allowed": "facilities_[[healthOptions]]",
              "ordering": 1,
              "content": [
                {
                  "id": 48,
                  "locale": "en",
                  "description": "<p>In {{lastYearHealth}}, list{{healthFacilities}} were registered in {{name}}. Among them they total commas{{totalHealthFacilities}} health facilities.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 5,
          "slug": "labour_force",
          "profile_id": 1,
          "type": "Default",
          "ordering": 16,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 7,
              "options": [
                { "option": "totalOption", "allowed": "hidden" },
                { "option": "saudi", "allowed": "always" },
                { "option": "nonSaudi", "allowed": "always" }
              ],
              "default": "saudi",
              "profile_id": 1,
              "title": "Population",
              "name": "labourForceNationality",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 12,
                "section_id": 5,
                "selector_id": 7,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 5,
              "locale": "en",
              "title": "<p>Labour Force</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 35,
              "logic": "const {tesseract, hierarchy, id} = variables;\n\nconst selector = \"[[labourForceNationality]]\"//totalOption, saudi, nonSaudi\nconst selectorName = \"{{[[labourForceNationality]]}}\"\nconst optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nconst dataURL = `${tesseract}/data.jsonrecords?${optionSelected}${hierarchy}=${id}&cube=gastat_participation_rate_sex_nationality_region&drilldowns=Quarter,Sex&measures=Participation+Rate`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: d => d[\"Sex\"],\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Sex ID\"] === d[\"Sex ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Quarter ID\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Quarter ID\"] === maxX);\n        \n        return `${formatters.abbreviate(maxData[\"Participation Rate\"])}%`;\n      },\n    }\n  },\n  time: \"Quarter\",\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", d => d[\"Quarter\"]],\n      [\"Participation Rate\", d => `${formatters.abbreviate(d[\"Participation Rate\"])}%`]\n    ]\n  },\n  title: `Labour Force Participation Rate by Gender - ${selectorName} Population`,   \n  type: \"LinePlot\",\n  x: \"Quarter\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Participation Rate\",\n  yConfig: {\n    title: \"Participation Rate\",\n    tickFormat: d => `${formatters.abbreviate(d)}%`\n  }\n};",
              "section_id": 5,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?<hierarchy>=<id>&cube=gastat_participation_rate_sex_nationality_region&drilldowns=Quarter,Sex&measures=Participation+Rate"
                ],
                "type": "LinePlot",
                "groupBy": ["Sex ID"],
                "x": "Quarter",
                "y": "Participation Rate",
                "xConfig.title": "Quarter",
                "yConfig.title": "Participation Rate"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 7,
              "section_id": 5,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 7,
                  "locale": "en",
                  "description": "<p>The graph shows the quarterly evolution of the labour force participation by gender in {{name}} (lowercase{{[[labourForceNationality]]}} population).</p>"
                }
              ]
            },
            {
              "id": 9,
              "section_id": 5,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 9,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterEmploymentByGender}}, the {{[[labourForceNationality]]}} female labour force participation rate was abbreviate{{employmentRateFemale_[[labourForceNationality]]}}% and the {{[[labourForceNationality]]}} male labour force participation rate was abbreviate{{employmentRateMale_[[labourForceNationality]]}}%.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 44,
          "slug": "average_salaries",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 17,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 8,
              "options": [
                { "option": "saudi", "allowed": "always" },
                { "option": "nonSaudi", "allowed": "always" }
              ],
              "default": "saudi",
              "profile_id": 1,
              "title": "Population",
              "name": "averageSalariesButton",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 13,
                "section_id": 44,
                "selector_id": 8,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 44,
              "locale": "en",
              "title": "<p>Average Salaries</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 36,
              "logic": "const {tesseract} = variables;\nconst {sar} = formatters;\n\nconst selector = \"[[averageSalariesButton]]\"//totalOption, saudi, nonSaudi\nconst selectorName = \"{{[[averageSalariesButton]]}}\"\nconst optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?${optionSelected}cube=sama_salary_profession_nationality_sex&drilldowns=Profession%2CYear%2CSex&measures=Average+Salaries`,\n  groupBy: [\"Sex ID\"],\n  label: d => sar(d[\"Average Salaries\"]),\n  legendConfig: {\n    label: d => d[\"Sex\"]\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  time: \"Year\",\n  timeline: true,\n  title: `Average Salaries in the Private Sector by Main Profession - ${selectorName} Population`,  \n  tooltipConfig: {\n    title: d => d[\"Sex\"],\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Profession\", d => d[\"Profession\"]],\n      [\"Average Salaries\", d => formatters.sar(d[\"Average Salaries\"])]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Profession\",\n  xConfig: {\n    title: \"\"\n  },\n  xSort: (b, a) => a[\"Profession\"].localeCompare(b[\"Profession\"]),\n  y: \"Average Salaries\",\n  yConfig: {\n    title: \"\",\n    tickFormat: d => formatters.sar(d)\n  }\n};",
              "section_id": 44,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=sama_salary_profession_nationality_sex&drilldowns=Profession%2CYear%2CSex&measures=Average+Salaries"
                ],
                "type": "BarChart",
                "groupBy": ["Sex ID"],
                "x": "Profession",
                "y": "Average Salaries",
                "xConfig.title": "Profession",
                "yConfig.title": "Average Salaries"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 53,
              "section_id": 44,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 53,
                  "locale": "en",
                  "description": "<p>The visualization shows the average salary in the private sector for different professions grouped by gender.</p>"
                }
              ]
            },
            {
              "id": 52,
              "section_id": 44,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 52,
                  "locale": "en",
                  "description": "<p>In {{lastYearAverageSalariesProfession}}, the profession with the highest average salary in the private sector for {{[[averageSalariesButton]]}} women was {{topProfessionWomen_[[averageSalariesButton]]}}. For its part, the profession with the highest average salary in the private sector for {{[[averageSalariesButton]]}} men was {{topProfessionMen_[[averageSalariesButton]]}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 10,
          "slug": "unemployment_gender_age",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 19,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 10,
              "options": [
                { "option": "saudi", "allowed": "always" },
                { "option": "nonSaudi", "allowed": "always" }
              ],
              "default": "saudi",
              "profile_id": 1,
              "title": "Population",
              "name": "unemploymentNationality",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 16,
                "section_id": 10,
                "selector_id": 10,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 10,
              "locale": "en",
              "title": "<p>Unemployment</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 13,
              "logic": "const {tesseract, hierarchy, id} = variables;\n\nconst selector = \"[[unemploymentNationality]]\"//saudi, nonSaudi\nconst selectorName = \"{{[[unemploymentNationality]]}}\"\nconst optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nconst dataURL = `${tesseract}/data.jsonrecords?${optionSelected}${hierarchy}=${id}&cube=gastat_rate_gender_nationality_region&drilldowns=Quarter,Sex&measures=Unemployment+Rate`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: d => d[\"Sex\"],\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Sex ID\"] === d[\"Sex ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Quarter ID\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Quarter ID\"] === maxX);\n        \n        return `${formatters.abbreviate(maxData[\"Unemployment Rate\"])}%`;\n      },\n    }\n  },\n  time: \"Quarter\",\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", d => d[\"Quarter\"]],\n      [\"Participation Rate\", d => `${formatters.abbreviate(d[\"Unemployment Rate\"])}%`]\n    ]\n  },\n  title: `Unemployment Rate by Gender - ${selectorName} Population`,   \n  type: \"LinePlot\",\n  x: \"Quarter\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Unemployment Rate\",\n  yConfig: {\n    title: \"Unemployment Rate\",\n    tickFormat: d => `${formatters.abbreviate(d)}%`\n  }\n};",
              "section_id": 10,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Indicator+Quarter=3%2C4%2C5&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
                ],
                "type": "LinePlot",
                "groupBy": ["Indicator Quarter ID"],
                "x": "Quarter",
                "y": "Indicator",
                "xConfig.title": "Quarter",
                "yConfig.title": "Indicator"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 8,
              "section_id": 10,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 8,
                  "locale": "en",
                  "description": "<p>The graph shows the quarterly evolution of the unemployment rate by sex of the {{[[unemploymentNationality]]}} population in {{name}}.</p>"
                }
              ]
            },
            {
              "id": 10,
              "section_id": 10,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 10,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterUnemployment}}, the {{[[unemploymentNationality]]}} female unemployment rate was abbreviate{{unemploymentRateFemale_[[unemploymentNationality]]}}% and the {{[[unemploymentNationality]]}} male unemployment rate was abbreviate{{unemploymentRateMale_[[unemploymentNationality]]}}%.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 25,
          "slug": "unemployment_by_age",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 20,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 11,
              "options": [
                { "option": "saudi", "allowed": "always" },
                { "option": "nonSaudi", "allowed": "always" }
              ],
              "default": "saudi",
              "profile_id": 1,
              "title": "Population",
              "name": "unemploymentNationalityByAge",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 17,
                "section_id": 25,
                "selector_id": 11,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 25,
              "locale": "en",
              "title": "<p>Unemployment by Age</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 14,
              "logic": "const {abbreviate} = formatters;\n\nconst selector = \"[[unemploymentNationalityByAge]]\"//saudi, nonSaudi\nconst selectorName = \"{{[[unemploymentNationalityByAge]]}}\"\nconst optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nconst dataURL = `${variables.tesseract}/data.jsonrecords?${optionSelected}cube=gastat_rate_gender_nationality_age&drilldowns=Group+Name,Age+Groups,Quarter,Sex&measures=Unemployment+Rate&exclude=Age+Groups:6`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data.map(d => Object.assign({}, d));\n\n    data.forEach(d => {\n      d[\"Age Groups\"] = d[\"Age Groups ID\"] === 5 ? \"Aged 55 and over\" : d[\"Age Groups\"]\n      d[\"Age\"] = d[\"Age Groups ID\"] !== 5 ? d[\"Group Name\"] + \" (\" + d[\"Age Groups\"] + \")\" : d[\"Group Name\"]\n      delete d[\"Group Name\"]\n      delete d[\"Age Groups\"]\n    });\n    return data;\n  },\n  groupBy: [\"Sex ID\"],\n  label: d => `${abbreviate(d[\"Unemployment Rate\"])}%`,\n  legendConfig: {\n    label: d => d[\"Sex\"],\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  time: \"Quarter\",\n  timeline: true,\n  title: `Unemployment Rate by Age Range - ${selectorName} Population`,\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", d => d[\"Quarter\"]],\n      [\"Unemployment Rate\", d => `${abbreviate(d[\"Unemployment Rate\"])}%`],\n    ],\n    title: d => d[\"Sex\"]\n  },\n  type: \"BarChart\",\n  x: \"Age\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Unemployment Rate\",\n  yConfig: {\n    title: \"Unemployment Rate\",\n    tickFormat: d => `${abbreviate(d)}%`\n  }\n};",
              "section_id": 25,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Indicator+Quarter=30%2C31%2C32%2C33%2C34%2C35%2C36%2C37%2C38%2C39%2C40%2C41%2C42%2C43%2C44&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
                ],
                "type": "BarChart",
                "groupBy": ["Indicator Quarter ID"],
                "x": "Indicator Quarter",
                "y": "Indicator",
                "xConfig.title": "Indicator Quarter",
                "yConfig.title": "Indicator"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 12,
              "section_id": 25,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 12,
                  "locale": "en",
                  "description": "<p>Youth unemployment refers to the share of the labor force ages 15-24 without work but available for and seeking employment.</p>"
                }
              ]
            },
            {
              "id": 11,
              "section_id": 25,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 11,
                  "locale": "en",
                  "description": "<p>The graph shows the unemployment rate by sex and age groups in different quarters in Saudi Arabia ({{[[unemploymentNationalityByAge]]}} population).</p>"
                }
              ]
            },
            {
              "id": 14,
              "section_id": 25,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 14,
                  "locale": "en",
                  "description": "<p>In customQuarterText{{lastQuarterUnemploymentByAge}}, {{[[unemploymentNationalityByAge]]}} female youth unemployment rate was {{unemploymentYouthFemale_[[unemploymentNationalityByAge]]}}% and {{[[unemploymentNationalityByAge]]}} male youth unemployment rate was {{unemploymentYouthMale_[[unemploymentNationalityByAge]]}}%. You can review other age groups in the graph.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 19,
          "slug": "unemployment_by_educational_level",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 21,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 12,
              "options": [
                { "option": "saudi", "allowed": "always" },
                { "option": "nonSaudi", "allowed": "always" }
              ],
              "default": "saudi",
              "profile_id": 1,
              "title": "Population",
              "name": "unemploymentByEducation",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 18,
                "section_id": 19,
                "selector_id": 12,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 19,
              "locale": "en",
              "title": "<p>Unemployment by Educational Level</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 10,
              "logic": "const {abbreviate} = formatters\n\nconst selector = \"[[unemploymentByEducation]]\"//saudi, nonSaudi\nconst selectorName = \"{{[[unemploymentByEducation]]}}\"\nconst optionSelected = selector === \"saudi\" ? \"Nationality=1&\" : \"Nationality=2&\"\n\nconst educationLevel = {\n  \"No schooling\": 1,\n  \"Early childhood education\": 2,\n  \"Primary\": 3,\n  \"Intermediate education (general or vocational)\": 4,\n  \"Secondary education (general or vocational)\": 5,\n  \"Post-secondary non-tertiary education\": 6,\n  \"Short-cycle tertiary education\": 7,\n  \"Graduate or Equivalent\": 8,\n  \"Master's degree or equivalent\": 9,\n  \"Ph.D\": 10\n}\n\nconst dataURL =  `${variables.tesseract}/data.jsonrecords?${optionSelected}cube=gastat_rate_gender_nationality_education&drilldowns=Quarter,Educational+Level,Sex&measures=Unemployment+Rate&exclude=Educational+Level:13,4,1`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n    data.forEach(d => {\n      d[\"Educational Level ID\"] = educationLevel[d[\"Educational Level\"]]\n    })\n    return data\n  },\n  groupBy: [\"Sex ID\"],\n  discrete: \"y\",\n  label: d => `${abbreviate(d[\"Unemployment Rate\"])}%`,\n  legendConfig: {\n    label: d => d[\"Sex\"],\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  title: `Unemployment by Gender and Educational Level - ${selectorName} Population`,\n  time: \"Quarter\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n      [\"Quarter\", d => d[\"Quarter\"]],\n      [\"Unemployment Rate\", d => `${abbreviate(d[\"Unemployment Rate\"])}%`]\n    ],\n    title: d => d[\"Sex\"]\n  },\n  type: \"BarChart\",\n // height: 450,\n  //ySort: (a, b) => b[\"Education ID\"] - a[\"Education ID\"],\n  x: \"Unemployment Rate\",\n  xConfig: {\n    title: false,\n    tickFormat: d => `${abbreviate(d)}%`\n  },\n  y: \"Educational Level\",\n  yConfig: {\n    title: \"\",\n  },\n   ySort: (a, b) => a[\"Educational Level ID\"] - b[\"Educational Level ID\"],\n};",
              "section_id": 19,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 15,
              "section_id": 19,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 15,
                  "locale": "en",
                  "description": "<p>The graph shows the percentage of the labor force with different levels of education who are unemployed ({{[[unemploymentByEducation]]}} population).</p>"
                }
              ]
            },
            {
              "id": 16,
              "section_id": 19,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 16,
                  "locale": "en",
                  "description": "<p>In customQuarterText{{lastQuarterUnemploymentByEducation}}, the highest unemployment rate for {{[[unemploymentByEducation]]}} women was recorded for those with an education level of {{topEducationWomen_[[unemploymentByEducation]]}}. On the other hand, the highest unemployment rate in {{[[unemploymentByEducation]]}} men was registered in those who had an educational level of {{topEducationMen_[[unemploymentByEducation]]}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 57,
          "slug": "students_schools_and_teachers",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 32,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 13,
              "options": [
                { "option": "students", "allowed": "always" },
                { "option": "schools", "allowed": "always" },
                { "option": "teachers", "allowed": "always" },
                { "option": "avgStudentSchool", "allowed": "always" },
                { "option": "avgStudentTeacher", "allowed": "always" },
                { "option": "avgTeacherSchool", "allowed": "always" }
              ],
              "default": "students",
              "profile_id": 1,
              "title": "",
              "name": "studentsMetrics",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 19,
                "section_id": 57,
                "selector_id": 13,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 57,
              "locale": "en",
              "title": "<p>Students, Schools &amp; Teachers</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 43,
              "logic": "const {abbreviate, commas} = formatters;\n\nconst selector = \"[[studentsMetrics]]\" //students, schools, teachers, avgStudentSchool, avgStudentTeacher, avgTeacherSchool\nconst selectorName = \"{{[[studentsMetrics]]}}\"\n\nconst dataURLs = {\n  \"students\": `${variables.tesseract}/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n  \"schools\":  `${variables.tesseract}/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n  \"teachers\": `${variables.tesseract}/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n\n  \"avgStudentSchool\": [\n     `${variables.tesseract}/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n  \"avgStudentTeacher\": [\n    `${variables.tesseract}/data.jsonrecords?Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n  \"avgTeacherSchool\": [\n     `${variables.tesseract}/data.jsonrecords?Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n}\n\nconst measure1 = {\n  \"avgStudentSchool\": \"Students\",\n  \"avgStudentTeacher\": \"Students\",\n  \"avgTeacherSchool\": \"Teachers\"\n}\n\nconst measure2 = {\n  \"avgStudentSchool\": \"Schools\",\n  \"avgStudentTeacher\": \"Teachers\",\n  \"avgTeacherSchool\": \"Schools\"\n}\n\nconst formatter = selector === \"students\" || selector === \"schools\" || selector === \"teachers\" ? commas : abbreviate\n\nconst dataURL = dataURLs[selector]\n\n  return {\n    data: dataURL,\n    dataFormat: resp => {\n      if(selector === \"students\" || selector === \"schools\" || selector === \"teachers\"){\n        const {data} = resp;\n        return data;\n      }\n      else{\n        const [data1, data2] = [resp[0].data, resp[1].data]\n        data1.forEach(d => {\n          const temp = data2.find(h => h[\"Year\"] === d[\"Year\"] && h[\"Province ID\"] === d[\"Province ID\"]) || {};\n          d[measure2[selector]] = temp[\"Value\"]\n          d[measure1[selector]] = d[\"Value\"]\n          d[\"Value\"] = d[measure1[selector]] / d[measure2[selector]] \n          delete d[\"Academic Category\"]\n          delete d[\"Academic Category ID\"]\n        })\n        return data1;\n      }\n    },\n    groupBy: [\"Province ID\"],  \n    label: d => String(d[\"Province\"]),\n    colorScale: \"Value\",\n    colorScaleConfig: {\n      scale: \"jenks\",\n      axisConfig: {\n        tickFormat: d => `${formatter(d)}` ,\n      }\n    },\n    colorScalePosition: \"bottom\",\n    ocean: \"transparent\",\n    tiles: false,\n    time: \"Year\",\n    timeline: true,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n       [selectorName,  d => formatter(d[\"Value\"])]\n      ]\n    },\n    title: `${selectorName} by Administrative Region`,\n    type: \"Geomap\",\n    topojson: `/topojson/SA_regions.json`,\n    topojsonId: d => d.properties.id,\n  }",
              "section_id": 57,
              "allowed": "isArabia",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            },
            {
              "id": 44,
              "logic": "const {abbreviate, commas} = formatters;\nconst {hierarchy, id, name} = variables;\n\nconst selector = \"[[studentsMetrics]]\" //students, schools, teachers, avgStudentSchool, avgStudentTeacher, avgTeacherSchool\nconst selectorName = \"{{[[studentsMetrics]]}}\"\n\nconst dataURLs = {\n  \"students\": `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Sex,Year&measures=Value`,\n  \"schools\":  `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n  \"teachers\": `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Sex,Year&measures=Value`,\n\n  \"avgStudentSchool\": [\n     `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n  \"avgStudentTeacher\": [\n    `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=2&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n  \"avgTeacherSchool\": [\n     `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=3&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n     `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&Academic+Category=1&cube=sama_students_schools_teachers_region&drilldowns=Academic+Category,Province,Year&measures=Value`,\n    ],\n}\n\nconst measure1 = {\n  \"avgStudentSchool\": \"Students\",\n  \"avgStudentTeacher\": \"Students\",\n  \"avgTeacherSchool\": \"Teachers\"\n}\n\nconst measure2 = {\n  \"avgStudentSchool\": \"Schools\",\n  \"avgStudentTeacher\": \"Teachers\",\n  \"avgTeacherSchool\": \"Schools\"\n}\n\nconst formatter = selector === \"students\" || selector === \"schools\" || selector === \"teachers\" ? commas : abbreviate\nconst dataURL = dataURLs[selector]\n\nif(selector === \"students\" || selector === \"teachers\"){\n  return {\n    data: dataURL,\n    dataFormat: resp => {\n        const data = resp.data.map(d => Object.assign({}, d));\n        return data;\n    },\n    groupBy: [\"Sex ID\"],\n    label: d => String(d[\"Sex\"]),\n    lineLabels: true,\n    shapeConfig: {\n      Line: {\n        label(d) {\n          const dataArray = this._filteredData\n            \t.filter(f => f[\"Sex ID\"] === d[\"Sex ID\"]);\n          const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n          const maxData = dataArray\n          \t.find(f => f[\"Year\"] === maxX);\n          \n          return `${formatters.commas(maxData[\"Value\"])}`;\n        },\n      }\n    },\n    title: `Evolution of the number of ${selectorName} in ${name} by Gender`,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n        [selectorName,  d => formatter(d[\"Value\"])]\n      ]\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Value\",\n    yConfig: {\n      tickFormat: d => formatter(d),\n      title: \"\"\n    }\n  }\n}\n\nelse{\n  return {\n    data: dataURL,\n    dataFormat: resp => {\n      if(selector === \"schools\"){\n        const data = resp.data.map(d => Object.assign({}, d));\n        return data;\n      }\n      else{\n        const [data1, data2] = [resp[0].data.map(d => Object.assign({}, d)), resp[1].data.map(d => Object.assign({}, d))]\n        data1.forEach(d => {\n          const temp = data2.find(h => h[\"Year\"] === d[\"Year\"]) || {};\n          d[measure2[selector]] = temp[\"Value\"]\n          d[measure1[selector]] = d[\"Value\"]\n          d[\"Value\"] = d[measure1[selector]] / d[measure2[selector]] \n          delete d[\"Academic Category\"]\n          delete d[\"Academic Category ID\"]\n        })\n        return data1;\n      }\n    },\n    groupBy: [\"Province ID\"],\n    label: d => String(d[\"Province\"]),\n    lineLabels: true,\n    shapeConfig: {\n      Line: {\n        label(d) {\n          const dataArray = this._filteredData\n            \t.filter(f => f[\"Province ID\"] === d[\"Province ID\"]);\n          const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n          const maxData = dataArray\n          \t.find(f => f[\"Year\"] === maxX);\n          \n          return `${formatters.commas(maxData[\"Value\"])}`;\n        },\n      }\n    },\n    title: `Evolution of ${selectorName} in ${name}`,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n        [selectorName,  d => formatter(d[\"Value\"])]\n      ]\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Value\",\n    yConfig: {\n      tickFormat: d => formatter(d),\n      title: \"\"\n    }\n  }\n}",
              "section_id": 57,
              "allowed": "isRegion",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 1
            }
          ],
          "descriptions": [
            {
              "id": 61,
              "section_id": 57,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 61,
                  "locale": "en",
                  "description": "<p>In {{lastYearStudents}}, the {{word_[[studentsMetrics]]}} lowercase{{[[studentsMetrics]]}} in Saudi Arabia was abbreviate{{total_[[studentsMetrics]]}}. The administrative regions with the highest values in this metric were list{{topRegion_[[studentsMetrics]]}}.</p>"
                }
              ]
            },
            {
              "id": 63,
              "section_id": 57,
              "allowed": "isRegion",
              "ordering": 3,
              "content": [
                {
                  "id": 63,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of the {{word_[[studentsMetrics]]}} lowercase{{[[studentsMetrics]]}} {{gender_[[studentsMetrics]]}} in {{name}}.</p>"
                }
              ]
            },
            {
              "id": 64,
              "section_id": 57,
              "allowed": "isRegion",
              "ordering": 2,
              "content": [
                {
                  "id": 64,
                  "locale": "en",
                  "description": "<p>In {{lastYearStudents}}, the {{word_[[studentsMetrics]]}} lowercase{{[[studentsMetrics]]}} in {{name}} was {{totalRegion_[[studentsMetrics]]}}.</p>"
                }
              ]
            },
            {
              "id": 62,
              "section_id": 57,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 62,
                  "locale": "en",
                  "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the {{word_[[studentsMetrics]]}} lowercase{{[[studentsMetrics]]}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 48,
          "slug": "exports_imports",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 13,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 14,
              "options": [
                { "option": "exports", "allowed": "always" },
                { "option": "imports", "allowed": "always" }
              ],
              "default": "exports",
              "profile_id": 1,
              "title": "",
              "name": "importExport",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 21,
                "section_id": 48,
                "selector_id": 14,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 48,
              "locale": "en",
              "title": "<p>Exports and Imports</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 47,
              "logic": "const {countryForeignTrade, productForeignTrade} = variables;\nconst {sar} = formatters;\nconst selector = \"[[importExport]]\"// importOption, exportsOption\n\nconst tradeOption = selector === \"imports\" ? 1 : 2\n\nlet dataURL = `${variables.tesseract}/data.jsonrecords?Trade+Flow=${tradeOption}&cube=gastat_foreign_trade&drilldowns=Trade+Flow,HS2,Month&measures=Million+SAR&parents=true`\nif(countryForeignTrade){\n  dataURL += `Country=${countryForeignTrade[\"Country ID\"]}`\n}\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data = resp.data.map(d => Object.assign({}, d))\n    data.forEach(d => {\n      d[\"Million SAR\"] = d[\"Million SAR\"] * 1000000\n    });\n    return data;\n  },\n  groupBy: [\"Section ID\", \"HS2 ID\"],\n  label: d => String(d[\"HS2\"]),\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: d => d[\"Section\"],\n   tbody: false,\n  },\n  on: {\n    click: d => setVariables({productForeignTrade: d, countryForeignTrade: null})\n  },\n  sum: \"Million SAR\",\n  time: \"Month\",\n  timeline: true,\n  title: selector === \"exports\" ? \"Exports by Products\" : \"Imports by Products\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", d => d[\"Month\"]],\n      [\"Value\", d => sar(d[\"Million SAR\"])]\n    ]\n  },\n  total: \"Million SAR\",\n  totalFormat: formatters.sar,\n  type: \"Treemap\"\n};",
              "section_id": 48,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            },
            {
              "id": 46,
              "logic": "const {countryForeignTrade, productForeignTrade} = variables;\nconst {sar} = formatters;\nconst selector = \"[[importExport]]\"// importOption, exportsOption\n\nconst tradeOption = selector === \"imports\" ? 1 : 2\n\nlet dataURL = `${variables.tesseract}/data.jsonrecords?Trade+Flow=${tradeOption}&cube=gastat_foreign_trade&drilldowns=Trade+Flow,Country,Month&measures=Million+SAR&parents=true`\nif(productForeignTrade){\n  dataURL += `HS2=${countryForeignTrade[\"HS2 ID\"]}`\n}\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data = resp.data.filter(d => d[\"Continent ID\"] !== \"xx\").map(d => Object.assign({}, d))\n    data.forEach(d => {\n      d[\"Million SAR\"] = d[\"Million SAR\"] * 1000000\n    });\n    return data;\n  },\n  groupBy: [\"Continent ID\", \"Country ID\"],\n  label: d => String(d[\"Country\"]),\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: d => d[\"Continent\"],\n   tbody: false,\n  },\n  on: {\n    click: d => setVariables({countryForeignTrade: d, productForeignTrade: null})\n  },\n  sum: \"Million SAR\",\n  time: \"Month\",\n  title: selector === \"exports\" ? \"Exports by Destinations\" : \"Imports by Origen\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", d => d[\"Month\"]],\n      [\"Value\", d => sar(d[\"Million SAR\"])]\n    ]\n  },\n  total: \"Million SAR\",\n  totalFormat: formatters.sar,\n  type: \"Treemap\"\n};",
              "section_id": 48,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Trade+Flow=1&cube=gastat_foreign_trade&drilldowns=Trade+Flow%2CCountry%2CMonth&measures=Million+SAR&parents=true"
                ],
                "type": "Treemap",
                "groupBy": ["Continent ID", "Country ID"],
                "sum": "Million SAR",
                "colorScale": "manual-none"
              },
              "simple": false,
              "ordering": 1
            }
          ],
          "descriptions": [
            {
              "id": 69,
              "section_id": 48,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 69,
                  "locale": "en",
                  "description": "<p>{{[[importExport]]}} in {{monthForeignTrade}} were sar{{total_[[importExport]]}}. The main exports were list{{topProducts_[[importExport]]}}.</p>"
                }
              ]
            },
            {
              "id": 71,
              "section_id": 48,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 71,
                  "locale": "en",
                  "description": "<p>The first chart groups lowercase{{[[importExport]]}} by product and the second shows the distribution of lowercase{{[[importExport]]}} by country of {{word_[[importExport]]}}.</p>"
                }
              ]
            },
            {
              "id": 70,
              "section_id": 48,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 70,
                  "locale": "en",
                  "description": "<p>The main {{destination_[[importExport]]}} in {{monthForeignTrade}} were list{{topCountry_[[importExport]]}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 58,
          "slug": "higher_education",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 35,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 15,
              "options": [
                { "option": "newStudents", "allowed": "always" },
                { "option": "enrolledStudents", "allowed": "always" },
                { "option": "graduates", "allowed": "always" }
              ],
              "default": "newStudents",
              "profile_id": 1,
              "title": "",
              "name": "higherEducation",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 22,
                "section_id": 58,
                "selector_id": 15,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 58,
              "locale": "en",
              "title": "<p>Higher Education</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 48,
              "logic": "const selector = \"[[higherEducation]]\" //newStudents, enrolledStudents, graduates\nconst selectorName = \"{{[[higherEducation]]}}\"\n\nconst statusID = selector === \"newStudents\" ? 3 : selector === \"enrolledStudents\" ? 1 : 2\n\nconst dataURL =  `${variables.tesseract}/data.jsonrecords?Student+Status=${statusID}&cube=sama_higher_education&drilldowns=Year,Student+Status,Academic+Status,Sex&measures=Students`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n    return data_\n  },\n  discrete: \"y\",\n  groupBy: [\"Sex ID\"],\n  label: d => formatters.abbreviate(d[\"Students\"]),\n  legendConfig: {\n    label: d => d[\"Sex\"]\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: d => d[\"Sex\"],\n   tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: `${selectorName} by Educational Group and Gender`,\n  total: \"Students\",\n  totalFormat: formatters.commas,\n  tooltipConfig: {\n    title: d => d[\"Sex\"],\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Academic Status\", d => d[\"Academic Status\"]],\n      [\"Students\", d => formatters.commas(d[\"Students\"])]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Students\",\n  xConfig: {\n    title: \"Students\"\n  },\n  y: \"Academic Status\",\n  yConfig: {\n    title: \"\"\n  },\n  ySort: (b,a) => b[\"Students\"] - a[\"Students\"],\n};",
              "section_id": 58,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Student+Status=3&cube=sama_higher_education&drilldowns=Year,Student+Status,Academic+Status,Sex&measures=Students"
                ],
                "type": "BarChart",
                "groupBy": ["Sex ID"],
                "x": "Academic Status",
                "y": "Students",
                "xConfig.title": "Academic Status",
                "yConfig.title": "Students"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 73,
              "section_id": 58,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 73,
                  "locale": "en",
                  "description": "<p>The chart shows the distribution of new students by educational group and gender in the year selected on the timeline.</p>"
                }
              ]
            },
            {
              "id": 72,
              "section_id": 58,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 72,
                  "locale": "en",
                  "description": "<p>In {{lastYear_[[higherEducation]]}}, {{topValue_[[higherEducation]]}} lowercase{{[[higherEducation]]}} were registered in {{topName_[[higherEducation]]}}, list{{list_[[higherEducation]]}}. You can see the distribution by gender in the graph.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 63,
          "slug": "oil_prices",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 43,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 16,
              "options": [
                { "option": "realOil", "allowed": "always" },
                { "option": "nominalOil", "allowed": "always" }
              ],
              "default": "realOil",
              "profile_id": 1,
              "title": "",
              "name": "oilPrice",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 23,
                "section_id": 63,
                "selector_id": 16,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 63,
              "locale": "en",
              "title": "<p>Oil Prices</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 52,
              "logic": "const {commas, abbreviate, dollar} = formatters;\nconst selector = \"[[oilPrice]]\" // realOil, nominalOil\nconst selectorName = \"{{[[oilPrice]]}}\"\n\nconst price = selector === \"realOil\" ? 2 : 1\n\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?Price+Type=${price}&cube=sama_oil_prices&drilldowns=Oil,Price+Type,Year&measures=USD+per+Barrel`,\n  groupBy: [\"Oil ID\"],\n  label: d => formatters.dollar(d[\"USD per Barrel\"]),\n  legendPosition: \"bottom\",\n  legendConfig: {\n    label: d => d[\"Oil\"]\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: `${selectorName} <br /> (Base Year 2005)`,\n  tooltipConfig: {\n    title: d => d[\"Oil\"],\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"USD per Barrel\", d => dollar(d[\"USD per Barrel\"])]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"USD per Barrel\",\n  yConfig: {\n    title: \"USD per Barrel\",\n    tickFormat: d => dollar(d)\n  }\n};",
              "section_id": 63,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Price+Type=2&cube=sama_oil_prices&drilldowns=Oil,Price+Type,Year&measures=USD+per+Barrel"
                ],
                "type": "LinePlot",
                "groupBy": ["Oil ID"],
                "x": "Year",
                "y": "USD per Barrel",
                "xConfig.title": "Year",
                "yConfig.title": "USD per Barrel"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 81,
              "section_id": 63,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 81,
                  "locale": "en",
                  "description": "<p>Compared to North Sea (Brent) oil whose price was dollar{{northSea_[[oilPrice]]}}, Arabian Light oil was priced abbreviate{{arabianVsNorthSea_[[oilPrice]]}}% {{arabianVsNorthSeaWord_[[oilPrice]]}}, while when compared to OPEC basket oil whose price was dollar{{opecBasket_[[oilPrice]]}}, Arabian Light oil was priced abbreviate{{arabianVsOpecBasket_[[oilPrice]]}}% {{arabianVsOpecBasketWord_[[oilPrice]]}}.</p>"
                }
              ]
            },
            {
              "id": 80,
              "section_id": 63,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 80,
                  "locale": "en",
                  "description": "<p>In {{lastYearOilPrices}}, the {{word_[[oilPrice]]}} of Arabian Light oil was dollar{{arabianLight_[[oilPrice]]}} per barrel.</p>"
                }
              ]
            },
            {
              "id": 82,
              "section_id": 63,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 82,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of the lowercase{{[[oilPrice]]}} in dollars per barrel.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 61,
          "slug": "production",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 41,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 17,
              "options": [
                { "option": "productionOil", "allowed": "always" },
                { "option": "productionRefined", "allowed": "always" }
              ],
              "default": "productionOil",
              "profile_id": 1,
              "title": "",
              "name": "energyProduction",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 25,
                "section_id": 61,
                "selector_id": 17,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 61,
              "locale": "en",
              "title": "<p>Production</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 53,
              "logic": "const {sar, lowercase, abbreviate, growthPct, commas} = formatters;\n\nconst selector = \"[[energyProduction]]\" //productionOil, productionRefined\n\nif(selector === \"productionOil\"){\n\n  const dataBarrels = `${variables.tesseract}/data.jsonrecords?cube=sama_crude_oil_production&drilldowns=Year&measures=Million+Barrels`\n  const dataGrowth = `${variables.tesseract}/data.jsonrecords?cube=sama_crude_oil_production&drilldowns=Year&measures=Percentage+Change`\n  \n  let dataFinal = []\n  \n  return {\n    data: [dataBarrels, dataGrowth],\n    dataFormat: resp => {\n      let dataBarrels_ = resp[0].data;\n      let dataGrowth_ = resp[1].data;\n      \n      dataBarrels_.forEach(d => {\n        d[\"shape\"] = \"Barrels\"\n        d[\"Barrels\"] = d[\"Million Barrels\"] \n        delete d[\"Million Barrels\"]\n      })\n      \n      dataGrowth_.forEach(d => {\n        d[\"shape\"] = \"Growth\"\n        d[\"Growth\"] = d[\"Percentage Change\"]\n        delete d[\"Percentage Change\"]\n      })\n      dataFinal = dataBarrels_.concat(dataGrowth_) \n  \n      return dataFinal.filter(d => d[\"Year\"] >= 1963);\n    },\n    groupBy: \"shape\",\n    discrete: \"x\",\n    label: d => d.shape !== \"Barrels\" ? \"Percentage Change\" : \"Total Production\",\n    legendConfig: {\n      label: d => d[\"shape\"] !== \"Barrels\" ? \"Percentage Change\" : \"Total Production\",\n    },\n    legendPosition: \"bottom\",\n    legendTooltip: {\n      tbody: false,\n    },\n    timeline: true,\n    time: \"Year\",\n    title: `Saudi Crude Oil Production`,\n    tooltipConfig: {\n      tbody: d => {\n        let customTooltip = [];\n        d[\"shape\"] === \"Barrels\" ?\n        customTooltip = [\n          [`Year`, d[\"Year\"]],\n          [`Million Barrels`, commas(d[\"Barrels\"])],\n        ] : \n        customTooltip = [\n          [`Year`, d[\"Year\"]],\n          [`Percentage Change`, `${abbreviate(d[\"Growth\"]*1)}%`],\n        ]\n      return customTooltip;\n      },\n    },\n    type: \"LinePlot\",\n    x: \"Year\",\n    y: \"Barrels\",\n    yConfig: {\n      tickFormat: d => (abbreviate(d*1)),\n      title: \"Total Production - Million Barrels\",\n    },\n    y2: \"Growth\",\n    y2Config: {\n      tickFormat: d => `${abbreviate(d*1)}%`,\n      title: \"Percentage Change\",\n      scale: \"linear\"\n    },\n  }\n}\nelse{\n  return {\n    data: `${variables.tesseract}/data.jsonrecords?cube=sama_production_refined_products&drilldowns=Product,Year&measures=Thousand+Barrels`,\n    dataFormat: resp => {\n      let data = resp.data;\n      \n      data.forEach(d => {\n        d[\"Barrels\"] = d[\"Thousand Barrels\"] \n        delete d[\"Thousand Barrels\"]\n      })\n    \n      return data\n    },\n    groupBy: [\"Product ID\"],\n    label: d => String(d[\"Product\"]),\n    legendPosition: \"bottom\",\n    legendTooltip: {\n      tbody: false, \n    },\n    timeline: true,\n    time: \"Year\",\n    title: `Production of Refined Products`,\n    tooltipConfig: {\n      tbody: [\n        [\"Year\", d => d[\"Year\"]],\n        [\"Thousand Barrels\", d => commas(d[\"Barrels\"])]\n      ]\n    },\n    type: \"StackedArea\",\n    x: \"Year\",\n    xConfig: {\n      title: \"\"\n    },\n    y: \"Barrels\",\n    yConfig: {\n      title: \"Thousand Barrels\",\n      tickFormat: d => abbreviate(d)\n    }\n  }\n}",
              "section_id": 61,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 75,
              "section_id": 61,
              "allowed": "energyOil_[[energyProduction]]",
              "ordering": 1,
              "content": [
                {
                  "id": 75,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of crude oil production in Saudi Arabia and its percentage change.</p>"
                }
              ]
            },
            {
              "id": 74,
              "section_id": 61,
              "allowed": "energyOil_[[energyProduction]]",
              "ordering": 0,
              "content": [
                {
                  "id": 74,
                  "locale": "en",
                  "description": "<p>Crude oil production in Saudi Arabia during {{lastYearPoductionOil}} was commas{{productionCrudeOil}} million barrels, being abbreviate{{changeProductionOil}}% {{higherLowerCrudeOilProduction}} than the previous period.</p>"
                }
              ]
            },
            {
              "id": 76,
              "section_id": 61,
              "allowed": "energyRefined_[[energyProduction]]",
              "ordering": 3,
              "content": [
                {
                  "id": 76,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of the production of refined products in Saudi Arabia by type of product.</p>"
                }
              ]
            },
            {
              "id": 77,
              "section_id": 61,
              "allowed": "energyRefined_[[energyProduction]]",
              "ordering": 2,
              "content": [
                {
                  "id": 77,
                  "locale": "en",
                  "description": "<p>The production of refined products in Saudi Arabia in {{lastYearRefinedProduction}} was commas{{totalRefinedProduction}} thousand barrels, highlighting the production of list{{topRefinedProduction}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 62,
          "slug": "saudi_exports_by_destination",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 42,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [
            {
              "id": 18,
              "options": [
                { "option": "exportOil", "allowed": "always" },
                { "option": "exportRefined", "allowed": "always" }
              ],
              "default": "exportOil",
              "profile_id": 1,
              "title": "",
              "name": "energyDestinations",
              "type": "single",
              "dynamic": "",
              "section_selector": {
                "id": 26,
                "section_id": 62,
                "selector_id": 18,
                "ordering": 0
              }
            }
          ],
          "content": [
            {
              "id": 62,
              "locale": "en",
              "title": "<p>Saudi Exports by Destination</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 55,
              "logic": "const {commas, abbreviate} = formatters;\nconst selector = \"[[energyDestinations]]\"//exportOil, exportRefined\nconst selectorName = \"{{[[energyDestinations]]}}\"\n\nconst productType = selector === \"exportOil\" ? 1 : 2\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?Product+Type=${productType}&cube=sama_products_destination&drilldowns=Product+Type,Destination,Year&measures=Million+Barrels&exclude=Destination:8`,\n  dataFormat: resp => {\n      let data = resp.data.map(d => Object.assign({}, d));\n      \n      data.forEach(d => {\n        d[\"Barrels\"] = d[\"Million Barrels\"] \n        delete d[\"Million Barrels\"]\n      })\n    \n      return data\n    },\n  groupBy: [\"Destination ID\"],\n  label: d => String(d[\"Destination\"]),\n  legendPosition: \"bottom\",\n    legendTooltip: {\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: \"Year\",\n  title: `Saudi Exports Of ${selectorName} By Destination`,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Million Barrels\", d => commas(d[\"Barrels\"])]\n    ]\n  },\n  type: \"StackedArea\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Barrels\",\n  yConfig: {\n    title: \"Million Barrels\",\n    tickFormat: d => abbreviate(d)\n  }\n};",
              "section_id": 62,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "https://api.datasaudi.datawheel.us/tesseract/data.jsonrecords?Product+Type=1&cube=sama_products_destination&drilldowns=Product+Type%2CDestination%2CYear&measures=Million+Barrels"
                ],
                "type": "StackedArea",
                "groupBy": ["Destination ID"],
                "x": "Year",
                "y": "Million Barrels",
                "xConfig.title": "Year",
                "yConfig.title": "Million Barrels"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 79,
              "section_id": 62,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 79,
                  "locale": "en",
                  "description": "<p>The visualization shows the annual evolution of Saudi exports of {{[[energyDestinations]]}} by destination.</p>"
                }
              ]
            },
            {
              "id": 78,
              "section_id": 62,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 78,
                  "locale": "en",
                  "description": "<p>Saudi exports of lowercase{{[[energyDestinations]]}} in {{lastYearDestination}} reached {{total_[[energyDestinations]]}} million barrels. By destination, exports went to list{{destinations_[[energyDestinations]]}}</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 17,
          "slug": "expenditures_on_education",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 34,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 17,
              "locale": "en",
              "title": "<p>Expenditures on Education</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 7,
              "logic": "const {sar} = formatters;\nconst {sum, nest} = libs.d3;\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?cube=gastat_education_training_survey&drilldowns=Province%2CExpenditure+Type&measures=Expenditure`,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n    nest()\n      .key(d => d[\"Province\"])\n      .entries(data_)\n      .forEach(group => {\n        const total = sum(group.values, d => d[\"Expenditure\"])\n        group.values.forEach(d => {\n          d[\"Total\"] = total\n          d[\"Expenditure\"] =  d[\"Expenditure\"]*1000000\n        })\n      })\n      \n    return data_\n  },\n  discrete: \"y\",\n  groupBy: [\n    \"Expenditure Type ID\"\n  ],\n  label: d => String(d[\"Expenditure Type\"]),\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  legendSort: (a,b) => a[\"Expenditure Type ID\"] - b[\"Expenditure Type ID\"],\n  stacked: true,\n  title: `Saudi Household Expenditure on Education by Administrative Area and Type of Expenditure, 2017`,\n  tooltipConfig: {\n    tbody: [\n      [\"Province\", d => d[\"Province\"]],\n      [\"Expenditure\", d => sar(d[\"Expenditure\"])]\n    ]\n  },\n  type: \"BarChart\",\n  y: \"Province\",\n  yConfig: {\n    title: \"\"\n  },\n  x: \"Expenditure\",\n  xConfig: {\n    title: \"\",\n    tickFormat: d  => sar(d)\n  },\n  ySort: (a, b) => a[\"Total\"] - b[\"Total\"],\n};",
              "section_id": 17,
              "allowed": "isArabia",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=gastat_education_training_survey&drilldowns=Province%2CExpenditure+Type&measures=Expenditure"
                ],
                "type": "BarChart",
                "groupBy": ["Expenditure Type ID"],
                "x": "Province",
                "y": "Expenditure",
                "xConfig.title": "Province",
                "yConfig.title": "Expenditure"
              },
              "simple": false,
              "ordering": 0
            },
            {
              "id": 34,
              "logic": "const {sar} = formatters;\nconst {hierarchy, id} = variables;\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id}&cube=gastat_education_training_survey&drilldowns=Province%2CExpenditure+Type&measures=Expenditure`,\n  dataFormat: resp => {\n    let data = resp.data;\n    data.forEach(d => {\n      d[\"Expenditure\"] = d[\"Expenditure\"] * 1000000\n    })\n    \n    return data\n  },\n  discrete: \"y\",\n  groupBy: [\"Expenditure Type ID\"],\n  label: d => sar(d[\"Expenditure\"]),\n  legendPosition: \"bottom\",\n  legendSort: (a,b) => a[\"Expenditure Type ID\"] - b[\"Expenditure Type ID\"],\n  title: `Household Expenditure on Education by Type of Expenditure`,\n  tooltipConfig: {\n    tbody: [\n      [\"Expenditure\", d => sar(d[\"Expenditure\"])]\n    ]\n  },\n  type: \"BarChart\",\n  y: \"Expenditure Type\",\n  yConfig: {\n    title: \"\"\n  },\n  x: \"Expenditure\",\n  xConfig: {\n    title: \"\",\n    tickFormat: d  => sar(d)\n  },\n  ySort: (b,a) => b[\"Expenditure\"] - a[\"Expenditure\"],\n};",
              "section_id": 17,
              "allowed": "isRegion",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 1
            }
          ],
          "descriptions": [
            {
              "id": 23,
              "section_id": 17,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 23,
                  "locale": "en",
                  "description": "<p>In {{lastYearExpenditureEducation}}, the highest expenditure on education was registered in {{topRegion}} with sar{{totalExpenditureEducation}}, distributed in list{{expendituresTopRegion}}.</p>"
                }
              ]
            },
            {
              "id": 22,
              "section_id": 17,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 22,
                  "locale": "en",
                  "description": "<p>The graph shows the saudi household expenditure on education by administrative area and type of expenditure.</p>"
                }
              ]
            },
            {
              "id": 50,
              "section_id": 17,
              "allowed": "isRegion",
              "ordering": 2,
              "content": [
                {
                  "id": 50,
                  "locale": "en",
                  "description": "<p>In {{lastYearExpenditureEducation}}, total education expenditures in {{name}} were sar{{totalExpenditureRegion}}, distributed in list{{expendituresInRegion}}.</p>"
                }
              ]
            },
            {
              "id": 51,
              "section_id": 17,
              "allowed": "isRegion",
              "ordering": 3,
              "content": [
                {
                  "id": 51,
                  "locale": "en",
                  "description": "<p>The graph shows the saudi household expenditure on education by type of expenditure.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 66,
          "slug": "water",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 46,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 66, "locale": "en", "title": "<p>Water</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 64,
          "slug": "electricity",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 44,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 64,
              "locale": "en",
              "title": "<p>Electricity</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 71,
          "slug": "funding_to_countries",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 37,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 71,
              "locale": "en",
              "title": "<p>Funding to Countries and Organization</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 57,
              "logic": "const dataURL = `${variables.tesseract}/data.jsonrecords?cube=donor_data&drilldowns=Year,Destination+Country&measures=Value,Count&parents=true`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data = resp.data.filter(d => d[\"Destination Continent ID\"] !== \"xx\").map(d => Object.assign({}, d))\n    return data;\n  },\n  groupBy: [\"Destination Continent ID\", \"Destination Country ID\"],\n  label: d => String(d[\"Destination Country\"]),\n  legendConfig: {\n    label: d => \"\"\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: d => d[\"Destination Continent\"],\n   tbody: false,\n  },\n  /*on: {\n    click: d => setVariables({countryForeignTrade: d, productForeignTrade: null})\n  },*/\n  sum: \"Value\",\n  time: \"Year\",\n  timeline:true,\n  title: \"Funding to countries\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Funding\", d => formatters.dollar(d[\"Value\"])]\n    ]\n  },\n  total: \"Value\",\n  totalFormat: formatters.dollar,\n  type: \"Treemap\"\n};",
              "section_id": 71,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=donor_data&drilldowns=Destination+Country&limit=50&measures=Value%2CCount&parents=true"
                ],
                "type": "Treemap",
                "groupBy": [
                  "Destination Continent ID",
                  "Destination Country ID"
                ],
                "sum": "Value",
                "colorScale": "manual-none"
              },
              "simple": false,
              "ordering": 0
            },
            {
              "id": 59,
              "logic": "const dataURL =`${variables.tesseract}/data.jsonrecords?cube=donor_data&drilldowns=Year,Destination+Organization+Type&measures=Value,Count`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data = resp.data.filter(d => d[\"Destination Organization Type ID\"] !== 99)\n    \n    data.forEach(d => {\n      d[\"Destination\"] = d[\"Destination Organization Type ID\"] === 8 ? \"Other\" : d[\"Destination Organization Type\"].split(\":\")[0]\n      d[\"Sub Destination\"] = d[\"Destination Organization Type ID\"] === 8 ? \"Other\" : d[\"Destination Organization Type\"].split(\":\")[1]\n      d[\"Sub Destination ID\"] = d[\"Destination Organization Type ID\"] \n      delete d[\"Destination Organization Type\"]\n      delete [\"Destination Organization Type ID\"] \n    })\n\n    return data;\n  },\n  groupBy: [\"Destination\", \"Sub Destination\"],\n  label: d => `${d[\"Sub Destination\"]} (${formatters.dollar(d[\"Value\"])})`,\n  legendConfig: {\n    label: d => d[\"Destination\"]\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n   title: d => d[\"Destination\"],\n   tbody: false,\n  },\n  sum: \"Value\",\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Funding\", d => formatters.dollar(d[\"Value\"])]\n    ]\n  },\n  type: \"Treemap\",\n\n};",
              "section_id": 71,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 1
            }
          ],
          "descriptions": [
            {
              "id": 91,
              "section_id": 71,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 91,
                  "locale": "en",
                  "description": "<p>The first graph groups the amounts of humanitarian aid by country of destination and the second shows the distribution of these funds according to the organization receiving the aid.</p>"
                }
              ]
            },
            {
              "id": 89,
              "section_id": 71,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 89,
                  "locale": "en",
                  "description": "<p>The countries that received the largest amounts of humanitarian aid in {{lastYearHumanitarian}} were list{{topCountriesHumanitarian}}.</p>"
                }
              ]
            },
            {
              "id": 90,
              "section_id": 71,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 90,
                  "locale": "en",
                  "description": "<p>The main beneficiary organizations of these funds were list{{topOrganizationHumanitarian}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 2,
          "slug": "economy",
          "profile_id": 1,
          "type": "Grouping",
          "ordering": 2,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 2, "locale": "en", "title": "<p>Economy</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 72,
          "slug": "destination_organizations",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 38,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 72,
              "locale": "en",
              "title": "<p>Reporting Organizations</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 60,
              "logic": "return {\n  data: `${variables.tesseract}/data.jsonrecords?cube=donor_data&drilldowns=Year%2CSector&measures=Value%2CCount&parents=true`,\n  dataFormat: resp => {\n    let data = resp.data.filter(d => d[\"Sector ID\"] !== 99)\n    return data;\n  },\n  discrete: \"y\",\n  groupBy: [\"Year\"],\n  label: d => formatters.dollar(d[\"Value\"]),\n  shapeConfig: {\n    Bar: {\n     fill: \"D3PLUS-COMMON-RESET\"\n    }\n  },\n  time: \"Year\",\n  timeline: true,\n  title: \"Funding by Sector\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Funding\", d => formatters.dollar(d[\"Value\"])]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Value\",\n  xConfig: {\n    title: \"\",\n    tickFormat: d => formatters.dollar(d)\n  },\n  y: \"Sector\",\n  yConfig: {\n    title: \"\"\n  },\n  ySort: (a, b) => a[\"Value\"] - b[\"Value\"],\n};\n\n",
              "section_id": 72,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Year=2022&cube=donor_data&drilldowns=Year%2CSector&measures=Value%2CCount&parents=true"
                ],
                "type": "BarChart",
                "groupBy": ["Year"],
                "x": "Sector",
                "y": "Value",
                "xConfig.title": "Sector",
                "yConfig.title": "Value"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 93,
              "section_id": 72,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 93,
                  "locale": "en",
                  "description": "<p>The graph shows the humanitarian aid received by different sectors.</p>"
                }
              ]
            },
            {
              "id": 94,
              "section_id": 72,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 94,
                  "locale": "en",
                  "description": "<p><em>*Sector refers to a discrete technical area of humanitarian action. Differently from countries where a cluster system is activated and the Cluster Lead is accountable to the Humanitarian Coordinator, reference to \"Sectors\" occurs when the Government has the responsibiity for coordination.&nbsp;</em></p>"
                }
              ]
            },
            {
              "id": 92,
              "section_id": 72,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 92,
                  "locale": "en",
                  "description": "<p>The sectors that benefited the most from humanitarian aid in {{lastYearHumanitarian}} were list{{topSectorHumanitarian}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 47,
          "slug": "foreign_trade",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 11,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 47,
              "locale": "en",
              "title": "<p>Foreign Trade</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 46,
          "slug": "structural_business",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 7,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 46,
              "locale": "en",
              "title": "<p>Structural Business</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 65,
          "slug": "electricity_consumption",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 45,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 65,
              "locale": "en",
              "title": "<p>Electricity Consumption</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 51,
              "logic": "const {abbreviate, commas} = formatters;\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?cube=sama_electricity_consumption_subregion&drilldowns=Consumption+Type,Subregion,Year&measures=Megawatts`,\n  groupBy: [\"Consumption Type ID\"],\n  groupPadding: 50,\n  label: d => abbreviate(d[\"Megawatts\"]),\n  legendConfig: {\n    label: d => d[\"Consumption Type\"]\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    title: d =>  d[\"Consumption Type\"],\n    tbody: false,\n  },\n  time: \"Year\",\n  timeline: true,\n  title: \"Electricity Consumption of The Kingdom by Type of Consumption\",\n  tooltipConfig: {\n    title: d => d[\"Consumption Type\"],\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Subregion\", d => d[\"Subregion\"]],\n      [\"Megawatts/h\", d => commas(d[\"Megawatts\"])]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Subregion\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Megawatts\",\n  yConfig: {\n    title: \"Megawatts/h\",\n    tickFormat: d => abbreviate(d)\n  }\n};",
              "section_id": 65,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?cube=sama_electricity_consumption_subregion&drilldowns=Consumption+Type,Subregion,Year&measures=Megawatts"
                ],
                "type": "BarChart",
                "groupBy": ["Consumption Type ID"],
                "x": "Subregion",
                "y": "Megawatts",
                "xConfig.title": "Subregion",
                "yConfig.title": "Megawatts"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 84,
              "section_id": 65,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 84,
                  "locale": "en",
                  "description": "<p>The visualization shows the electricity consumption (in Megawatts/h) by zone and type of consumption.</p>"
                }
              ]
            },
            {
              "id": 83,
              "section_id": 65,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 83,
                  "locale": "en",
                  "description": "<p>Electricity consumption in the Kingdom during {{lastYearElectricity}} was commas{{totalElectricityConsumption}} Megawatts/h, with {{top1ElectricityConsumption}} standing out, followed by {{top2ElectricityConsumption}} and {{top3ElectricityConsumption}}. You can check the consumption by zones in the graph.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 52,
          "slug": "population",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 24,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 52,
              "locale": "en",
              "title": "<p>Population</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 24,
          "slug": "illiteracy_rate",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 33,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 24,
              "locale": "en",
              "title": "<p>Illiteracy Rate</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 41,
              "logic": "return {\n  data: `${variables.tesseract}/data.jsonrecords?${variables.hierarchy}=${variables.id}&cube=gastat_illiteracy_region&drilldowns=Sex,Year,Province&measures=Illiteracy+Rate`,\n  discrete: \"y\",\n  groupBy: [\"Sex ID\"],\n  label: d => `${formatters.abbreviate(d[\"Illiteracy Rate\"])}%`,\n  title: \"Illiteracy Rate by Gender\",\n  tooltipConfig: {\n    title: d => d[\"Sex\"],\n    tbody: [\n      [\"Illiteracy Rate\", d => `${formatters.abbreviate(d[\"Illiteracy Rate\"])}%`]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Illiteracy Rate\",\n  xConfig: {\n    title: \"Illiteracy Rate\",\n    tickFormat: d => `${formatters.abbreviate(d)}%`\n  },\n  y: \"Sex\",\n  yConfig: {\n    title: \"\"\n  }\n};",
              "section_id": 24,
              "allowed": "isRegion",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?<hierarchy>=<id>&cube=gastat_illiteracy_region&drilldowns=Sex,Year,Province&measures=Illiteracy+Rate"
                ],
                "type": "BarChart",
                "groupBy": ["Sex ID"],
                "x": "Illiteracy Rate",
                "y": "Sex",
                "xConfig.title": "Illiteracy Rate",
                "yConfig.title": "Sex"
              },
              "simple": false,
              "ordering": 1
            },
            {
              "id": 12,
              "logic": "const {abbreviate} = formatters;\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?cube=gastat_illiteracy_region&drilldowns=Sex%2CYear%2CProvince&measures=Illiteracy+Rate`,\n  /*dataFormat: resp => {\n    let data = resp.data;\n        data_.forEach(d => {\n          d[\"Indicator Year\"] = d[\"Indicator Year\"].replace(\"Illiteracy Rate - \", \"\")\n      });\n    return data\n  },*/\n  groupBy: [\"Sex ID\"],\n  label: d => `${abbreviate(d[\"Illiteracy Rate\"])}%`,\n  legendConfig: {\n    label: d => d.Sex\n  },\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  title: \"Illiteracy Rate by Gender and Regions, 2017\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Illiteracy Rate\", d => `${abbreviate(d[\"Illiteracy Rate\"])}%`]\n    ],\n    title: d => d.Sex\n  },\n  type: \"BarChart\",\n  x: \"Province\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Illiteracy Rate\",\n  yConfig: {\n    title: \"Illiteracy Rate\", \n    tickFormat: d => `${abbreviate(d)}%`,\n  }\n};",
              "section_id": 24,
              "allowed": "isArabia",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Indicator+Year=40%2C41%2C42%2C43%2C44%2C45%2C46%2C47%2C48%2C49%2C50%2C51%2C52%2C53%2C54%2C55%2C56%2C57%2C58%2C59%2C60%2C61%2C62%2C63%2C64%2C65%2C66%2C67&cube=gastat_indicators_year&drilldowns=Indicator+Year%2CYear&measures=Indicator"
                ],
                "type": "BarChart",
                "groupBy": ["Indicator Year ID"],
                "x": "Year",
                "y": "Indicator",
                "xConfig.title": "Year",
                "yConfig.title": "Indicator"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 21,
              "section_id": 24,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 21,
                  "locale": "en",
                  "description": "<p>In {{lastYearIlliteracy}}, the highest rate of illiteracy was registered among {{topIlliteracyRate}}, while the lowest rate was registered among {{lastIlliteracyRate}}.</p>"
                }
              ]
            },
            {
              "id": 20,
              "section_id": 24,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 20,
                  "locale": "en",
                  "description": "<p>The graph shows the illiteracy rate in 2017 by region and gender in Saudi Arabia.</p>"
                }
              ]
            },
            {
              "id": 60,
              "section_id": 24,
              "allowed": "isRegion",
              "ordering": 3,
              "content": [
                {
                  "id": 60,
                  "locale": "en",
                  "description": "<p>The graph shows the illiteracy rate in {{name}} by gender.</p>"
                }
              ]
            },
            {
              "id": 59,
              "section_id": 24,
              "allowed": "isRegion",
              "ordering": 2,
              "content": [
                {
                  "id": 59,
                  "locale": "en",
                  "description": "<p>In {{lastYearIlliteracy}}, the illiteracy rate in {{name}} was abbreviate{{illiteracyRateWomen}}% for women and abbreviate{{illiteracyRateMen}}% for men.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 55,
          "slug": "health",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 29,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 55, "locale": "en", "title": "<p>Health</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 68,
          "slug": "job_seekers",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 22,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 68,
              "locale": "en",
              "title": "<p>Job Seekers</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 39,
              "logic": "const {abbreviate} = formatters;\n\nconst dataURL = `${variables.tesseract}/data.jsonrecords?cube=sama_job_seekers_region&drilldowns=Year,Province&measures=Job+Seekers&exclude=Province:14`\n \nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n\n   /* data.forEach(d => {\n      const s = dataWorkforce.find(h => h[\"State ID\"] === d[\"State ID\"]) || {};\n      d[\"Workforce Total\"] = s[\"Workforce\"];\n      d[\"Percentage\"] = (d.Workforce / d[\"Workforce Total\"]) * 100;\n    });*/\n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: d => String(d[\"Province\"]),\n  colorScale: \"Job Seekers\",\n  colorScaleConfig: {\n    scale: \"log\",\n    axisConfig: {\n      tickFormat: d => `${formatters.abbreviate(d)}` ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", d => d[\"Year\"]],\n     [\"Job Seekers\",  d => abbreviate(d[\"Job Seekers\"])]\n    ]\n  },\n  title: `Number of Job Seekers by Administrative Region`,\n  type: \"Geomap\",\n  topojson: `/topojson/SA_regions.json`,\n  topojsonId: d => d.properties.id,\n}",
              "section_id": 68,
              "allowed": "isArabia",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            },
            {
              "id": 40,
              "logic": "const {name, id, hierarchy} = variables;\n\nreturn {\n  data: `${variables.tesseract}/data.jsonrecords?${hierarchy}=${id},${id}:neighbors&cube=sama_job_seekers_region&drilldowns=Year,Province&measures=Job+Seekers`,\n  groupBy: [\"Province ID\"],\n  label: d => String(d[\"Province\"]),\n  legend: false,\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      stroke: d => d[`Province ID`]*1 === id*1 ? \"#38af9a\" : \"#959ba4\",\n      strokeWidth: d => d[`Province ID`]*1 === id*1 ? 5 : false,\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Province ID\"] === d[\"Province ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Year\"] === maxX);\n        if(d[\"Province ID\"]*1 === id*1){\n          return `${formatters.commas(maxData[\"Job Seekers\"])}`;\n        }\n        else{\n          return \"\"\n        }\n      },\n    }\n  },\n  title: `Evolution of the Number of Job Seekers in ${name}`,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Job Seekers\", d => formatters.commas(d[\"Job Seekers\"])]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Job Seekers\",\n  yConfig: {\n    tickFormat: d => formatters.abbreviate(d),\n    title: \"\"\n  }\n};",
              "section_id": 68,
              "allowed": "isRegion",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?<hierarchy>=<id>&cube=sama_job_seekers_region&drilldowns=Year,Province&measures=Job+Seekers"
                ],
                "type": "LinePlot",
                "groupBy": ["Province ID"],
                "x": "Year",
                "y": "Job Seekers",
                "xConfig.title": "",
                "yConfig.title": "",
                "formatters": { "y": "abbreviate" },
                "title": "Evolution of the Number of Job Seekers in ${name}"
              },
              "simple": false,
              "ordering": 1
            }
          ],
          "descriptions": [
            {
              "id": 56,
              "section_id": 68,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 56,
                  "locale": "en",
                  "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the number of job seekers.</p>"
                }
              ]
            },
            {
              "id": 55,
              "section_id": 68,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 55,
                  "locale": "en",
                  "description": "<p>In {{lastYearJobSeekers}} the number of job seekers of Saudi Arabia was commas{{totalJobSeekers}}. The regions that concentrated the largest number of job seekers were list{{topRegionJobSeekers}}.</p>"
                }
              ]
            },
            {
              "id": 57,
              "section_id": 68,
              "allowed": "isRegion",
              "ordering": 2,
              "content": [
                {
                  "id": 57,
                  "locale": "en",
                  "description": "<p>In {{lastYearJobSeekers}}, {{name}} registered commas{{jobSeekersInRegion}} job seekers, abbreviate{{growthJobSeekersAbs}}% {{wordJobSeekers}} than the previous year.</p>"
                }
              ]
            },
            {
              "id": 58,
              "section_id": 68,
              "allowed": "isRegion",
              "ordering": 3,
              "content": [
                {
                  "id": 58,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of job seekers in {{name}} and in other nearby administrative regions for comparison.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 8,
          "slug": "about",
          "profile_id": 1,
          "type": "MultiColumn",
          "ordering": 1,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 8, "locale": "en", "title": "<p>About</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [
            {
              "id": 24,
              "section_id": 8,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 24,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterGDP}}, the Gross Domestic Product (GDP) in Saudi Arabia was sar{{lastQuarterGDP}}.</p>"
                }
              ]
            },
            {
              "id": 25,
              "section_id": 8,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 25,
                  "locale": "en",
                  "description": "<p>In month{{lastMonthCPI}} a value of {{generalCPI}} was registered in inflation measured by the consumer price index (CPI). The commodity with the highest variation compared to the previous period was {{commodityHighestVar}}, going from {{commodityHighestPrevValue}} in month{{prevMonthCPI}} to {{commodityHighestCurrValue}} in month{{lastMonthCPI}}</p>"
                }
              ]
            },
            {
              "id": 30,
              "section_id": 8,
              "allowed": "isArabia",
              "ordering": 6,
              "content": [
                {
                  "id": 30,
                  "locale": "en",
                  "description": "<p>The total population registered in {{lastYear_totalPopulationOption}} was {{totalKingdom_totalPopulationOption}}, where {{populationShareWomen}} were women and {{populationShareMen}} were men.</p>"
                }
              ]
            },
            {
              "id": 28,
              "section_id": 8,
              "allowed": "always",
              "ordering": 4,
              "content": [
                {
                  "id": 28,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterUnemploymentByAge}}, the average unemployment rate reached abbreviate{{averageUnemploymentRate}}%. Differentiating by gender, female unemployment was abbreviate{{unemploymentRateFemale_saudi}}% for Saudis and abbreviate{{unemploymentRateFemale_nonSaudi}}% for non-Saudis, while male unemployment was abbreviate{{unemploymentRateMale_saudi}}% for Saudis and abbreviate{{unemploymentRateMale_nonSaudi}}% for non-Saudis.</p>"
                }
              ]
            },
            {
              "id": 27,
              "section_id": 8,
              "allowed": "always",
              "ordering": 3,
              "content": [
                {
                  "id": 27,
                  "locale": "en",
                  "description": "<p>In the customQuarterText{{lastQuarterEmploymentByGender}}, the average rate of employed population was abbreviate{{averageEmploymentRate}}%, where the rate of female employees was abbreviate{{employmentRateFemale_saudi}}% for Saudis and abbreviate{{employmentRateFemale_nonSaudi}}% for non-Saudis, while the rate of male employees was abbreviate{{employmentRateMale_saudi}}% for Saudis and abbreviate{{employmentRateMale_nonSaudi}}% for non-Saudis.</p>"
                }
              ]
            },
            {
              "id": 26,
              "section_id": 8,
              "allowed": "isArabia",
              "ordering": 2,
              "content": [
                {
                  "id": 26,
                  "locale": "en",
                  "description": "<p>The merchandise exports in {{name}} in {{monthTradeBalance}} were sar{{merchandiseExports}}, abbreviate{{growthExportsAbs}}% higherLower{{growthExports}} than previous month. The merchandise imports were sar{{merchandiseImports}}, abbreviate{{growthImportsAbs}}% higherLower{{growthImports}} than previous month. As a result, the trade balance in {{monthTradeBalance}} was sar{{tradeBalance}}.</p>"
                }
              ]
            },
            {
              "id": 65,
              "section_id": 8,
              "allowed": "isRegion",
              "ordering": 7,
              "content": [
                {
                  "id": 65,
                  "locale": "en",
                  "description": "<p>The total population registered in {{name}} in {{lastYear_totalPopulationOption}} was commas{{totalRegionPopulation}} people, where abbreviate{{populationRegionWomenPct}}% were women and abbreviate{{populationRegionMenPct}}% were men.</p>"
                }
              ]
            },
            {
              "id": 29,
              "section_id": 8,
              "allowed": "isArabia",
              "ordering": 5,
              "content": [
                {
                  "id": 29,
                  "locale": "en",
                  "description": "<p>For its part, youth unemployment (share of the labor force ages 15-24 without work but available for and seeking employment) reached a rate of {{unemploymentYouthFemale_saudi}}% for Saudi women and {{unemploymentYouthMale_saudi}}% for Saudi men.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 67,
          "slug": "water_consumption",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 47,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 67,
              "locale": "en",
              "title": "<p>Water Consumption</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 50,
              "logic": "const {abbreviate} = formatters;\nconst {name} = variables;\n\nconst dataURL =  `${variables.tesseract}/data.jsonrecords?Province=${variables.id}&cube=sama_water_consumption_region&drilldowns=Province,Year&measures=Thousand+cubic+meters`\n\nreturn {\n  data: dataURL,\n  groupBy: [\"Province ID\"],\n  label: d => String(d[\"Province\"]),\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Province ID\"] === d[\"Province ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Year\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Year\"] === maxX);\n        \n        return `${formatters.commas(maxData[\"Thousand cubic meters\"])}`;\n      },\n    }\n  },\n  title: `Evolution of Water Consumption in ${name}`,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Water Consumption (thousand cubic meters)\", d => formatters.commas(d[\"Thousand cubic meters\"])]\n    ]\n  },\n  type: \"LinePlot\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Thousand cubic meters\",\n  yConfig: {\n    tickFormat: d => formatters.abbreviate(d),\n    title: \"Thousand cubic meters\",\n  }\n}\n",
              "section_id": 67,
              "allowed": "isRegion",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 1
            },
            {
              "id": 49,
              "logic": "const {abbreviate} = formatters;\n\nconst selector = \"[[populationDensity]]\" //totalPopulationOption, densityPopulationOption\nconst selectorName = \"{{[[populationDensity]]}}\"\n\nconst measure = selector === \"totalPopulationOption\" ? \"Population\" : \"Population Density\"\n \nconst dataURL = `${variables.tesseract}/data.jsonrecords?cube=sama_water_consumption_region&drilldowns=Province%2CYear&measures=Thousand+cubic+meters`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    const data = resp.data;\n    data.forEach(d => {\n      d[\"Thousand cubic meters\"] = d[\"Thousand cubic meters\"] \n    });\n    return data;\n  },\n  groupBy: [\"Province ID\"],  \n  label: d => String(d[\"Province\"]),\n  colorScale: \"Thousand cubic meters\",\n  colorScaleConfig: {\n    scale: \"linear\",\n  //  color: formatters.colorScaleGrowth(\"sequential_neg\"),\n    axisConfig: {\n      tickFormat: d => `${formatters.abbreviate(d)}` ,\n    }\n  },\n  colorScalePosition: \"bottom\",\n  ocean: \"transparent\",\n  tiles: false,\n  time: \"Year\",\n  timeline: true,\n  tooltipConfig: {\n    tbody: [\n     [\"Year\", d => d[\"Year\"]],\n     [`Thousand Cubic Meters`, d => formatters.commas(d[\"Thousand cubic meters\"])]\n    ]\n  },\n  title: `Water Consumption by Administrative Region (thousand cubic meters)`,\n  type: \"Geomap\",\n  topojson: `/topojson/SA_regions.json`,\n  //\"topojsonFill\": \"#bbbbc2\",\n  topojsonId: d => d.properties.id,\n}",
              "section_id": 67,
              "allowed": "isArabia",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 86,
              "section_id": 67,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 86,
                  "locale": "en",
                  "description": "<p>The visualization corresponds to a map of Saudi Arabia divided into administrative regions and colored according to the water consumption (thousand cubic meters).</p>"
                }
              ]
            },
            {
              "id": 85,
              "section_id": 67,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 85,
                  "locale": "en",
                  "description": "<p>In {{lastYearWaterConsumption}}, the water consumption in Saudi Arabia was commas{{totalWaterConsumption}} thousand cubic meters. The administrative regions with the highest water consumption were list{{topRegionWaterConsumption}}.</p>"
                }
              ]
            },
            {
              "id": 88,
              "section_id": 67,
              "allowed": "isRegion",
              "ordering": 3,
              "content": [
                {
                  "id": 88,
                  "locale": "en",
                  "description": "<p>The graph shows the annual evolution of water consumption in thousands of cubic meters in {{name}}.</p>"
                }
              ]
            },
            {
              "id": 87,
              "section_id": 67,
              "allowed": "isRegion",
              "ordering": 2,
              "content": [
                {
                  "id": 87,
                  "locale": "en",
                  "description": "<p>Water consumption in {{lastYearWaterConsumptionRegion}} in {{name}} was commas{{totalWaterConsumptionRegion}} thousand cubic meters, being abbreviate{{growthWaterConsumption}}% {{waterWord}} than the consumption of the previous year.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 50,
          "slug": "employment",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 15,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 50,
              "locale": "en",
              "title": "<p>Employment</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 51,
          "slug": "unemployment",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 18,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 51,
              "locale": "en",
              "title": "<p>Unemployment</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 42,
          "slug": "revenues_expenses",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 9,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 42,
              "locale": "en",
              "title": "<p>Revenues &amp; Expenses</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 31,
              "logic": "const {abs} = formatters;\n\nconst dataURL =  `${variables.tesseract}/data.jsonrecords?cube=gastat_operating_expenses_revenues&drilldowns=Economic+Activity+Section%2CYear%2CFlow&measures=Value`\n\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n      data_.forEach(d => {\n        d[\"Value\"] = d[\"Flow ID\"] === 1 ? d[\"Value\"]*-1 : d[\"Value\"] \n    });\n  return data_\n  },\n  discrete: \"y\",\n  groupBy: [\"Flow ID\"],\n  height: 500,\n  label: d => d.Flow,\n  shapeConfig: {\n    Bar: {\n      height: \"15px\",\n      labelConfig: {\n        padding: \"0px 5px\",\n        fontSize: () => 12\n      }\n    }\n  },\n  legendTooltip: {\n    tbody: false,\n  },\n  legendPosition: \"bottom\",\n  stacked: true,\n  time: \"Year\",\n  timeline: true,\n  title: `Operating Revenues and Expenses by Economic Activity`,\n  type: \"BarChart\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Economic Activity\", d => d[\"Economic Activity Section\"]],\n      [\"Value\", d => formatters.sar(Math.abs(d[\"Value\"]))]\n    ]\n  },\n  x: \"Value\",\n  xConfig: {\n    tickFormat: d => formatters.abbreviate(abs(d)),\n    title: \"Operating Expenses and Revenues (Thousands SAR)\"\n  },\n  y: \"Economic Activity Section\",\n  yConfig: {\n    title: \"\",\n    axisConfig:{\n      tickFormat: d => d[\"Economic Activity Section\"]\n    }\n  },\n  ySort: (b, a) => a[\"Economic Activity Section\"].localeCompare(b[\"Economic Activity Section\"])\n}",
              "section_id": 42,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 35,
              "section_id": 42,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 35,
                  "locale": "en",
                  "description": "<p>The visualization shows the operating revenues and expenses of different economic activities.</p>"
                }
              ]
            },
            {
              "id": 33,
              "section_id": 42,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 33,
                  "locale": "en",
                  "description": "<p>In {{lastYearRevenues}}, the total operating revenues of the various economic activities in Saudi Arabia was sar{{totalRevenues}}, with {{topActivityRevenue}} being the activity with the highest registration (sar{{topActivityRevenueValue}}, abbreviate{{topActivityRevenuePct}}% of the total).</p>"
                }
              ]
            },
            {
              "id": 34,
              "section_id": 42,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 34,
                  "locale": "en",
                  "description": "<p>In the same year, the total operating expenses were sar{{totalExpenses}}, with {{topActivityExpenses}} being the activity with the highest registration (sar{{topActivityExpensesValue}}, abbreviate{{topActivityExpensesPct}}% of the total).</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 59,
          "slug": "energy_and_water",
          "profile_id": 1,
          "type": "Grouping",
          "ordering": 39,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 59,
              "locale": "en",
              "title": "<p>Energy &amp; Water</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 41,
          "slug": "public_finances",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 10,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 41,
              "locale": "en",
              "title": "<p>Public Finances</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 30,
              "logic": "const dataURL = `${variables.tesseract}/data.jsonrecords?cube=sama_government_revenues_expenditures&drilldowns=Type,Year&measures=Value`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n      data_.forEach(d => {\n        d[\"Group\"] = d[\"Type ID\"] === 5 ? \"Line\" : \"Bar\"\n        d[\"Value\"] = d[\"Type ID\"] === 3 || d[\"Type ID\"] === 4 ? d[\"Value\"]*-1: d[\"Value\"]*1\n    });\n  return data_;\n  },\n  discrete: \"x\",\n  groupBy: [\"Type\"],\n  shape: d => d.Group,\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Year\",\n  timeline: false,\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      [\"Value (millions)\", d => formatters.sar(Math.abs(d[\"Value\"]))]\n    ]\n  },\n  title: \"Annual Government Revenues And Expenditures\",\n  type: \"BarChart\",\n  x: \"Year\",\n  xConfig: {\n    title: \"\",\n    //tickFormat: d => d%50===0 ? d : \"\"\n  },\n  y: \"Value\",\n  yConfig: {\n    title: \"Millions of Riyals\",\n    tickFormat: d => formatters.sar(Math.abs(d)),\n  },\n}",
              "section_id": 41,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 37,
              "section_id": 41,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 37,
                  "locale": "en",
                  "description": "<p>The visualization shows the annual evolution of government expenditures and revenues and the line represents the deficit or surplus in each year.</p>"
                }
              ]
            },
            {
              "id": 36,
              "section_id": 41,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 36,
                  "locale": "en",
                  "description": "<p>The Kingdom's non-oil revenues reached sar{{nonOilRevenues}} in {{lastYearPublicFinances}}, while oil revenues were sar{{oilRevenues}}. The expenditures were sar{{totalExpensesPublicFinances}}, of which sar{{capitalExpenditures}} were capital expenditures and sar{{currentExpenditures}} were current expenditures. This results in a {{deficitSurplusWord}} of sar{{deficitSurplusAbs}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 16,
          "slug": "people_and_society",
          "profile_id": 1,
          "type": "Grouping",
          "ordering": 23,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 16,
              "locale": "en",
              "title": "<p>People &amp; Society</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 54,
          "slug": "education",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 31,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 54,
              "locale": "en",
              "title": "<p>Education</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 4,
          "slug": "labour_market",
          "profile_id": 1,
          "type": "Grouping",
          "ordering": 14,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 4,
              "locale": "en",
              "title": "<p>Labour Market</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 53,
          "slug": "housing",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 27,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 53, "locale": "en", "title": "<p>Housing</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 23,
          "slug": "consumer_price_index",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 5,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 23,
              "locale": "en",
              "title": "<p>Consumer Price Index</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 17,
              "logic": "return {\n  data: `${variables.tesseract}/data.jsonrecords?cube=sama_inflation&drilldowns=Month,Main+Division&measures=Inflation`,\n  discrete: \"y\",\n  groupBy: [\"Main Division ID\"],\n  label: d => String(d[\"Main Division\"]),\n  title: \"Consumer Price Index for Main Divisions\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", d => d[\"Month\"]],\n      [\"Consumer Price Index\", d => formatters.abbreviate(d[\"Inflation\"])]\n    ]\n  },\n  type: \"BarChart\",\n  time: \"Month\",\n  timeline: true,\n  x: \"Inflation\",\n  xConfig: {\n    title: \"Consumer Price Index (2018=100)\",\n    tickFormat: d => `${(formatters.abbreviate(d))}`,\n  },\n  ySort: (a, b) => a[\"Inflation\"] - b[\"Inflation\"],\n  y: \"Main Division\",\n  yConfig: {\n    title: false\n  }\n};",
              "section_id": 23,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 3,
              "section_id": 23,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 3,
                  "locale": "en",
                  "description": "<p>The graph shows the Consumer Price Index (CPI) by expenditure category in different months.</p>"
                }
              ]
            },
            {
              "id": 4,
              "section_id": 23,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 4,
                  "locale": "en",
                  "description": "<p>In month{{lastMonthCPI}}, the general consumer price index (CPI) was abbreviate{{generalCPI}}. The commodity that recorded the highest CPI was {{firstCommodityCPI}}, while the lowest CPI was recorded for {{lastCommodityCPI}}.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 1,
          "slug": "hero",
          "profile_id": 1,
          "type": "Hero",
          "ordering": 0,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 1, "locale": "en", "title": "<p>{{name}}</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": [
            {
              "id": 6,
              "section_id": 1,
              "allowed": "isArabia",
              "ordering": 5,
              "content": [
                {
                  "id": 6,
                  "locale": "en",
                  "title": "<p>{{lastYear_totalPopulationOption}}</p>",
                  "subtitle": "<p>Total population</p>",
                  "value": "<p>{{totalKingdom_totalPopulationOption}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 7,
              "section_id": 1,
              "allowed": "isRegion",
              "ordering": 6,
              "content": [
                {
                  "id": 7,
                  "locale": "en",
                  "title": "<p>{{lastYear_totalPopulationOption}}</p>",
                  "subtitle": "<p>Total Population</p>",
                  "value": "<p>commas{{totalRegionPopulation}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 1,
              "section_id": 1,
              "allowed": "isArabia",
              "ordering": 0,
              "content": [
                {
                  "id": 1,
                  "locale": "en",
                  "title": "<p>{{lastQuarterGDPid}}</p>",
                  "subtitle": "<p>Gross Domestic Product</p>",
                  "value": "<p>sar{{lastQuarterGDP}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 4,
              "section_id": 1,
              "allowed": "isArabia",
              "ordering": 3,
              "content": [
                {
                  "id": 4,
                  "locale": "en",
                  "title": "<p>month{{lastMonthCPI}}</p>",
                  "subtitle": "<p>Consumer Price Index</p>",
                  "value": "<p>abbreviate{{generalCPI}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 2,
              "section_id": 1,
              "allowed": "isArabia",
              "ordering": 1,
              "content": [
                {
                  "id": 2,
                  "locale": "en",
                  "title": "<p>{{monthForeignTrade}}</p>",
                  "subtitle": "<p>Merchandise Exports</p>",
                  "value": "<p>sar{{merchandiseExports}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 3,
              "section_id": 1,
              "allowed": "isArabia",
              "ordering": 2,
              "content": [
                {
                  "id": 3,
                  "locale": "en",
                  "title": "<p>{{monthForeignTrade}}</p>",
                  "subtitle": "<p>Merchandise Imports</p>",
                  "value": "<p>sar{{merchandiseImports}}</p>",
                  "tooltip": ""
                }
              ]
            },
            {
              "id": 5,
              "section_id": 1,
              "allowed": "always",
              "ordering": 4,
              "content": [
                {
                  "id": 5,
                  "locale": "en",
                  "title": "<p>{{lastQuarterUnemploymentID}}</p>",
                  "subtitle": "<p>Average Unemployment Rate</p>",
                  "value": "<p>abbreviate{{averageUnemploymentRate}}%</p>",
                  "tooltip": ""
                }
              ]
            }
          ]
        },
        {
          "id": 49,
          "slug": "industrial_production_index",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 6,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 49,
              "locale": "en",
              "title": "<p>Industrial Production Index</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 45,
              "logic": "const dataURL = `${variables.tesseract}/data.jsonrecords?cube=gastat_ipi_economic_activity&drilldowns=Month,Category&measures=Percentage+change+IPI`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n      data_.forEach(d => {\n        d[\"Group\"] = d[\"Category ID\"] === 4 ? \"Bar\" : \"Line\"\n       // const [year, month] = d[\"Month\"].split(\"-\");\n      //  d[\"Time\"] = new Date(year, month*1).getTime();\n    });\n  return data_.filter(d => d[\"Percentage change IPI\"])\n  },\n  discrete: \"x\",\n  height: 500,\n  groupBy: [\"Category\"],\n  shape: d => d.Group,\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  stacked: true,\n  time: \"Month\",\n  title: \"Percentage Change in the Industrial Production Index by Economic Activity\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", d => d[\"Month ID\"]],\n      [\"Industrial Production Index Change\", d => `${formatters.abbreviate(d[\"Percentage change IPI\"])}%`]\n    ]\n  },\n  type: \"BarChart\",\n  x: \"Month\",\n  xConfig: {\n    title: \"\",\n  },\n  y: \"Percentage change IPI\",\n  yConfig: {\n    title: \"Percentage Change\",\n    tickFormat: d => `${formatters.abbreviate(d)}%`,\n  },\n}",
              "section_id": 49,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 67,
              "section_id": 49,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 67,
                  "locale": "en",
                  "description": "<p>Mining and quarrying {{miningWordIPI}} abbreviate{{miningIPI}}% in {{monthIPI}} compared to the same period last year, Manufacturing {{manufacturingWordIPI}} abbreviate{{manufacturingIPI}}% and Electricity Supply {{electricityWordIPI}} abbreviate{{electricityIPI}}%</p>"
                }
              ]
            },
            {
              "id": 68,
              "section_id": 49,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 68,
                  "locale": "en",
                  "description": "<p>The graph shows the percentage change in the Industrial Production Index (IPI) by economic activity.</p>"
                }
              ]
            },
            {
              "id": 66,
              "section_id": 49,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 66,
                  "locale": "en",
                  "description": "<p>Saudi Arabia’s Industrial Production Index {{generalWordIPI}} abbreviate{{generalIPI}}% in {{monthIPI}} compared to the same month of last year.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 70,
          "slug": "humanitarian_donations",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 36,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 70,
              "locale": "en",
              "title": "<p>Humanitarian Donations</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 45,
          "slug": "internal_indices",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 3,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 45,
              "locale": "en",
              "title": "<p>Internal Indices</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 60,
          "slug": "energy",
          "profile_id": 1,
          "type": "SubGrouping",
          "ordering": 40,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            { "id": 60, "locale": "en", "title": "<p>Energy</p>", "short": "" }
          ],
          "subtitles": [],
          "visualizations": [],
          "descriptions": [],
          "stats": []
        },
        {
          "id": 9,
          "slug": "trade_balance",
          "profile_id": 1,
          "type": "TextViz",
          "ordering": 12,
          "allowed": "always",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 9,
              "locale": "en",
              "title": "<p>Trade Balance</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 8,
              "logic": "\nconst exports = `${variables.tesseract}/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Exports`\nconst imports = `${variables.tesseract}/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Imports`\nconst tradeBalance = `${variables.tesseract}/data.jsonrecords?cube=gastat_trade_balance&drilldowns=Month&measures=Trade+Balance`\n\n\nreturn {\n  data: [exports, imports, tradeBalance],\n  dataFormat: resp => {\n    let exports_ = resp[0].data;\n    let imports_ = resp[1].data;\n    let tradeBalance_ = resp[2].data;\n    \n    const updateData = (data, flow, flowID, value) => {\n      data.forEach(d => {\n        d[\"Flow ID\"] = flowID;\n        d[\"Flow\"] = flow;\n        d[\"Value\"] = d[value]*1000000\n        delete d[value];\n      });\n      return data;\n    };\n    \n    exports_ = updateData(exports_, \"Export\", 1, \"Exports\");\n    imports_ = updateData(imports_, \"Import\", 2, \"Imports\");\n    tradeBalance_ = updateData(tradeBalance_, \"Trade Balance \", 3, \"Trade Balance\");\n    \n    return exports_.concat([...imports_, ...tradeBalance_]);\n  },\n  groupBy: [\"Flow ID\"],\n  label: d => d[\"Flow\"],\n  legendPosition: \"bottom\",\n  legendTooltip: {\n    tbody: false,\n  },\n  lineLabels: true,\n  shapeConfig: {\n    Line: {\n      label(d) {\n        const dataArray = this._filteredData\n          \t.filter(f => f[\"Flow ID\"] === d[\"Flow ID\"]);\n        const maxX = Math.max(...dataArray.map(f => f[\"Month ID\"]));\t\t\t\n        const maxData = dataArray\n        \t.find(f => f[\"Month ID\"] === maxX);\n        \n        return `${formatters.sar(maxData[\"Value\"])}`;\n      },\n      strokeDasharray: d => d[\"Flow ID\"]*1 === 3 ? \"5 3\" : \"0\"\n    }\n  },\n  time: \"Month\",\n  tooltipConfig: {\n    tbody: [\n      [\"Month\", d => d[\"Month\"]],\n      [\"Merchandise Value\", d => formatters.sar(d[\"Value\"])]\n    ]\n  },\n  title: \"Merchandise Exports and Imports\",\n  type: \"LinePlot\",\n  x: \"Month\",\n  xConfig: {\n    title: \"\"\n  },\n  y: \"Value\",\n  yConfig: {\n    title: \"\",\n    tickFormat: d => formatters.sar(d)\n  }\n};\n",
              "section_id": 9,
              "allowed": "always",
              "logic_simple": {
                "data": [
                  "<tesseract>/data.jsonrecords?Indicator+Quarter=1%2C2&cube=gastat_indicators_quarter&drilldowns=Quarter%2CIndicator+Quarter&measures=Indicator"
                ],
                "type": "LinePlot",
                "groupBy": ["Indicator Quarter ID"],
                "x": "Quarter",
                "y": "Indicator",
                "xConfig.title": "Quarter",
                "yConfig.title": "Indicator"
              },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 6,
              "section_id": 9,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 6,
                  "locale": "en",
                  "description": "<p>In {{monthTradeBalance}}, merchandise exports reached sar{{merchandiseExports}}, while merchandise imports were sar{{merchandiseImports}}. As a result, the trade balance resulted in sar{{tradeBalance}}.</p>"
                }
              ]
            },
            {
              "id": 5,
              "section_id": 9,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 5,
                  "locale": "en",
                  "description": "<p>The graph shows the monthly evolution of merchandise exports and imports in Saudi Arabia.</p>"
                }
              ]
            }
          ],
          "stats": []
        },
        {
          "id": 7,
          "slug": "population_pyramid",
          "profile_id": 1,
          "type": "Default",
          "ordering": 25,
          "allowed": "isArabia",
          "position": "default",
          "icon": "",
          "selectors": [],
          "content": [
            {
              "id": 7,
              "locale": "en",
              "title": "<p>Population Pyramid</p>",
              "short": ""
            }
          ],
          "subtitles": [],
          "visualizations": [
            {
              "id": 3,
              "logic": "const {sum, nest} = libs.d3;\nconst {abs} = formatters;\n\nconst dataURL =  `${variables.tesseract}/data.jsonrecords?cube=gastat_population_pyramid&drilldowns=Age+Range%2CSex%2CYear&measures=Population`\n\nreturn {\n  data: dataURL,\n  dataFormat: resp => {\n    let data_ = resp.data.map(d => Object.assign({}, d));\n      data_.forEach(d => {\n        d[\"Population\"] = d[\"Sex ID\"] === 1 ? d[\"Population\"]*-1 : d[\"Population\"] \n    });\n  return data_//.filter(d => d[\"Indicator\"]*1 !== 0)\n  },\n  discrete: \"y\",\n  groupBy: ['Sex'],\n  label: d => d.Sex,\n  legendTooltip: {\n    title: d => d[\"Sex\"],\n    tbody: false,\n  },\n  shapeConfig: {\n    label: d => '',\n    fill: d => d[\"Sex\"] === \"Male\" ? \"#5259fd\" : \"#38d1da\",\n    Bar: {\n      height: \"15px\",\n      labelConfig: {\n        padding: \"0px 5px\",\n        fontSize: () => 12\n      }\n    }\n  },\n  legendConfig: {\n    label: d => d[\"Sex\"],\n    shapeConfig: {\n     fill: d => d[\"Sex\"] === \"Male\" ? \"#5259fd\" : \"#38d1da\",\n    }\n  },\n  legendPosition: \"bottom\",\n  stacked: true,\n  time: \"Year\",\n  timeline: true,\n  title: `Population Pyramid`,\n  type: \"BarChart\",\n  tooltipConfig: {\n    tbody: [\n      [\"Year\", d => d[\"Year\"]],\n      ['Age Range', d => d[\"Age Range\"]],\n      ['Population', d => formatters.abbreviate(Math.abs(d[\"Population\"]))]\n    ]\n  },\n  x: 'Population',\n  xConfig: {\n    tickFormat: d => formatters.abbreviate(abs(d)),\n    title: \"Population\"\n  },\n  y: 'Age Range',\n  yConfig: {\n    title: \"Age Range\",\n    axisConfig:{\n      tickFormat: d => d[\"Age Range\"]\n    }\n  }\n}",
              "section_id": 7,
              "allowed": "always",
              "logic_simple": { "type": "Treemap", "data": [""] },
              "simple": false,
              "ordering": 0
            }
          ],
          "descriptions": [
            {
              "id": 17,
              "section_id": 7,
              "allowed": "always",
              "ordering": 2,
              "content": [
                {
                  "id": 17,
                  "locale": "en",
                  "description": "<p><em><strong>*In some years, information is not available for all age ranges, therefore the total population of Saudi Arabia is not shown.</strong></em></p>"
                }
              ]
            },
            {
              "id": 18,
              "section_id": 7,
              "allowed": "always",
              "ordering": 1,
              "content": [
                {
                  "id": 18,
                  "locale": "en",
                  "description": "<p>The graph corresponds to a population pyramid that shows the male and female population by age range.</p>"
                }
              ]
            },
            {
              "id": 19,
              "section_id": 7,
              "allowed": "always",
              "ordering": 0,
              "content": [
                {
                  "id": 19,
                  "locale": "en",
                  "description": "<p>In {{lastYearPopulation}}, the female population was concentrated in the age range of {{topPopulationWomenAge}} years (commas{{topPopulationWomenValue}} women, corresponding to abbreviate{{topPopulationWomenShare}}% of the total female population). For its part, the male population was concentrated in the age range of {{topPopulationMenAge}} years (commas{{topPopulationMenValue}} men, representing abbreviate{{topPopulationMenShare}}% of the total male population).</p>"
                }
              ]
            }
          ],
          "stats": []
        }
      ],
      "allSelectors": [
        {
          "id": 1,
          "options": [
            { "option": "quarterOption", "allowed": "always" },
            { "option": "yearOption", "allowed": "always" }
          ],
          "default": "quarterOption",
          "profile_id": 1,
          "title": "Temporality",
          "name": "gdpTime",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 2,
          "options": [
            { "option": "totalOption", "allowed": "always" },
            { "option": "byActivity", "allowed": "always" }
          ],
          "default": "totalOption",
          "profile_id": 1,
          "title": "Data Grouping",
          "name": "activityGDP",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 4,
          "options": [
            { "option": "totalPopulationOption", "allowed": "always" },
            { "option": "densityPopulationOption", "allowed": "always" }
          ],
          "default": "totalPopulationOption",
          "profile_id": 1,
          "title": "",
          "name": "populationDensity",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 5,
          "options": [
            { "option": "housingType", "allowed": "always" },
            { "option": "housingTenure", "allowed": "always" }
          ],
          "default": "housingType",
          "profile_id": 1,
          "title": "",
          "name": "housing",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 6,
          "options": [
            { "option": "totalOption", "allowed": "always" },
            { "option": "shareOption", "allowed": "always" }
          ],
          "default": "totalOption",
          "profile_id": 1,
          "title": "",
          "name": "totalShareOption",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 9,
          "options": [
            { "option": "healthPersonnelOption", "allowed": "always" },
            { "option": "healthFacilitiesOption", "allowed": "always" }
          ],
          "default": "healthPersonnelOption",
          "profile_id": 1,
          "title": "",
          "name": "healthOptions",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 7,
          "options": [
            { "option": "totalOption", "allowed": "hidden" },
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "labourForceNationality",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 8,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "averageSalariesButton",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 10,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentNationality",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 11,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentNationalityByAge",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 12,
          "options": [
            { "option": "saudi", "allowed": "always" },
            { "option": "nonSaudi", "allowed": "always" }
          ],
          "default": "saudi",
          "profile_id": 1,
          "title": "Population",
          "name": "unemploymentByEducation",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 13,
          "options": [
            { "option": "students", "allowed": "always" },
            { "option": "schools", "allowed": "always" },
            { "option": "teachers", "allowed": "always" },
            { "option": "avgStudentSchool", "allowed": "always" },
            { "option": "avgStudentTeacher", "allowed": "always" },
            { "option": "avgTeacherSchool", "allowed": "always" }
          ],
          "default": "students",
          "profile_id": 1,
          "title": "",
          "name": "studentsMetrics",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 14,
          "options": [
            { "option": "exports", "allowed": "always" },
            { "option": "imports", "allowed": "always" }
          ],
          "default": "exports",
          "profile_id": 1,
          "title": "",
          "name": "importExport",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 15,
          "options": [
            { "option": "newStudents", "allowed": "always" },
            { "option": "enrolledStudents", "allowed": "always" },
            { "option": "graduates", "allowed": "always" }
          ],
          "default": "newStudents",
          "profile_id": 1,
          "title": "",
          "name": "higherEducation",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 16,
          "options": [
            { "option": "realOil", "allowed": "always" },
            { "option": "nominalOil", "allowed": "always" }
          ],
          "default": "realOil",
          "profile_id": 1,
          "title": "",
          "name": "oilPrice",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 17,
          "options": [
            { "option": "productionOil", "allowed": "always" },
            { "option": "productionRefined", "allowed": "always" }
          ],
          "default": "productionOil",
          "profile_id": 1,
          "title": "",
          "name": "energyProduction",
          "type": "single",
          "dynamic": ""
        },
        {
          "id": 18,
          "options": [
            { "option": "exportOil", "allowed": "always" },
            { "option": "exportRefined", "allowed": "always" }
          ],
          "default": "exportOil",
          "profile_id": 1,
          "title": "",
          "name": "energyDestinations",
          "type": "single",
          "dynamic": ""
        }
      ],
      "allMaterializers": [
        {
          "id": 1,
          "name": "Buttons",
          "description": "",
          "logic": "return {\n  yearOption: \"Annual\",\n  quarterOption: \"Quarterly\",\n  totalOption: \"Total\",\n  byActivity: \"By Economic Activity\",\n  saudi: \"Saudi\",\n  nonSaudi: \"Non Saudi\",\n  totalPopulationOption: \"Total Population\",\n  densityPopulationOption: \"Population Density\",\n  housingType: \"Type of Housing\",\n  housingTenure: \"Tenure of Housing\",\n  shareOption: \"Share\",\n  allOption: \"All\",\n  healthPersonnelOption:  \"Health personnel\",\n  healthFacilitiesOption:  \"Health Facilities\",\n  students: \"Students\",\n  schools: \"Schools\",\n  teachers: \"Teachers\",\n  avgStudentSchool: \"Average Number of Students per School\",\n  avgStudentTeacher: \"Average Number of Students per Teacher\",\n  avgTeacherSchool: \"Average Number of Teachers per School\",\n  imports: \"Imports\",\n  exports: \"Exports\",\n  newStudents: \"New Students\",\n  enrolledStudents: \"Enrolled Students\",\n  graduates: \"Graduates\",\n  realOil: \"Real Oil Price\",\n  nominalOil: \"Nominal Oil Price\",\n  productionOil: \"Crude Oil\",\n  productionRefined: \"Refined Products\",\n  exportOil: \"Crude Oil\",\n  exportRefined: \"Refined Products\"\n\n}",
          "ordering": 0,
          "profile_id": 1,
          "allowed": "always"
        },
        {
          "id": 2,
          "name": "[GDP] Top economic activity share",
          "description": "",
          "logic": "var quarterGDP = variables.quarterGDP;\nvar topActivityGDPvalue = variables.topActivityGDPvalue;\n\nvar shareTopActivityGDP = (topActivityGDPvalue / quarterGDP) * 100\n\nreturn {\n  shareTopActivityGDP: shareTopActivityGDP\n}",
          "ordering": 1,
          "profile_id": 1,
          "allowed": "always"
        },
        {
          "id": 3,
          "name": "Visibility variables",
          "description": "",
          "logic": "var hierarchy = variables.hierarchy;\n\nreturn {\n  hidden: false,\n  isArabia: hierarchy !== \"Province\",\n  isRegion: hierarchy === \"Province\",\n  isRegionTotal_totalPopulationOption: hierarchy === \"Province\",\n  isRegionTotal_densityPopulationOption : false,\n  isRegionDensity_totalPopulationOption: false,\n  isRegionDensity_densityPopulationOption : hierarchy === \"Province\",\n  personnel_healthPersonnelOption:  true,\n  personnel_healthFacilitiesOption: false,\n  facilities_healthPersonnelOption:  false,\n  facilities_healthFacilitiesOption: true,\n  \n  type_housingType: true,\n  type_housingTenure:false,\n  tenure_housingType: false,\n  tenure_housingTenure: true,\n  \n  countryForeignTrade: false,\n  productForeignTrade: false,\n  \n  energyOil_productionOil: true,\n  energyOil_productionRefined: false,\n  energyRefined_productionOil: false,\n  energyRefined_productionRefined: true,\n\n}",
          "ordering": 2,
          "profile_id": 1,
          "allowed": "always"
        }
      ]
    }
  },
  "ids": "sau",
  "dims": [{ "slug": "geo", "id": "sau", "memberSlug": "saudi-arabia" }],
  "images": [
    {
      "id": 1,
      "url": "custom-image-1",
      "author": null,
      "license": null,
      "createdAt": "2023-01-18T21:15:58.621Z",
      "updatedAt": "2023-01-26T17:40:58.513Z",
      "content": []
    }
  ]
}
