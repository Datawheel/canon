[
  {
    "id": 1,
    "name": "abbreviate",
    "description": "Abbreviates a number into a smaller more human-readible number.",
    "logic": "return libs.d3plus.formatAbbreviate(n);"
  },
  {
    "id": 2,
    "name": "abs",
    "description": "Simple Absolute Value",
    "logic": "return Math.abs(n);"
  },
  {
    "id": 3,
    "name": "bucket",
    "description": "Sanitizes bucket strings to \"< n\", \"n1 - n2\", and \"n+\"",
    "logic": "\nvar re = new RegExp(/([\\$0-9\\,]+)[A-z\\-\\s\\&]*([\\$0-9\\,]*)/g);\nvar nums = re.exec(n);\nif (nums) {\n  nums = nums.slice(1)\n    .filter(function (d) { return d.length; })\n    .map(function (d) {\n      if (d.includes(\",\")) {\n        if (d.indexOf(\",\") === d.length - 4) {\n          d = d\n            .replace(/,000$/g, \"k\")\n            .replace(/([0-9]+)(,999$)/g, function (n) { return ((parseInt(n) + 1) + \"k\"); });\n        }\n        else if (d.indexOf(\",\") === d.length - 8) {\n          d = d\n            .replace(/,000,000$/g, \"M\")\n            .replace(/([0-9]+)(,999,999$)/g, function (n) { return ((parseInt(n) + 1) + \"M\"); });\n        }\n      }\n      return d;\n    });\n  if (nums.length === 2) { return nums.join(\" - \"); }\n  else if (n.toLowerCase().match(/under|less|\\</g)) { return (\"< \" + (nums[0])); }\n  else if (n.toLowerCase().match(/over|more|\\+|\\>/g)) { return ((nums[0]) + \"+\"); }\n  else { return (\"\" + (nums[0])); }\n}\nelse { return \"None\"; }"
  },
  {
    "id": 4,
    "name": "commas",
    "description": "Rounds to nearest whole number and adds commas.",
    "logic": "return libs.d3.format(\",\")(Math.round(n));"
  },
  {
    "id": 5,
    "name": "date",
    "description": "Formats a date into \"%B %d, %Y\" format.",
    "logic": "if (typeof n === \"string\") { n = libs.d3plus.date(n); }\nreturn libs.d3.timeFormat(\"%B %d, %Y\")(n);"
  },
  {
    "id": 6,
    "name": "dollar",
    "description": "global formatters",
    "logic": "if (typeof n === \"number\") { n = formatters.abbreviate(n); }\nreturn n.charAt(0) === \"-\" ? n.replace(\"-\", \"-$\") : (\"$\" + n);"
  },
  {
    "id": 7,
    "name": "formatFieldName",
    "description": "Removes all HTML tags from a string and converts <br> tags to spaces.",
    "logic": " // stats\nif (contentType.toLowerCase() === \"stat\") {\n  if (field === \"title\") { return \"Stat label\"; }\n  if (field === \"value\") { return \"Stat value\"; }\n  if (field === \"subtitle\") { return \"Stat subtitle\"; }\n  if (field === \"tooltip\") { return \"Tooltip text\"; }\n}\n if (contentType.toLowerCase() === \"section\") {\n  if (field === \"short\") { return \"Short title\"; }\n}\n // paragraphs\nif (contentType.toLowerCase() === \"description\") {\n  if (field === \"description\") { return \"Paragraph\"; }\n}\n // everything else\nreturn upperCaseFirst(field);"
  },
  {
    "id": 8,
    "name": "gINI",
    "description": "Calculates GINI growth given an array of data and string keys to access the following: bucket, value, weight.",
    "logic": "var data = n.data;\nvar bucket = n.bucket;\nvar value = n.value;\nvar weight = n.weight;\nvar sum = libs.d3.sum;\nvar newData = [];\nvar weightTotal = sum(data, function (d) { return d[weight]; });\ndata.forEach(function(d, i) {\n  var bucketName = (\"\" + (d[bucket]))\n    .replace(/^[\\s\\<\\>\\$A-z]*/g, \"\")\n    .replace(/[A-z0-9]+\\-/g, \"\");\n  var mod = d[bucket].includes(\">\") || d[bucket].includes(\"+\")\n    || d[bucket].includes(\"more\") || d[bucket].includes(\"over\") || d[bucket].includes(\"greater\")\n    ? 1 : 0;\n  newData.push({\n    data: d,\n    bucket: parseFloat(bucketName, 10) + mod,\n    total: d[value] * d[weight]\n  });\n});\nnewData.sort(function (a, b) { return a.bucket - b.bucket; });\nvar total = sum(newData, function (d) { return d.total; });\nnewData.forEach(function(d, i) {\n  d.pctTotal = d.total / total;\n  d.pctWeight = d.data[weight] / weightTotal;\n});\nnewData.forEach(function(d, i) {\n  d.pctBetter = i === newData.length - 1 ? 0 : sum(newData.slice(i + 1), function (n) { return n.pctWeight; });\n  d.score = d.pctTotal * (d.pctWeight + (2 * d.pctBetter));\n});\nreturn 1 - sum(newData, function (d) { return d.score; });"
  },
  {
    "id": 9,
    "name": "grewTo",
    "description": "",
    "logic": "\nreturn n < 0 ? \"declined from\" : n > 0 ? \"grew to\" : \"stayed at\";"
  },
  {
    "id": 10,
    "name": "grewWord",
    "description": "Returns either \"grew\", \"declined\", or \"stayed\" depending on the provided number's sign.",
    "logic": "\nreturn n < 0 ? \"declined\" : n > 0 ? \"grew\" : \"stayed\";"
  },
  {
    "id": 11,
    "name": "growing",
    "description": "",
    "logic": "\nreturn n < 0 ? \"declining\" : \"growing\";"
  },
  {
    "id": 12,
    "name": "growth",
    "description": "Calculates the growth percentage between two numbers provided the following object format: {curr, prev}. Also supports calculating the growth between two margin of errors using this format: {curr, currMoe, prev, prevMoe}.",
    "logic": "var curr = n.curr;\nvar currMoe = n.currMoe; if ( currMoe === void 0 ) currMoe = 0;\nvar prev = n.prev;\nvar prevMoe = n.prevMoe; if ( prevMoe === void 0 ) prevMoe = 0;\nvar value;\nif (currMoe || prevMoe) {\n  var f1 = Math.pow(-prev / Math.pow(curr, 2), 2) * Math.pow(currMoe, 2);\n  var f2 = Math.pow(1 / curr, 2) * Math.pow(prevMoe, 2);\n  value = Math.sqrt(f1 + f2);\n}\nelse { value = (curr - prev) / prev; }\nreturn value * 100;"
  },
  {
    "id": 13,
    "name": "growthPct",
    "description": "global formatters",
    "logic": "\nreturn ((formatters.abbreviate(Math.abs(n))) + \"%\");"
  },
  {
    "id": 14,
    "name": "growthWord",
    "description": "Returns either \"growth\" or \"decline\" depending on the provided number's sign.",
    "logic": "return n < 0 ? \"decline\" : \"growth\";"
  },
  {
    "id": 15,
    "name": "highWord",
    "description": "Returns either \"higher than\", \"lower than\", or \"approximately the same as\" depending on the provided number's sign.",
    "logic": "\nreturn n < 0 ? \"lower than\" : n > 0 ? \"higher than\" : \"approximately the same as\";"
  },
  {
    "id": 16,
    "name": "increaseWord",
    "description": "Returns either \"increase\", \"decrease\", or \"change\" depending on the provided number's sign.",
    "logic": "return n < 0 ? \"decrease\" : n > 0 ? \"increase\" : \"change\";"
  },
  {
    "id": 18,
    "name": "increasing",
    "description": "",
    "logic": "\nreturn n < 0 ? \"decreasing\" : n > 0 ? \"increasing\" : \"maintaining\";"
  },
  {
    "id": 19,
    "name": "largerThan",
    "description": "",
    "logic": "\nreturn n < 0 ? \"smaller than\" : n > 0 ? \"larger than\" : \"the same as\";"
  },
  {
    "id": 20,
    "name": "list",
    "description": "Joins an array of strings together, adding commas and \"and\" when necessary.",
    "logic": "return n.reduce(function (str, item, i) {\n  if (!i) { str += item; }\n  else if (i === n.length - 1 && i === 1) { str += \" and \" + item; }\n  else if (i === n.length - 1) { str += \", and \" + item; }\n  else { str += \", \" + item; }\n  return str;\n}, \"\");"
  },
  {
    "id": 21,
    "name": "longWord",
    "description": "",
    "logic": "\nreturn n < 0 ? \"shorter\" : n > 0 ? \"longer\" : \"similar\";"
  },
  {
    "id": 22,
    "name": "lowerCaseFirst",
    "description": "converts the first letter of a string to lowercase",
    "logic": "return typeof n === \"string\" ? n.charAt(0).toLowerCase() + n.slice(1) : n;"
  },
  {
    "id": 23,
    "name": "moreFewerWord",
    "description": "",
    "logic": "\nreturn n < 0 ? \"fewer\" : \"more\";"
  },
  {
    "id": 24,
    "name": "moreLess",
    "description": "Returns either \"more\" or \"less\" depending on the provided number's sign.",
    "logic": "return n < 0 ? \"less\" : \"more\";"
  },
  {
    "id": 25,
    "name": "moreWord",
    "description": "Returns either \"more than\", \"less than\", or \"approximately the same\" depending on the provided number's sign.",
    "logic": "\nreturn n < 0 ? \"less than\" : n > 0 ? \"more than\" : \"approximately the same\";"
  },
  {
    "id": 26,
    "name": "olderWord",
    "description": "",
    "logic": "\nreturn n < 0 ? \"getting younger\" : n > 0 ? \"getting older\" : \"staying the same age\";"
  },
  {
    "id": 27,
    "name": "olderYounger",
    "description": "",
    "logic": "\nreturn n < 0 ? \"younger than\" : n > 0 ? \"older than\" : \"the same age as\";"
  },
  {
    "id": 28,
    "name": "plural",
    "description": "Pluralizes a word.",
    "logic": "return n.replace(/\\w$/g, function (chr) { return chr === \"y\" ? \"ies\" : (chr + \"s\"); });"
  },
  {
    "id": 29,
    "name": "pxToInt",
    "description": "Takes a pixel value and converts it to an integer",
    "logic": "return parseInt(str.replace(/\\D+/g, \"\"), 10);"
  },
  {
    "id": 30,
    "name": "salary",
    "description": "global formatters",
    "logic": "var str;\nif (n < 1000000) {\n  str = libs.d3.format(\",\")(n.toFixed(0));\n}\nelse { str = formatters.abbreviate(n); }\nreturn formatters.dollar(str);"
  },
  {
    "id": 31,
    "name": "stripEntities",
    "description": "Removes non breaking spaces & other html entities from a string",
    "logic": "return typeof n === \"string\" ? String(n).replace(/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});/ig, \" \") : n;"
  },
  {
    "id": 33,
    "name": "stripOL",
    "description": "Removes ordered list wrapper tags from a string.",
    "logic": "return n.replace(/<ol>/g, \"\").replace(/<\\/ol>/g, \"\");"
  },
  {
    "id": 34,
    "name": "stripP",
    "description": "Removes all paragraph tags from a string.",
    "logic": "return n.replace(/<p>/g, \"\").replace(/<\\/p>/g, \"\");"
  },
  {
    "id": 35,
    "name": "stripUL",
    "description": "Removes unordered list wrapper tags from a string.",
    "logic": "return n.replace(/<ul>/g, \"\").replace(/<\\/ul>/g, \"\");"
  },
  {
    "id": 36,
    "name": "toKebabCase",
    "description": "Takes a camelCase or PascalCase string and converts it to kebab-case",
    "logic": " // make sure this is a valid string and this makes sense\nif (typeof str === \"string\") {\n  // make sure the first character is lowercase\n  str = str.charAt(0).toLowerCase() + str.substring(1);\n  // grab uppercase characters, add a dash before them, and convert the whole thing to lowercase\n  return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n // error handling\nreturn \"invalid string passed to toKebabCase()\";"
  },
  {
    "id": 37,
    "name": "toSpacedCase",
    "description": "Takes a camelCase or PascalCase string and adds spaces (I know Spaced Case isn't a thing, deal with it)",
    "logic": " // make sure this is a valid string and this makes sense\nif (typeof str === \"string\") {\n  // grab uppercase characters, add a space before them, convert the whole thing to lowercase, and remove leading white space\n  return str.replace(/([A-Z])/g, \" $1\").toLowerCase().trim();\n}\n // error handling\nreturn \"invalid string passed to toSpacedCase()\";"
  },
  {
    "id": 38,
    "name": "upperCaseFirst",
    "description": "converts the first letter of a string to uppercase",
    "logic": "return str.charAt(0).toUpperCase() + str.slice(1);"
  },
  {
    "id": 39,
    "name": "customQuarterText",
    "description": "",
    "logic": "var quarterText = {\n  es: [\"primer\", \"segundo\", \"tercer\", \"cuarto\"],\n  en: [\"first\", \"second\", \"third\", \"fourth\"],\n  periodo: {es: \"trimestre de\", en:\"quarter of\"}\n};\n\nvar year = n.toString().slice(0,4);\nvar quarter = quarterText[locale][n.toString().slice(4,5) - 1];\n\n\nreturn (quarter + \" \" + (quarterText[\"periodo\"][locale]) + \" \" + year);"
  },
  {
    "id": 41,
    "name": "lowercase",
    "description": "",
    "logic": "return n.toString().toLowerCase();"
  },
  {
    "id": 42,
    "name": "month",
    "description": "",
    "logic": "var months = [\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \n  \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nvar month =(n.toString().slice(4,6)) * 1\nvar year = n.toString().slice(0,4)\n\nreturn ((months[month-1]) + \" \" + year);"
  },
  {
    "id": 43,
    "name": "higherLower",
    "description": "Return \"higher\" or \"lower\"",
    "logic": "return n < 0 ? \"lower\" : n > 0 ? \"higher\" : \"equal\";"
  },
  {
    "id": 40,
    "name": "sar",
    "description": "Saudi Arabia coin",
    "logic": "\nif (typeof n === \"number\") { n = libs.d3plus.formatAbbreviate(n); }\nreturn (n + \" SAR\");\n//n.charAt(0) === \"-\" ? n.replace(\"-\", \"-$\") : `$${n}`;\n"
  },
  {
    "id": 17,
    "name": "grewWord",
    "description": "",
    "logic": "return n < 0 ? \"decreased\" : \"grew\" "
  },
  {
    "id": 32,
    "name": "stripHTML",
    "description": "Converts html tags to spaces, then removes redundant spaces",
    "logic": "var entities = {\n    \"&amp;\": \"&\",\n    \"&lt;\": \"<\",\n    \"&gt;\": \">\",\n    \"&quot;\": \"\\\"\",\n    \"&#x27;\": \"'\",\n    \"&#x60;\": \"`\",\n    \"&nbsp;\": \"\"\n  };\n  \nvar source = \"(?:\" + (Object.keys(entities).join(\"|\")) + \")\";\nvar testRegexp = RegExp(source);\nvar replaceRegexp = RegExp(source, \"g\");\nvar s = String(n).replace(/<[^>]+>/g, \" \").replace(/\\s+/g, \" \").trim();\nreturn testRegexp.test(s) ? s.replace(replaceRegexp, function (match) { return entities[match]; }) : s;"
  }
]
